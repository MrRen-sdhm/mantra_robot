import sys
import numpy as np
import time
from skimage import measure
from plyfile import PlyData, PlyElement
import array
import open3d as o3d


def meshwrite_binary(filename, mesh_points, faces):
    num_verts = mesh_points.shape[0]
    num_faces = faces.shape[0]

    verts_tuple = np.zeros((num_verts,), dtype=[('x', 'f4'), ('y', 'f4'),
                                                ('z', 'f4')])
    faces_tuple = np.zeros((num_faces,), dtype=[('vertex_indices', 'i4', (3,))])

    for i in xrange(0, num_verts):
        verts_tuple[i] = tuple(mesh_points[i, :])

    for i in xrange(0, num_faces):
        faces_tuple[i] = faces[i, :].tolist()

    el_verts = PlyElement.describe(verts_tuple, 'vertex')
    el_faces = PlyElement.describe(faces_tuple, 'face')

    ply_data = PlyData([el_verts, el_faces])
    print "saving mesh to %s" %(filename)
    ply = ply_data.write(filename)


# Save 3D mesh to a polygon .ply file
def meshwrite_ascii(filename, verts, faces, norms=None):
    # Write header
    ply_file = open(filename, 'w')
    ply_file.write("ply\n")
    ply_file.write("format ascii 1.0\n")
    ply_file.write("element vertex %d\n" % (verts.shape[0]))
    ply_file.write("property float x\n")
    ply_file.write("property float y\n")
    ply_file.write("property float z\n")
    if norms is not None:
        ply_file.write("property float nx\n")
        ply_file.write("property float ny\n")
        ply_file.write("property float nz\n")
    ply_file.write("element face %d\n" % (faces.shape[0]))
    ply_file.write("property list uchar int vertex_indices\n")
    ply_file.write("end_header\n")

    # Write vertex list
    for i in range(verts.shape[0]):
        if norms is not None:
            ply_file.write("%f %f %f %f %f %f\n" % (verts[i, 0], verts[i, 1],
                                                    verts[i, 2], norms[i, 0], norms[i, 1], norms[i, 2]))
        else:
            ply_file.write("%f %f %f\n" % (verts[i, 0], verts[i, 1], verts[i, 2]))

    # Write face list
    for i in range(faces.shape[0]):
        ply_file.write("3 %d %d %d\n" % (faces[i, 0], faces[i, 1], faces[i, 2]))

    ply_file.close()


def convert_tsdf_to_ply(tsdf_bin_path, tsdf_mesh_path):
    """
    Converts the tsdf binary file to a mesh file in ply format

    The indexing in the tsdf is
    (x,y,z) <--> (x + y * dim_x + z * dim_x * dim_y)
    """
    start_time = time.time()
    fin = open(tsdf_bin_path + '/tsdf.bin', "rb")

    tsdfHeader = array.array("f")  # f is the typecode for float32
    tsdfHeader.fromfile(fin, 8)
    # print tsdfHeader
    # print type(tsdfHeader)

    voxelGridDim = tsdfHeader[0:3]
    voxelGridDim = np.asarray(voxelGridDim, dtype=np.int)
    voxelGridOrigin = tsdfHeader[3:6]
    voxelSize = tsdfHeader[6]
    truncMargin = tsdfHeader[7]

    dim_x = voxelGridDim[0]
    dim_y = voxelGridDim[1]
    dim_z = voxelGridDim[2]

    headerSize = 8
    tsdf_vec = np.fromfile(tsdf_bin_path + '/tsdf.bin', np.float32)
    tsdf_vec = tsdf_vec[headerSize:]
    tsdf = np.reshape(tsdf_vec, voxelGridDim, order='F') # reshape using Fortran order

    # print "tsdf.shape:", tsdf.shape
    # print "voxelGridDim: ", voxelGridDim
    # print "voxeGridOrigin: ", voxelGridOrigin
    # print "tsdf.shape:", tsdf.shape

    verts, faces, normals, values = measure.marching_cubes_lewiner(tsdf, spacing=[voxelSize]*3, level=0)

    # print "type(verts): ", type(verts)
    # print "verts.shape: ", verts.shape
    # print "faces.shape:", faces.shape
    #
    # print "np.max(verts[:,0]): ", np.max(verts[:,0])
    # print "np.min(verts[:,0]): ", np.min(verts[:, 0])
    #
    # print "verts[0,:] = ", verts[0,:]
    # print "faces[0,:] = ", faces[0,:]

    # transform from voxel coordinates to camera coordinates
    # note x and y are flipped in the output of marching_cubes
    mesh_points = np.zeros_like(verts)
    # mesh_points = verts
    mesh_points[:,0] = voxelGridOrigin[0] + verts[:,0]
    mesh_points[:,1] = voxelGridOrigin[1] + verts[:,1]
    mesh_points[:,2] = voxelGridOrigin[2] + verts[:,2]

    # normals are not correct which generated by marching_cubes_lewiner, use open3d to cumpute again
    mesh = o3d.geometry.TriangleMesh()
    mesh.vertices = o3d.utility.Vector3dVector(mesh_points)
    mesh.triangles = o3d.utility.Vector3iVector(faces)
    mesh.compute_vertex_normals()

    meshwrite_ascii(tsdf_mesh_path + '/mesh.ply', np.asarray(mesh.vertices), np.asarray(mesh.triangles),
                                                                            norms=np.asarray(mesh.vertex_normals))
    # o3d.visualization.draw_geometries([mesh])

    # meshwrite_binary(tsdf_mesh_filename, mesh_points, faces)

    print "converting to ply format and writing to file took %.4fs" % (time.time() - start_time)


if __name__ == '__main__':
    input_file_path = sys.argv[1]
    output_file_path = sys.argv[2]
    convert_tsdf_to_ply(input_file_path, output_file_path)
