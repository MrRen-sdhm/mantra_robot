/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-11-18 21:34:28.452971
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[0]);
x5=IKcos(j[3]);
x6=IKsin(j[1]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKsin(j[6]);
x11=IKcos(j[6]);
x12=IKcos(j[5]);
x13=IKsin(j[5]);
x14=((0.2255)*x7);
x15=((0.2255)*x9);
x16=((1.0)*x12);
x17=((1.0)*x3);
x18=((1.0)*x7);
x19=((0.2255)*x8);
x20=((1.0)*x8);
x21=((1.0)*x13);
x22=((1.0)*x5);
x23=((0.33)*x6);
x24=((0.32)*x3);
x25=((1.0)*x9);
x26=(x0*x2);
x27=(x6*x7);
x28=(x2*x4);
x29=(x1*x4);
x30=(x0*x3);
x31=(x5*x6);
x32=(x2*x6);
x33=(x1*x5);
x34=((1.0)*x26);
x35=(x1*x22);
x36=(x31*x4);
x37=(x0*x18*x6);
x38=(x18*x4*x6);
x39=(x22*x4*x6);
x40=(x25*x32);
x41=(x28+((x1*x30)));
x42=(((x1*x26))+(((-1.0)*x17*x4)));
x43=(((x1*x28))+x30);
x44=(((x29*x3))+(((-1.0)*x34)));
x45=((((-1.0)*x17*x29))+x34);
x46=((1.0)*x42);
x47=((((-1.0)*x0*x1*x17))+(((-1.0)*x28)));
x48=(x43*x8);
x49=(x44*x5);
x50=(((x1*x18))+((x17*x31)));
x51=((-1.0)*x50);
x52=(x41*x5);
x53=(x42*x8);
x54=(x42*x9);
x55=(x45*x7);
x56=(x50*x8);
x57=((((-1.0)*x37))+x52);
x58=((((-1.0)*x38))+x49);
x59=((((-1.0)*x22*x41))+x37);
x60=((((-1.0)*x39))+x55);
x61=(((x47*x7))+(((-1.0)*x0*x22*x6)));
x62=((((-1.0)*x20*x32))+((x51*x9)));
x63=(x57*x9);
x64=(x13*x60);
x65=(x48+((x58*x9)));
x66=((((-1.0)*x16*x62))+((x21*((x35+(((-1.0)*x27*x3)))))));
x67=(((x13*x61))+((x12*((x53+x63)))));
eerot[0]=(((x11*x67))+((x10*((x54+((x59*x8)))))));
eerot[1]=(((x11*(((((-1.0)*x20*x59))+(((-1.0)*x25*x42))))))+((x10*x67)));
eerot[2]=(((x12*x61))+((x13*(((((-1.0)*x20*x42))+(((-1.0)*x25*x57)))))));
IkReal x68=(x0*x31);
IkReal x69=((1.0)*x0);
eetrans[0]=(((x7*(((((-1.0)*x1*x24*x69))+(((-0.32)*x28))))))+(((-1.0)*x23*x69))+((x13*(((((-1.0)*x19*x42))+(((-1.0)*x15*x57))))))+((x12*((((x14*x47))+(((-0.2255)*x68))))))+(((-0.32)*x68)));
eerot[3]=((((-1.0)*x10*((((x20*(((((-1.0)*x22*x44))+x38))))+((x25*x43))))))+(((-1.0)*x11*(((((1.0)*x64))+(((1.0)*x12*((((x9*((x49+(((-1.0)*x27*x4))))))+x48)))))))));
eerot[4]=(((x11*((((x8*(((((-1.0)*x49))+x38))))+((x43*x9))))))+((x10*(((((-1.0)*x21*x60))+(((-1.0)*x16*x65)))))));
eerot[5]=(((x13*x65))+((x12*(((((-1.0)*x18*x45))+x39)))));
eetrans[1]=(((x13*((((x19*x43))+((x15*x58))))))+((x23*x4))+((x12*(((((0.2255)*x36))+(((-1.0)*x14*x45))))))+(((0.32)*x36))+((x7*(((((-0.32)*x26))+((x24*x29)))))));
eerot[6]=(((x11*x66))+((x10*(((((-1.0)*x20*x50))+x40)))));
eerot[7]=(((x11*(((((-1.0)*x40))+x56))))+((x10*x66)));
eerot[8]=(((x13*x62))+((x12*(((((-1.0)*x17*x27))+x35)))));
eetrans[2]=((0.3705)+((x12*(((((-1.0)*x14*x3*x6))+(((0.2255)*x33))))))+(((-1.0)*x24*x27))+((x13*((((x15*x51))+(((-1.0)*x19*x32))))))+(((0.33)*x1))+(((0.32)*x33)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {1}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j1,cj1,sj1,htj1,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij1[2], _nj1;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j1=pfree[0]; cj1=cos(pfree[0]); sj1=sin(pfree[0]), htj1=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=(px+(((-0.2255)*r02)));
new_r10=((-1.0)*r10);
new_r11=r11;
new_r12=r12;
new_py=((((-1.0)*py))+(((0.2255)*r12)));
new_r20=((-1.0)*r20);
new_r21=r21;
new_r22=r22;
new_pz=((0.3705)+(((-1.0)*pz))+(((0.2255)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x70=((1.0)*px);
IkReal x71=((1.0)*pz);
IkReal x72=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x72))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x71)));
rxp0_2=((((-1.0)*r10*x70))+((py*r00)));
rxp1_0=((((-1.0)*r21*x72))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x71)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x70)));
rxp2_0=((((-1.0)*r22*x72))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x71)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x70)));
{
IkReal j0eval[4];
IkReal x73=sj1*sj1;
j0eval[0]=(((x73*(px*px)))+((x73*(py*py))));
j0eval[1]=0.4356;
j0eval[2]=sj1;
j0eval[3]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x74=((0.32)*r22);
IkReal x75=((1.0)*pz);
IkReal x76=((0.33)*cj1);
IkReal x77=pz*pz;
IkReal x78=(pz*r22);
IkReal x79=((0.64)*x78);
IkReal x80=(pz*x75);
IkReal x81=((-1.0)*pz);
IkReal x82=(x76+x75);
IkReal x83=(x74+(((-1.0)*x82)));
IkReal x84=((((-1.0)*x74))+(((-1.0)*x82)));
IkReal x85=((0.0065)+(((-1.0)*x79))+(((-1.0)*x80)));
IkReal x86=((0.0065)+x79+(((-1.0)*x80)));
px=0;
py=0;
pp=x77;
npx=(pz*r20);
npy=(pz*r21);
npz=x78;
rxp0_0=(pz*r10);
rxp0_1=(r00*x81);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x81);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x81);
rxp2_2=0;
IkReal gconst0=x84;
IkReal gconst1=x83;
IkReal gconst2=x85;
IkReal gconst3=x86;
IkReal gconst4=x84;
IkReal gconst5=x83;
IkReal gconst6=x85;
IkReal gconst7=x86;
IkReal gconst8=x84;
IkReal gconst9=x83;
IkReal gconst10=x85;
IkReal gconst11=x86;
IkReal gconst12=x84;
IkReal gconst13=x83;
IkReal gconst14=x85;
IkReal gconst15=x86;
IkReal x87=pz*pz;
IkReal x88=pz*pz*pz;
IkReal x89=r22*r22;
IkReal x90=cj1*cj1;
IkReal x91=pz*pz*pz*pz;
IkReal x92=r20*r20;
IkReal x93=r21*r21;
IkReal x94=(r20*r21);
IkReal x95=((0.003514368)*pz);
IkReal x96=(cj1*x92);
IkReal x97=((1.6384)*x91);
IkReal x98=((0.540672)*x88);
IkReal x99=(cj1*x88);
IkReal x100=(cj1*x89);
IkReal x101=(x87*x90);
IkReal x102=(x91*x92);
IkReal x103=(x87*x93);
IkReal x104=(x87*x89);
IkReal x105=(pz*x100);
IkReal x106=(x89*x91);
IkReal x107=(cj1*pz*x93);
IkReal x108=(x87*x92);
IkReal x109=((((0.0212992)*x87*x94))+(((2.162688)*x94*x99))+(((0.014057472)*cj1*pz*x94))+(((0.71368704)*x101*x94))+(((6.92224e-5)*x94))+((x94*x97)));
j6eval[0]=((((0.5)*(IKabs(((((3.46112e-5)*x92))+(((-2.4576)*x106))+(((-0.0001038336)*x89))+(((-0.021086208)*x105))+(((-3.2768)*x91*x93))+(((-1.42737408)*x101*x93))+(((-0.0319488)*x104))+(((1.081344)*x88*x96))+(((-0.0001384448)*x93))+(((-0.0425984)*x103))+(((0.8192)*x102))+(((-3.244032)*x89*x99))+(((0.007028736)*pz*x96))+(((0.0106496)*x108))+(((0.35684352)*x101*x92))+(((-0.028114944)*x107))+(((-1.07053056)*x101*x89))+(((-4.325376)*x93*x99)))))))+(IKabs(((((-0.014057472)*x105))+(((-0.014057472)*x107))+(((-0.71368704)*x101*x93))+(((-0.71368704)*x101*x89))+(((-0.0212992)*x104))+(((-0.0212992)*x103))+(((-6.92224e-5)*x89))+(((-6.92224e-5)*x93))+(((-2.162688)*x93*x99))+(((-2.162688)*x89*x99))+(((-1.0)*x93*x97))+(((-1.0)*x89*x97)))))+(((2.0)*(IKabs(x109))))+(((0.5)*(IKabs(((((-1.0)*x95*x96))+(((-0.4096)*x102))+(((-0.4096)*x106))+(((-0.0053248)*x104))+(((-0.0053248)*x108))+(((-1.73056e-5)*x89))+(((-1.73056e-5)*x92))+(((-1.0)*x100*x95))+(((-1.0)*x100*x98))+(((-0.17842176)*x101*x92))+(((-0.17842176)*x101*x89))+(((-1.0)*x96*x98))))))));
if( IKabs(j6eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5, j6]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x110=r20*r20;
IkReal x111=pz*pz;
IkReal x112=r21*r21;
IkReal x113=(gconst11*gconst6);
IkReal x114=(gconst0*gconst5);
IkReal x115=(gconst0*gconst11);
IkReal x116=((1.0)*gconst12);
IkReal x117=((1.6384)*gconst3);
IkReal x118=(gconst1*gconst14);
IkReal x119=(gconst13*gconst14);
IkReal x120=(gconst11*gconst14);
IkReal x121=(gconst12*gconst3);
IkReal x122=(gconst7*gconst8);
IkReal x123=(gconst15*gconst3);
IkReal x124=(gconst1*gconst6);
IkReal x125=(r20*r21);
IkReal x126=(gconst11*gconst12);
IkReal x127=((3.2768)*pz);
IkReal x128=((1.0)*gconst4);
IkReal x129=(gconst1*gconst10);
IkReal x130=(gconst12*gconst7);
IkReal x131=((3.2768)*gconst4);
IkReal x132=(gconst3*gconst4);
IkReal x133=((1.6384)*gconst12);
IkReal x134=(gconst15*gconst4);
IkReal x135=(gconst14*gconst3);
IkReal x136=(gconst5*gconst8);
IkReal x137=(gconst14*gconst9);
IkReal x138=(gconst6*gconst9);
IkReal x139=(gconst4*gconst7);
IkReal x140=(gconst11*gconst4);
IkReal x141=(gconst2*gconst9);
IkReal x142=(gconst10*gconst9);
IkReal x143=(gconst3*gconst6);
IkReal x144=((1.6384)*gconst4);
IkReal x145=(gconst1*gconst2);
IkReal x146=(gconst12*gconst15);
IkReal x147=((1.0)*gconst2);
IkReal x148=(gconst13*gconst8);
IkReal x149=(gconst0*gconst3);
IkReal x150=(gconst0*gconst13);
IkReal x151=((1.6384)*x112);
IkReal x152=(pz*x110);
IkReal x153=((1.0)*gconst10*gconst13);
IkReal x154=((0.8192)*x110);
IkReal x155=(gconst11*gconst15*gconst8);
IkReal x156=((1.0)*gconst10*gconst5);
IkReal x157=(gconst4*x112);
IkReal x158=((0.4096)*x110);
IkReal x159=(x112*x127);
IkReal x160=(gconst5*gconst6*x147);
IkReal x161=((6.5536)*gconst1*x111);
IkReal x162=((6.5536)*gconst9*x111);
IkReal x163=((1.6384)*x120*x125);
IkReal x164=(x120*x158);
IkReal x165=((1.6384)*x113*x125);
IkReal x166=(gconst14*x117*x125);
IkReal x167=(x135*x158);
IkReal x168=(x113*x158);
IkReal x169=(gconst6*x117*x125);
IkReal x170=(x143*x158);
IkReal x171=(gconst9*x110*x111);
IkReal x172=(gconst12*x162);
IkReal x173=(gconst1*x110*x111);
IkReal x174=(x125*x126*x127);
IkReal x175=(x125*x127*x137);
IkReal x176=((0.8192)*x126*x152);
IkReal x177=((0.8192)*x137*x152);
IkReal x178=(x121*x125*x127);
IkReal x179=(x118*x125*x127);
IkReal x180=(x125*x127*x140);
IkReal x181=(x125*x127*x138);
IkReal x182=((0.8192)*x121*x152);
IkReal x183=((0.8192)*x118*x152);
IkReal x184=((0.8192)*x138*x152);
IkReal x185=((0.8192)*x140*x152);
IkReal x186=(x125*x127*x132);
IkReal x187=(x124*x125*x127);
IkReal x188=((0.8192)*x132*x152);
IkReal x189=((0.8192)*x124*x152);
IkReal x190=((3.2768)*gconst12*x110*x111);
IkReal x191=(x125*x172);
IkReal x192=(x133*x171);
IkReal x193=(gconst4*x125*x162);
IkReal x194=(gconst12*x125*x161);
IkReal x195=(x133*x173);
IkReal x196=(x144*x171);
IkReal x197=(gconst4*x125*x161);
IkReal x198=(x144*x173);
IkReal x199=(x169+x197);
IkReal x200=(x175+x174);
IkReal x201=(x188+x189);
IkReal x202=(x164+x192);
IkReal x203=(x170+x198);
IkReal x204=(x186+x187);
IkReal x205=(x163+x191);
IkReal x206=(x177+x176);
IkReal x207=(x184+x185+x182+x183);
IkReal x208=(x166+x165+x193+x194);
IkReal x209=(x168+x167+x196+x195);
IkReal x210=(x179+x178+x180+x181);
op[0]=(((x142*x146))+(((-1.0)*x202))+(((-1.0)*x116*x155))+x206+((gconst11*gconst8*x119))+(((-1.0)*x119*x142)));
op[1]=((((-1.0)*x205))+x200);
op[2]=(((x113*x148))+((gconst3*gconst8*x119))+(((-1.0)*x137*x156))+(((-1.0)*x138*x153))+((x120*x154))+((x126*x159))+((x137*x159))+(((-1.6384)*x126*x152))+(((-1.0)*x120*x151))+(((-1.0)*gconst8*x116*x123))+(((-1.0)*x128*x155))+(((-1.0)*gconst11*x116*x122))+(((-1.0)*x209))+(((-1.0)*gconst15*x115*x116))+((x129*x146))+x207+(((3.2768)*gconst12*x171))+((x141*x146))+((x120*x136))+((x134*x142))+(((-1.0)*x118*x153))+(((-1.0)*x119*x141))+((x115*x119))+((x130*x142))+(((-1.0)*x112*x172))+(((-1.6384)*x137*x152)));
op[3]=((((-1.0)*x200))+(((-1.0)*x208))+x210+x205);
op[4]=((((-1.0)*x157*x162))+((x113*x150))+((x113*x154))+(((-1.0)*gconst13*x118*x147))+((x140*x159))+(((-1.0)*gconst3*x116*x122))+(((-1.0)*gconst0*x116*x123))+(((-1.0)*gconst14*x112*x117))+(((-1.0)*x138*x156))+((x129*x130))+((x129*x134))+(((-1.0)*gconst8*x123*x128))+(((-1.0)*gconst11*x122*x128))+((x135*x136))+(((-1.6384)*x118*x152))+(((-1.0)*gconst15*x115*x128))+(((-1.0)*x124*x153))+((x114*x120))+(((-1.0)*gconst5*x137*x147))+((x135*x154))+((x145*x146))+((x119*x149))+((x138*x159))+(((-1.0)*x202))+(((-1.0)*x203))+((x121*x159))+(((-1.0)*gconst13*x138*x147))+((x118*x159))+((x113*x136))+x206+x201+(((3.2768)*gconst12*x173))+(((-1.6384)*x140*x152))+((x134*x141))+(((-1.0)*gconst7*x115*x116))+(((-1.0)*gconst12*x117*x152))+((x131*x171))+(((-1.0)*x118*x156))+(((-1.6384)*x138*x152))+((x130*x141))+((x139*x142))+((x143*x148))+(((-1.0)*x113*x151))+(((-1.0)*gconst12*x112*x161)));
op[5]=((((-1.0)*x199))+x204+x208+(((-1.0)*x210)));
op[6]=((((-1.0)*x157*x161))+((x129*x139))+(((-1.0)*gconst5*x118*x147))+((x136*x143))+(((-1.0)*x124*x156))+((x113*x114))+(((-1.0)*gconst4*x117*x152))+(((-1.0)*gconst7*x116*x149))+((x114*x135))+(((-1.0)*x209))+x207+(((-1.0)*gconst7*x115*x128))+(((-1.6384)*x124*x152))+(((-1.0)*gconst5*x138*x147))+((x134*x145))+(((-1.0)*gconst0*x123*x128))+((x131*x173))+((x132*x159))+((x143*x150))+((x143*x154))+(((-1.0)*gconst3*x122*x128))+((x130*x145))+(((-1.0)*gconst13*x124*x147))+(((-1.0)*gconst6*x112*x117))+((x139*x141))+((x124*x159)));
op[7]=(x199+(((-1.0)*x204)));
op[8]=((((-1.0)*x203))+x201+(((-1.0)*gconst5*x124*x147))+(((-1.0)*gconst7*x128*x149))+((x114*x143))+((x139*x145)));
polyroots8(op,zeror,numroots);
IkReal j6array[8], cj6array[8], sj6array[8], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[8]={true,true,true,true,true,true,true,true};
_nj6 = 8;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j5eval[2];
IkReal x211=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x211);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x211);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x211);
rxp2_2=0;
IkReal x212=(r21*sj6);
IkReal x213=(cj6*r20);
j5eval[0]=((r22*r22)+(((-2.0)*x212*x213))+(x213*x213)+(x212*x212));
j5eval[1]=((IKabs(r22))+(((3.125)*(IKabs(((((-0.32)*x212))+(((0.32)*x213))))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x214=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x214);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x214);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x214);
rxp2_2=0;
IkReal x215=pz*pz;
IkReal x216=(cj6*r20);
IkReal x217=(r21*sj6);
j5eval[0]=(((x215*(r22*r22)))+(((-2.0)*x215*x216*x217))+((x215*(x216*x216)))+((x215*(x217*x217))));
j5eval[1]=((IKabs((pz*r22)))+(IKabs((((pz*x216))+(((-1.0)*pz*x217))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x218=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x218);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x218);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x218);
rxp2_2=0;
IkReal x219=sj1*sj1;
IkReal x220=cj6*cj6;
IkReal x221=sj6*sj6;
IkReal x222=((1.0)*sj1);
IkReal x223=(x219*x221);
IkReal x224=(x219*x220);
IkReal x225=((2.0)*cj6*sj6*x219);
j0eval[0]=((IKabs(((((-1.0)*cj6*r11*x222))+(((-1.0)*r10*sj6*x222)))))+(IKabs(((((-1.0)*cj6*r01*x222))+(((-1.0)*r00*sj6*x222))))));
j0eval[1]=(((r10*r11*x225))+((x224*(r11*r11)))+((r00*r01*x225))+((x223*(r00*r00)))+((x224*(r01*r01)))+((x223*(r10*r10))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j5]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x226=((0.33)*sj1);
IkReal x227=(cj6*r21);
IkReal x228=((0.33)*cj1);
IkReal x229=((1.0)*pz);
IkReal x230=(r20*sj6);
IkReal x231=((((-1.0)*cj6*r01*x226))+(((-1.0)*r00*sj6*x226)));
IkReal x232=((((-1.0)*cj6*r11*x226))+(((-1.0)*r10*sj6*x226)));
CheckValue<IkReal> x235 = IKatan2WithCheck(IkReal(x231),IkReal(x232),IKFAST_ATAN2_MAGTHRESH);
if(!x235.valid){
continue;
}
IkReal x233=((1.0)*(x235.value));
if((((x232*x232)+(x231*x231))) < -0.00001)
continue;
CheckValue<IkReal> x236=IKPowWithIntegerCheck(IKabs(IKsqrt(((x232*x232)+(x231*x231)))),-1);
if(!x236.valid){
continue;
}
if( (((-1.0)*(x236.value)*(((((-1.0)*x227*x228))+(((-1.0)*x227*x229))+(((-1.0)*x229*x230))+(((-1.0)*x228*x230)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x236.value)*(((((-1.0)*x227*x228))+(((-1.0)*x227*x229))+(((-1.0)*x229*x230))+(((-1.0)*x228*x230)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x234=((-1.0)*(IKasin(((-1.0)*(x236.value)*(((((-1.0)*x227*x228))+(((-1.0)*x227*x229))+(((-1.0)*x229*x230))+(((-1.0)*x228*x230))))))));
j0array[0]=((((-1.0)*x233))+(((-1.0)*x234)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x233))+(((1.0)*x234)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j5eval[1];
IkReal x237=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x237);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x237);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x237);
rxp2_2=0;
j5eval[0]=((((-1.0)*r01*sj6))+((cj6*r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x238=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x238);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x238);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x238);
rxp2_2=0;
j5eval[0]=((((-1.0)*r11*sj6))+((cj6*r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x239=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x239);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x239);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x239);
rxp2_2=0;
j5eval[0]=(((cj6*r21))+((r20*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x241 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x241)==0){
continue;
}
IkReal x240=pow(x241,-0.5);
CheckValue<IkReal> x242 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x242.valid){
continue;
}
IkReal gconst32=((-1.0)*(x242.value));
IkReal gconst33=((-1.0)*r21*x240);
IkReal gconst34=(r20*x240);
CheckValue<IkReal> x243 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x243.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x243.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x244=(cj1*r22);
IkReal x245=(pz*r22);
IkReal x246=(r02*sj1);
IkReal x247=(r12*sj0);
IkReal x248=((33.0)*cj0*sj1);
CheckValue<IkReal> x249=IKPowWithIntegerCheck(((((32.0)*gconst34*r00))+(((-32.0)*gconst33*r01))),-1);
if(!x249.valid){
continue;
}
if( IKabs(((x249.value)*(((((-33.0)*cj0*r02*x246))+x248+(((-100.0)*r02*x245))+(((-33.0)*r02*x244))+(((-33.0)*x246*x247)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.03125)*cj0*x246))+(((-1.03125)*x244))+(((-1.03125)*sj1*x247))+(((-3.125)*x245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x249.value)*(((((-33.0)*cj0*r02*x246))+x248+(((-100.0)*r02*x245))+(((-33.0)*r02*x244))+(((-33.0)*x246*x247))))))+IKsqr(((((-1.03125)*cj0*x246))+(((-1.03125)*x244))+(((-1.03125)*sj1*x247))+(((-3.125)*x245))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x249.value)*(((((-33.0)*cj0*r02*x246))+x248+(((-100.0)*r02*x245))+(((-33.0)*r02*x244))+(((-33.0)*x246*x247))))), ((((-1.03125)*cj0*x246))+(((-1.03125)*x244))+(((-1.03125)*sj1*x247))+(((-3.125)*x245))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x250=IKsin(j5);
IkReal x251=IKcos(j5);
IkReal x252=(gconst34*r20);
IkReal x253=(gconst33*r21);
IkReal x254=((0.33)*cj1);
IkReal x255=((0.64)*pz);
IkReal x256=((1.0)*pz);
IkReal x257=(gconst34*r10);
IkReal x258=(gconst33*r01);
IkReal x259=(gconst34*r00);
IkReal x260=(gconst33*r11);
IkReal x261=((0.32)*x250);
IkReal x262=((0.33)*sj0*sj1);
IkReal x263=(r22*x251);
IkReal x264=((0.33)*cj0*sj1);
IkReal x265=((0.32)*x251);
evalcond[0]=((((-1.0)*r22*x254))+(((-1.0)*r22*x256))+(((-1.0)*r12*x262))+(((-1.0)*r02*x264))+(((-1.0)*x265)));
evalcond[1]=(((x259*x261))+(((-1.0)*x258*x261))+(((-1.0)*r02*x265))+(((-1.0)*x264)));
evalcond[2]=((((-1.0)*r12*x265))+((x257*x261))+(((-1.0)*x262))+(((-1.0)*x260*x261)));
evalcond[3]=(((x252*x261))+(((-1.0)*x253*x261))+(((-0.32)*x263))+(((-1.0)*x256))+(((-1.0)*x254)));
evalcond[4]=((0.0065)+(((-1.0)*x255*x263))+((x250*x252*x255))+(((-1.0)*pz*x256))+(((-1.0)*x250*x253*x255)));
evalcond[5]=((((-1.0)*x252*x256))+(((-1.0)*x252*x254))+((x258*x264))+((x260*x262))+((pz*x253))+(((-1.0)*x259*x264))+x261+((x253*x254))+(((-1.0)*x257*x262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1166 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1166)==0){
continue;
}
IkReal x1165=pow(x1166,-0.5);
CheckValue<IkReal> x1167 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1167.valid){
continue;
}
IkReal gconst35=((3.14159265358979)+(((-1.0)*(x1167.value))));
IkReal gconst36=((1.0)*r21*x1165);
IkReal gconst37=((-1.0)*r20*x1165);
CheckValue<IkReal> x1168 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1168.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1168.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1169=(cj1*r22);
IkReal x1170=(pz*r22);
IkReal x1171=(r02*sj1);
IkReal x1172=(r12*sj0);
IkReal x1173=((33.0)*cj0*sj1);
CheckValue<IkReal> x1174=IKPowWithIntegerCheck(((((-32.0)*gconst36*r01))+(((32.0)*gconst37*r00))),-1);
if(!x1174.valid){
continue;
}
if( IKabs(((x1174.value)*((x1173+(((-33.0)*cj0*r02*x1171))+(((-100.0)*r02*x1170))+(((-33.0)*x1171*x1172))+(((-33.0)*r02*x1169)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.03125)*cj0*x1171))+(((-1.03125)*x1169))+(((-3.125)*x1170))+(((-1.03125)*sj1*x1172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1174.value)*((x1173+(((-33.0)*cj0*r02*x1171))+(((-100.0)*r02*x1170))+(((-33.0)*x1171*x1172))+(((-33.0)*r02*x1169))))))+IKsqr(((((-1.03125)*cj0*x1171))+(((-1.03125)*x1169))+(((-3.125)*x1170))+(((-1.03125)*sj1*x1172))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1174.value)*((x1173+(((-33.0)*cj0*r02*x1171))+(((-100.0)*r02*x1170))+(((-33.0)*x1171*x1172))+(((-33.0)*r02*x1169))))), ((((-1.03125)*cj0*x1171))+(((-1.03125)*x1169))+(((-3.125)*x1170))+(((-1.03125)*sj1*x1172))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1175=IKcos(j5);
IkReal x1176=IKsin(j5);
IkReal x1177=(gconst36*r21);
IkReal x1178=(gconst37*r10);
IkReal x1179=((0.33)*cj1);
IkReal x1180=(gconst36*r01);
IkReal x1181=((0.64)*pz);
IkReal x1182=((1.0)*pz);
IkReal x1183=(gconst37*r20);
IkReal x1184=(gconst37*r00);
IkReal x1185=(gconst36*r11);
IkReal x1186=((0.32)*x1176);
IkReal x1187=((0.33)*sj0*sj1);
IkReal x1188=((0.33)*cj0*sj1);
IkReal x1189=(r22*x1175);
IkReal x1190=((0.32)*x1175);
evalcond[0]=((((-1.0)*x1190))+(((-1.0)*r22*x1179))+(((-1.0)*r22*x1182))+(((-1.0)*r12*x1187))+(((-1.0)*r02*x1188)));
evalcond[1]=(((x1184*x1186))+(((-1.0)*x1188))+(((-1.0)*x1180*x1186))+(((-1.0)*r02*x1190)));
evalcond[2]=(((x1178*x1186))+(((-1.0)*x1187))+(((-1.0)*x1185*x1186))+(((-1.0)*r12*x1190)));
evalcond[3]=(((x1183*x1186))+(((-0.32)*x1189))+(((-1.0)*x1182))+(((-1.0)*x1179))+(((-1.0)*x1177*x1186)));
evalcond[4]=((0.0065)+(((-1.0)*x1181*x1189))+((x1176*x1181*x1183))+(((-1.0)*pz*x1182))+(((-1.0)*x1176*x1177*x1181)));
evalcond[5]=(x1186+((x1180*x1188))+((x1185*x1187))+(((-1.0)*x1179*x1183))+(((-1.0)*x1178*x1187))+((x1177*x1179))+(((-1.0)*x1184*x1188))+((pz*x1177))+(((-1.0)*x1182*x1183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1193 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1193)==0){
continue;
}
IkReal x1191=pow(x1193,-0.5);
IkReal x1192=((-1.0)*x1191);
CheckValue<IkReal> x1194 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1194.valid){
continue;
}
IkReal gconst38=((-1.0)*(x1194.value));
IkReal gconst39=(r10*x1192);
IkReal gconst40=(r11*x1192);
CheckValue<IkReal> x1195 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1195.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j6+(x1195.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1196=(cj1*r22);
IkReal x1197=(pz*r22);
IkReal x1198=(r02*sj1);
IkReal x1199=(r12*sj0);
IkReal x1200=((33.0)*cj0*sj1);
CheckValue<IkReal> x1201=IKPowWithIntegerCheck(((((32.0)*gconst40*r00))+(((-32.0)*gconst39*r01))),-1);
if(!x1201.valid){
continue;
}
if( IKabs(((x1201.value)*((x1200+(((-100.0)*r02*x1197))+(((-33.0)*cj0*r02*x1198))+(((-33.0)*x1198*x1199))+(((-33.0)*r02*x1196)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.03125)*sj1*x1199))+(((-3.125)*x1197))+(((-1.03125)*x1196))+(((-1.03125)*cj0*x1198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1201.value)*((x1200+(((-100.0)*r02*x1197))+(((-33.0)*cj0*r02*x1198))+(((-33.0)*x1198*x1199))+(((-33.0)*r02*x1196))))))+IKsqr(((((-1.03125)*sj1*x1199))+(((-3.125)*x1197))+(((-1.03125)*x1196))+(((-1.03125)*cj0*x1198))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1201.value)*((x1200+(((-100.0)*r02*x1197))+(((-33.0)*cj0*r02*x1198))+(((-33.0)*x1198*x1199))+(((-33.0)*r02*x1196))))), ((((-1.03125)*sj1*x1199))+(((-3.125)*x1197))+(((-1.03125)*x1196))+(((-1.03125)*cj0*x1198))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1202=IKsin(j5);
IkReal x1203=IKcos(j5);
IkReal x1204=(gconst40*r10);
IkReal x1205=((0.33)*cj1);
IkReal x1206=(gconst40*r20);
IkReal x1207=((1.0)*pz);
IkReal x1208=(gconst40*r00);
IkReal x1209=((0.33)*sj0*sj1);
IkReal x1210=(gconst39*pz*r21);
IkReal x1211=((0.64)*x1202);
IkReal x1212=((0.32)*x1202);
IkReal x1213=(r22*x1203);
IkReal x1214=((0.33)*cj0*sj1);
IkReal x1215=((0.32)*x1203);
IkReal x1216=(gconst39*x1212);
evalcond[0]=((((-1.0)*r02*x1214))+(((-1.0)*r22*x1205))+(((-1.0)*r22*x1207))+(((-1.0)*x1215))+(((-1.0)*r12*x1209)));
evalcond[1]=((((-1.0)*r02*x1215))+(((-1.0)*r01*x1216))+(((-1.0)*x1214))+((x1208*x1212)));
evalcond[2]=(((x1204*x1212))+(((-1.0)*r12*x1215))+(((-1.0)*x1209))+(((-1.0)*r11*x1216)));
evalcond[3]=((((-0.32)*x1213))+((x1206*x1212))+(((-1.0)*r21*x1216))+(((-1.0)*x1207))+(((-1.0)*x1205)));
evalcond[4]=((0.0065)+(((-1.0)*pz*x1207))+((pz*x1206*x1211))+(((-0.64)*pz*x1213))+(((-1.0)*x1210*x1211)));
evalcond[5]=((((-1.0)*x1204*x1209))+((gconst39*r21*x1205))+x1212+x1210+(((-1.0)*x1208*x1214))+(((-1.0)*x1205*x1206))+(((-1.0)*x1206*x1207))+((gconst39*r01*x1214))+((gconst39*r11*x1209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1219 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1219)==0){
continue;
}
IkReal x1217=pow(x1219,-0.5);
IkReal x1218=((1.0)*x1217);
CheckValue<IkReal> x1220 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1220.valid){
continue;
}
IkReal gconst41=((3.14159265358979)+(((-1.0)*(x1220.value))));
IkReal gconst42=(r10*x1218);
IkReal gconst43=(r11*x1218);
CheckValue<IkReal> x1221 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1221.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6+(x1221.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1222=(cj1*r22);
IkReal x1223=(pz*r22);
IkReal x1224=(r02*sj1);
IkReal x1225=(r12*sj0);
IkReal x1226=((33.0)*cj0*sj1);
CheckValue<IkReal> x1227=IKPowWithIntegerCheck(((((-32.0)*gconst42*r01))+(((32.0)*gconst43*r00))),-1);
if(!x1227.valid){
continue;
}
if( IKabs(((x1227.value)*((x1226+(((-100.0)*r02*x1223))+(((-33.0)*cj0*r02*x1224))+(((-33.0)*x1224*x1225))+(((-33.0)*r02*x1222)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.03125)*cj0*x1224))+(((-3.125)*x1223))+(((-1.03125)*sj1*x1225))+(((-1.03125)*x1222)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1227.value)*((x1226+(((-100.0)*r02*x1223))+(((-33.0)*cj0*r02*x1224))+(((-33.0)*x1224*x1225))+(((-33.0)*r02*x1222))))))+IKsqr(((((-1.03125)*cj0*x1224))+(((-3.125)*x1223))+(((-1.03125)*sj1*x1225))+(((-1.03125)*x1222))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1227.value)*((x1226+(((-100.0)*r02*x1223))+(((-33.0)*cj0*r02*x1224))+(((-33.0)*x1224*x1225))+(((-33.0)*r02*x1222))))), ((((-1.03125)*cj0*x1224))+(((-3.125)*x1223))+(((-1.03125)*sj1*x1225))+(((-1.03125)*x1222))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1228=IKsin(j5);
IkReal x1229=IKcos(j5);
IkReal x1230=((0.33)*sj1);
IkReal x1231=(gconst43*r00);
IkReal x1232=((0.33)*cj1);
IkReal x1233=((0.64)*pz);
IkReal x1234=((1.0)*pz);
IkReal x1235=(gconst42*r21);
IkReal x1236=(gconst43*r20);
IkReal x1237=(gconst43*x1228);
IkReal x1238=(r22*x1229);
IkReal x1239=((0.32)*x1228);
IkReal x1240=((0.32)*x1229);
IkReal x1241=(gconst42*x1239);
evalcond[0]=((((-1.0)*x1240))+(((-1.0)*r12*sj0*x1230))+(((-1.0)*cj0*r02*x1230))+(((-1.0)*r22*x1234))+(((-1.0)*r22*x1232)));
evalcond[1]=((((-1.0)*r02*x1240))+(((-1.0)*cj0*x1230))+((x1231*x1239))+(((-1.0)*r01*x1241)));
evalcond[2]=((((0.32)*r10*x1237))+(((-1.0)*r11*x1241))+(((-1.0)*r12*x1240))+(((-1.0)*sj0*x1230)));
evalcond[3]=((((-1.0)*x1234))+(((-1.0)*x1232))+(((-0.32)*x1238))+(((-1.0)*x1235*x1239))+((x1236*x1239)));
evalcond[4]=((0.0065)+((x1228*x1233*x1236))+(((-1.0)*pz*x1234))+(((-1.0)*x1228*x1233*x1235))+(((-1.0)*x1233*x1238)));
evalcond[5]=(x1239+((pz*x1235))+((gconst42*r11*sj0*x1230))+(((-1.0)*cj0*x1230*x1231))+(((-1.0)*x1234*x1236))+((x1232*x1235))+((cj0*gconst42*r01*x1230))+(((-1.0)*x1232*x1236))+(((-1.0)*gconst43*r10*sj0*x1230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1244 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1244)==0){
continue;
}
IkReal x1242=pow(x1244,-0.5);
IkReal x1243=((-1.0)*x1242);
CheckValue<IkReal> x1245 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1245.valid){
continue;
}
IkReal gconst44=((-1.0)*(x1245.value));
IkReal gconst45=(r00*x1243);
IkReal gconst46=(r01*x1243);
CheckValue<IkReal> x1246 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1246.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1246.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1247=(cj1*r22);
IkReal x1248=((33.0)*r12);
IkReal x1249=(pz*r22);
IkReal x1250=(cj0*r02*sj1);
IkReal x1251=((33.0)*sj0*sj1);
CheckValue<IkReal> x1252=IKPowWithIntegerCheck(((((-32.0)*gconst45*r11))+(((32.0)*gconst46*r10))),-1);
if(!x1252.valid){
continue;
}
if( IKabs(((x1252.value)*((x1251+(((-100.0)*r12*x1249))+(((-1.0)*x1248*x1250))+(((-1.0)*r12*sj0*sj1*x1248))+(((-1.0)*x1247*x1248)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.03125)*x1250))+(((-1.03125)*r12*sj0*sj1))+(((-3.125)*x1249))+(((-1.03125)*x1247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1252.value)*((x1251+(((-100.0)*r12*x1249))+(((-1.0)*x1248*x1250))+(((-1.0)*r12*sj0*sj1*x1248))+(((-1.0)*x1247*x1248))))))+IKsqr(((((-1.03125)*x1250))+(((-1.03125)*r12*sj0*sj1))+(((-3.125)*x1249))+(((-1.03125)*x1247))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1252.value)*((x1251+(((-100.0)*r12*x1249))+(((-1.0)*x1248*x1250))+(((-1.0)*r12*sj0*sj1*x1248))+(((-1.0)*x1247*x1248))))), ((((-1.03125)*x1250))+(((-1.03125)*r12*sj0*sj1))+(((-3.125)*x1249))+(((-1.03125)*x1247))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1253=IKsin(j5);
IkReal x1254=IKcos(j5);
IkReal x1255=((0.33)*sj1);
IkReal x1256=(gconst46*r00);
IkReal x1257=((0.33)*cj1);
IkReal x1258=((0.64)*pz);
IkReal x1259=((1.0)*pz);
IkReal x1260=(gconst46*r20);
IkReal x1261=(gconst45*pz*r21);
IkReal x1262=(r22*x1254);
IkReal x1263=((0.32)*x1253);
IkReal x1264=((0.32)*x1254);
IkReal x1265=(gconst45*x1263);
IkReal x1266=(gconst46*x1263);
evalcond[0]=((((-1.0)*r22*x1257))+(((-1.0)*r22*x1259))+(((-1.0)*cj0*r02*x1255))+(((-1.0)*x1264))+(((-1.0)*r12*sj0*x1255)));
evalcond[1]=((((-1.0)*cj0*x1255))+((x1256*x1263))+(((-1.0)*r01*x1265))+(((-1.0)*r02*x1264)));
evalcond[2]=((((-1.0)*r12*x1264))+(((-1.0)*r11*x1265))+((r10*x1266))+(((-1.0)*sj0*x1255)));
evalcond[3]=((((-1.0)*x1257))+(((-1.0)*x1259))+(((-1.0)*r21*x1265))+((x1260*x1263))+(((-0.32)*x1262)));
evalcond[4]=((0.0065)+(((-1.0)*x1258*x1262))+((x1253*x1258*x1260))+(((-1.0)*gconst45*r21*x1253*x1258))+(((-1.0)*pz*x1259)));
evalcond[5]=(x1263+x1261+((gconst45*r21*x1257))+(((-1.0)*cj0*x1255*x1256))+((cj0*gconst45*r01*x1255))+(((-1.0)*x1257*x1260))+(((-1.0)*gconst46*r10*sj0*x1255))+((gconst45*r11*sj0*x1255))+(((-1.0)*x1259*x1260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1269 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1269)==0){
continue;
}
IkReal x1267=pow(x1269,-0.5);
IkReal x1268=((1.0)*x1267);
CheckValue<IkReal> x1270 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1270.valid){
continue;
}
IkReal gconst47=((3.14159265358979)+(((-1.0)*(x1270.value))));
IkReal gconst48=(r00*x1268);
IkReal gconst49=(r01*x1268);
CheckValue<IkReal> x1271 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1271.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1271.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1272=(cj1*r22);
IkReal x1273=((33.0)*r12);
IkReal x1274=(pz*r22);
IkReal x1275=(cj0*r02*sj1);
IkReal x1276=((33.0)*sj0*sj1);
CheckValue<IkReal> x1277=IKPowWithIntegerCheck(((((32.0)*gconst49*r10))+(((-32.0)*gconst48*r11))),-1);
if(!x1277.valid){
continue;
}
if( IKabs(((x1277.value)*((x1276+(((-1.0)*x1272*x1273))+(((-1.0)*x1273*x1275))+(((-1.0)*r12*sj0*sj1*x1273))+(((-100.0)*r12*x1274)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.125)*x1274))+(((-1.03125)*x1272))+(((-1.03125)*x1275))+(((-1.03125)*r12*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1277.value)*((x1276+(((-1.0)*x1272*x1273))+(((-1.0)*x1273*x1275))+(((-1.0)*r12*sj0*sj1*x1273))+(((-100.0)*r12*x1274))))))+IKsqr(((((-3.125)*x1274))+(((-1.03125)*x1272))+(((-1.03125)*x1275))+(((-1.03125)*r12*sj0*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1277.value)*((x1276+(((-1.0)*x1272*x1273))+(((-1.0)*x1273*x1275))+(((-1.0)*r12*sj0*sj1*x1273))+(((-100.0)*r12*x1274))))), ((((-3.125)*x1274))+(((-1.03125)*x1272))+(((-1.03125)*x1275))+(((-1.03125)*r12*sj0*sj1))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1278=IKsin(j5);
IkReal x1279=IKcos(j5);
IkReal x1280=((0.33)*cj1);
IkReal x1281=((1.0)*pz);
IkReal x1282=(gconst49*r20);
IkReal x1283=(gconst48*r01);
IkReal x1284=(gconst49*r00);
IkReal x1285=(gconst48*r21);
IkReal x1286=(gconst48*r11);
IkReal x1287=(gconst49*r10);
IkReal x1288=(pz*x1285);
IkReal x1289=((0.33)*sj0*sj1);
IkReal x1290=((0.64)*x1278);
IkReal x1291=((0.33)*cj0*sj1);
IkReal x1292=(r22*x1279);
IkReal x1293=((0.32)*x1278);
IkReal x1294=((0.32)*x1279);
evalcond[0]=((((-1.0)*x1294))+(((-1.0)*r22*x1280))+(((-1.0)*r22*x1281))+(((-1.0)*r02*x1291))+(((-1.0)*r12*x1289)));
evalcond[1]=((((-1.0)*x1291))+(((-1.0)*x1283*x1293))+(((-1.0)*r02*x1294))+((x1284*x1293)));
evalcond[2]=((((-1.0)*x1286*x1293))+((x1287*x1293))+(((-1.0)*r12*x1294))+(((-1.0)*x1289)));
evalcond[3]=(((x1282*x1293))+(((-0.32)*x1292))+(((-1.0)*x1280))+(((-1.0)*x1281))+(((-1.0)*x1285*x1293)));
evalcond[4]=((0.0065)+(((-1.0)*x1288*x1290))+(((-1.0)*pz*x1281))+((pz*x1282*x1290))+(((-0.64)*pz*x1292)));
evalcond[5]=((((-1.0)*x1284*x1291))+x1288+x1293+((x1286*x1289))+(((-1.0)*x1287*x1289))+((x1280*x1285))+(((-1.0)*x1280*x1282))+((x1283*x1291))+(((-1.0)*x1281*x1282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=(pz*r10);
rxp0_1=0;
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=0;
r00=0;
r01=0;
r12=0;
r22=0;
j5eval[0]=((((-1.0)*r11*sj6))+((cj6*r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=(pz*r10);
rxp0_1=0;
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=0;
r00=0;
r01=0;
r12=0;
r22=0;
j5eval[0]=(((cj6*r20))+(((-1.0)*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=(pz*r10);
rxp0_1=0;
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=0;
r00=0;
r01=0;
r12=0;
r22=0;
j5eval[0]=((((-1.0)*r11*sj6))+((cj6*r10)));
j5eval[1]=r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1295=IKPowWithIntegerCheck(((((-32.0)*r11*sj6))+(((32.0)*cj6*r10))),-1);
if(!x1295.valid){
continue;
}
CheckValue<IkReal> x1296=IKPowWithIntegerCheck(r02,-1);
if(!x1296.valid){
continue;
}
if( IKabs(((33.0)*sj0*sj1*(x1295.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.03125)*cj0*sj1*(x1296.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((33.0)*sj0*sj1*(x1295.value)))+IKsqr(((-1.03125)*cj0*sj1*(x1296.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((33.0)*sj0*sj1*(x1295.value)), ((-1.03125)*cj0*sj1*(x1296.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1297=IKcos(j5);
IkReal x1298=IKsin(j5);
IkReal x1299=((0.64)*pz);
IkReal x1300=((1.0)*pz);
IkReal x1301=(cj6*r20);
IkReal x1302=((0.33)*sj1);
IkReal x1303=(cj6*r10);
IkReal x1304=(r21*sj6);
IkReal x1305=((0.33)*cj1);
IkReal x1306=(sj6*x1298);
IkReal x1307=((0.32)*x1298);
IkReal x1308=((0.32)*x1297);
evalcond[0]=((((-1.0)*cj0*r02*x1302))+(((-1.0)*x1308)));
evalcond[1]=((((-1.0)*cj0*x1302))+(((-1.0)*r02*x1308)));
evalcond[2]=((((-1.0)*sj0*x1302))+((x1303*x1307))+(((-0.32)*r11*x1306)));
evalcond[3]=((((-1.0)*x1300))+(((-1.0)*x1305))+((x1301*x1307))+(((-1.0)*x1304*x1307)));
evalcond[4]=((0.0065)+((x1298*x1299*x1301))+(((-1.0)*x1298*x1299*x1304))+(((-1.0)*pz*x1300)));
evalcond[5]=(x1307+((r11*sj0*sj6*x1302))+((pz*x1304))+(((-1.0)*sj0*x1302*x1303))+(((-1.0)*x1300*x1301))+((x1304*x1305))+(((-1.0)*x1301*x1305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1309=IKPowWithIntegerCheck(((((-0.32)*r21*sj6))+(((0.32)*cj6*r20))),-1);
if(!x1309.valid){
continue;
}
if( IKabs(((x1309.value)*((pz+(((0.33)*cj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.03125)*cj0*r02*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1309.value)*((pz+(((0.33)*cj1))))))+IKsqr(((-1.03125)*cj0*r02*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1309.value)*((pz+(((0.33)*cj1))))), ((-1.03125)*cj0*r02*sj1));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1310=IKcos(j5);
IkReal x1311=IKsin(j5);
IkReal x1312=((0.64)*pz);
IkReal x1313=((1.0)*pz);
IkReal x1314=(cj6*r20);
IkReal x1315=((0.33)*sj1);
IkReal x1316=(cj6*r10);
IkReal x1317=(r21*sj6);
IkReal x1318=((0.33)*cj1);
IkReal x1319=(sj6*x1311);
IkReal x1320=((0.32)*x1311);
IkReal x1321=((0.32)*x1310);
evalcond[0]=((((-1.0)*x1321))+(((-1.0)*cj0*r02*x1315)));
evalcond[1]=((((-1.0)*r02*x1321))+(((-1.0)*cj0*x1315)));
evalcond[2]=(((x1316*x1320))+(((-0.32)*r11*x1319))+(((-1.0)*sj0*x1315)));
evalcond[3]=(((x1314*x1320))+(((-1.0)*x1313))+(((-1.0)*x1318))+(((-1.0)*x1317*x1320)));
evalcond[4]=((0.0065)+((x1311*x1312*x1314))+(((-1.0)*pz*x1313))+(((-1.0)*x1311*x1312*x1317)));
evalcond[5]=(x1320+((x1317*x1318))+((pz*x1317))+(((-1.0)*x1313*x1314))+((r11*sj0*sj6*x1315))+(((-1.0)*x1314*x1318))+(((-1.0)*sj0*x1315*x1316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1322=IKPowWithIntegerCheck(((((-32.0)*r11*sj6))+(((32.0)*cj6*r10))),-1);
if(!x1322.valid){
continue;
}
if( IKabs(((33.0)*sj0*sj1*(x1322.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.03125)*cj0*r02*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((33.0)*sj0*sj1*(x1322.value)))+IKsqr(((-1.03125)*cj0*r02*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((33.0)*sj0*sj1*(x1322.value)), ((-1.03125)*cj0*r02*sj1));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1323=IKcos(j5);
IkReal x1324=IKsin(j5);
IkReal x1325=((0.64)*pz);
IkReal x1326=((1.0)*pz);
IkReal x1327=(cj6*r20);
IkReal x1328=((0.33)*sj1);
IkReal x1329=(cj6*r10);
IkReal x1330=(r21*sj6);
IkReal x1331=((0.33)*cj1);
IkReal x1332=(sj6*x1324);
IkReal x1333=((0.32)*x1324);
IkReal x1334=((0.32)*x1323);
evalcond[0]=((((-1.0)*cj0*r02*x1328))+(((-1.0)*x1334)));
evalcond[1]=((((-1.0)*cj0*x1328))+(((-1.0)*r02*x1334)));
evalcond[2]=(((x1329*x1333))+(((-0.32)*r11*x1332))+(((-1.0)*sj0*x1328)));
evalcond[3]=((((-1.0)*x1326))+(((-1.0)*x1330*x1333))+((x1327*x1333))+(((-1.0)*x1331)));
evalcond[4]=((0.0065)+(((-1.0)*x1324*x1325*x1330))+(((-1.0)*pz*x1326))+((x1324*x1325*x1327)));
evalcond[5]=(x1333+(((-1.0)*x1327*x1331))+(((-1.0)*sj0*x1328*x1329))+((pz*x1330))+((r11*sj0*sj6*x1328))+(((-1.0)*x1326*x1327))+((x1330*x1331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1335=(r20*sj6);
IkReal x1336=((33.0)*sj1);
IkReal x1337=(cj6*r21);
IkReal x1338=((10.56)*sj1*sj6);
IkReal x1339=((10.56)*cj6*sj1);
CheckValue<IkReal> x1340=IKPowWithIntegerCheck(((((32.0)*x1337))+(((32.0)*x1335))),-1);
if(!x1340.valid){
continue;
}
CheckValue<IkReal> x1341=IKPowWithIntegerCheck(((((10.24)*x1335))+(((10.24)*x1337))),-1);
if(!x1341.valid){
continue;
}
if( IKabs(((x1340.value)*((((r02*sj0*x1336))+(((-1.0)*cj0*r12*x1336)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1341.value)*((((r00*sj0*x1339))+((cj0*r11*x1338))+(((-1.0)*r01*sj0*x1338))+(((-1.0)*cj0*r10*x1339)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1340.value)*((((r02*sj0*x1336))+(((-1.0)*cj0*r12*x1336))))))+IKsqr(((x1341.value)*((((r00*sj0*x1339))+((cj0*r11*x1338))+(((-1.0)*r01*sj0*x1338))+(((-1.0)*cj0*r10*x1339))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1340.value)*((((r02*sj0*x1336))+(((-1.0)*cj0*r12*x1336))))), ((x1341.value)*((((r00*sj0*x1339))+((cj0*r11*x1338))+(((-1.0)*r01*sj0*x1338))+(((-1.0)*cj0*r10*x1339))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1342=IKcos(j5);
IkReal x1343=IKsin(j5);
IkReal x1344=((0.33)*cj1);
IkReal x1345=(r21*sj6);
IkReal x1346=(cj6*r00);
IkReal x1347=((1.0)*pz);
IkReal x1348=(cj6*r20);
IkReal x1349=(r11*sj6);
IkReal x1350=((0.64)*pz);
IkReal x1351=(r01*sj6);
IkReal x1352=(cj6*r10);
IkReal x1353=((0.33)*sj0*sj1);
IkReal x1354=((0.32)*x1343);
IkReal x1355=(r22*x1342);
IkReal x1356=((0.33)*cj0*sj1);
IkReal x1357=((0.32)*x1342);
evalcond[0]=((((-1.0)*x1357))+(((-1.0)*r12*x1353))+(((-1.0)*r02*x1356))+(((-1.0)*r22*x1344))+(((-1.0)*r22*x1347)));
evalcond[1]=((((-1.0)*x1356))+(((-1.0)*r02*x1357))+((x1346*x1354))+(((-1.0)*x1351*x1354)));
evalcond[2]=((((-1.0)*x1353))+(((-1.0)*r12*x1357))+(((-1.0)*x1349*x1354))+((x1352*x1354)));
evalcond[3]=((((-1.0)*x1345*x1354))+(((-1.0)*x1344))+(((-1.0)*x1347))+(((-0.32)*x1355))+((x1348*x1354)));
evalcond[4]=((0.0065)+(((-1.0)*pz*x1347))+(((-1.0)*x1350*x1355))+(((-1.0)*x1343*x1345*x1350))+((x1343*x1348*x1350)));
evalcond[5]=(x1354+(((-1.0)*x1352*x1353))+(((-1.0)*x1347*x1348))+((x1344*x1345))+(((-1.0)*x1346*x1356))+((x1349*x1353))+((x1351*x1356))+(((-1.0)*x1344*x1348))+((pz*x1345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1358=(cj1*r22);
IkReal x1359=((33.0)*r12);
IkReal x1360=(pz*r22);
IkReal x1361=(cj0*r02*sj1);
IkReal x1362=((33.0)*sj0*sj1);
CheckValue<IkReal> x1363=IKPowWithIntegerCheck(((((-32.0)*r11*sj6))+(((32.0)*cj6*r10))),-1);
if(!x1363.valid){
continue;
}
if( IKabs(((x1363.value)*((x1362+(((-1.0)*r12*sj0*sj1*x1359))+(((-1.0)*x1359*x1361))+(((-100.0)*r12*x1360))+(((-1.0)*x1358*x1359)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.03125)*x1358))+(((-3.125)*x1360))+(((-1.03125)*r12*sj0*sj1))+(((-1.03125)*x1361)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1363.value)*((x1362+(((-1.0)*r12*sj0*sj1*x1359))+(((-1.0)*x1359*x1361))+(((-100.0)*r12*x1360))+(((-1.0)*x1358*x1359))))))+IKsqr(((((-1.03125)*x1358))+(((-3.125)*x1360))+(((-1.03125)*r12*sj0*sj1))+(((-1.03125)*x1361))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1363.value)*((x1362+(((-1.0)*r12*sj0*sj1*x1359))+(((-1.0)*x1359*x1361))+(((-100.0)*r12*x1360))+(((-1.0)*x1358*x1359))))), ((((-1.03125)*x1358))+(((-3.125)*x1360))+(((-1.03125)*r12*sj0*sj1))+(((-1.03125)*x1361))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1364=IKcos(j5);
IkReal x1365=IKsin(j5);
IkReal x1366=((0.33)*cj1);
IkReal x1367=(r21*sj6);
IkReal x1368=(cj6*r00);
IkReal x1369=((1.0)*pz);
IkReal x1370=(cj6*r20);
IkReal x1371=(r11*sj6);
IkReal x1372=((0.64)*pz);
IkReal x1373=(r01*sj6);
IkReal x1374=(cj6*r10);
IkReal x1375=((0.33)*sj0*sj1);
IkReal x1376=((0.32)*x1365);
IkReal x1377=(r22*x1364);
IkReal x1378=((0.33)*cj0*sj1);
IkReal x1379=((0.32)*x1364);
evalcond[0]=((((-1.0)*r02*x1378))+(((-1.0)*r22*x1366))+(((-1.0)*r22*x1369))+(((-1.0)*x1379))+(((-1.0)*r12*x1375)));
evalcond[1]=((((-1.0)*r02*x1379))+(((-1.0)*x1378))+((x1368*x1376))+(((-1.0)*x1373*x1376)));
evalcond[2]=((((-1.0)*x1371*x1376))+((x1374*x1376))+(((-1.0)*x1375))+(((-1.0)*r12*x1379)));
evalcond[3]=((((-0.32)*x1377))+((x1370*x1376))+(((-1.0)*x1367*x1376))+(((-1.0)*x1366))+(((-1.0)*x1369)));
evalcond[4]=((0.0065)+(((-1.0)*pz*x1369))+(((-1.0)*x1372*x1377))+(((-1.0)*x1365*x1367*x1372))+((x1365*x1370*x1372)));
evalcond[5]=(x1376+((x1366*x1367))+(((-1.0)*x1374*x1375))+((x1371*x1375))+(((-1.0)*x1366*x1370))+((pz*x1367))+(((-1.0)*x1369*x1370))+(((-1.0)*x1368*x1378))+((x1373*x1378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1380=(cj1*r22);
IkReal x1381=(pz*r22);
IkReal x1382=(r02*sj1);
IkReal x1383=(r12*sj0);
IkReal x1384=((33.0)*cj0*sj1);
CheckValue<IkReal> x1385=IKPowWithIntegerCheck(((((-32.0)*r01*sj6))+(((32.0)*cj6*r00))),-1);
if(!x1385.valid){
continue;
}
if( IKabs(((x1385.value)*((x1384+(((-100.0)*r02*x1381))+(((-33.0)*x1382*x1383))+(((-33.0)*cj0*r02*x1382))+(((-33.0)*r02*x1380)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.125)*x1381))+(((-1.03125)*x1380))+(((-1.03125)*sj1*x1383))+(((-1.03125)*cj0*x1382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1385.value)*((x1384+(((-100.0)*r02*x1381))+(((-33.0)*x1382*x1383))+(((-33.0)*cj0*r02*x1382))+(((-33.0)*r02*x1380))))))+IKsqr(((((-3.125)*x1381))+(((-1.03125)*x1380))+(((-1.03125)*sj1*x1383))+(((-1.03125)*cj0*x1382))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1385.value)*((x1384+(((-100.0)*r02*x1381))+(((-33.0)*x1382*x1383))+(((-33.0)*cj0*r02*x1382))+(((-33.0)*r02*x1380))))), ((((-3.125)*x1381))+(((-1.03125)*x1380))+(((-1.03125)*sj1*x1383))+(((-1.03125)*cj0*x1382))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1386=IKcos(j5);
IkReal x1387=IKsin(j5);
IkReal x1388=((0.33)*cj1);
IkReal x1389=(r21*sj6);
IkReal x1390=(cj6*r00);
IkReal x1391=((1.0)*pz);
IkReal x1392=(cj6*r20);
IkReal x1393=(r11*sj6);
IkReal x1394=((0.64)*pz);
IkReal x1395=(r01*sj6);
IkReal x1396=(cj6*r10);
IkReal x1397=((0.33)*sj0*sj1);
IkReal x1398=((0.32)*x1387);
IkReal x1399=(r22*x1386);
IkReal x1400=((0.33)*cj0*sj1);
IkReal x1401=((0.32)*x1386);
evalcond[0]=((((-1.0)*r12*x1397))+(((-1.0)*x1401))+(((-1.0)*r02*x1400))+(((-1.0)*r22*x1391))+(((-1.0)*r22*x1388)));
evalcond[1]=((((-1.0)*x1395*x1398))+((x1390*x1398))+(((-1.0)*x1400))+(((-1.0)*r02*x1401)));
evalcond[2]=((((-1.0)*r12*x1401))+(((-1.0)*x1393*x1398))+((x1396*x1398))+(((-1.0)*x1397)));
evalcond[3]=((((-1.0)*x1388))+(((-1.0)*x1389*x1398))+(((-0.32)*x1399))+((x1392*x1398))+(((-1.0)*x1391)));
evalcond[4]=((0.0065)+(((-1.0)*x1394*x1399))+((x1387*x1392*x1394))+(((-1.0)*x1387*x1389*x1394))+(((-1.0)*pz*x1391)));
evalcond[5]=(x1398+((x1393*x1397))+(((-1.0)*x1391*x1392))+((x1388*x1389))+(((-1.0)*x1390*x1400))+(((-1.0)*x1396*x1397))+((x1395*x1400))+((pz*x1389))+(((-1.0)*x1388*x1392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1402=pz*pz;
IkReal x1403=((0.64)*pz);
IkReal x1404=(((cj6*r20*x1403))+(((-1.0)*r21*sj6*x1403)));
CheckValue<IkReal> x1407 = IKatan2WithCheck(IkReal(((-0.64)*pz*r22)),IkReal(x1404),IKFAST_ATAN2_MAGTHRESH);
if(!x1407.valid){
continue;
}
IkReal x1405=((1.0)*(x1407.value));
if((((x1404*x1404)+(((0.4096)*x1402*(r22*r22))))) < -0.00001)
continue;
CheckValue<IkReal> x1408=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1404*x1404)+(((0.4096)*x1402*(r22*r22)))))),-1);
if(!x1408.valid){
continue;
}
if( (((x1408.value)*(((0.0065)+(((-1.0)*x1402)))))) < -1-IKFAST_SINCOS_THRESH || (((x1408.value)*(((0.0065)+(((-1.0)*x1402)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1406=IKasin(((x1408.value)*(((0.0065)+(((-1.0)*x1402))))));
j5array[0]=((((-1.0)*x1406))+(((-1.0)*x1405)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1405))+x1406);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1409=IKsin(j5);
IkReal x1410=((0.32)*x1409);
evalcond[0]=((((-0.32)*r22*(IKcos(j5))))+((cj6*r20*x1410))+(((-1.0)*pz))+(((-1.0)*r21*sj6*x1410))+(((-0.33)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
IkReal x1411=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1411);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1411);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1411);
rxp2_2=0;
IkReal x1412=((32.0)*cj5);
IkReal x1413=((32.0)*sj5*sj6);
IkReal x1414=((32.0)*cj6*sj5);
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs(((((-1.0)*r12*x1412))+(((-1.0)*r11*x1413))+((r10*x1414)))))+(IKabs(((((-1.0)*r02*x1412))+((r00*x1414))+(((-1.0)*r01*x1413))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1415=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1415);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1415);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1415);
rxp2_2=0;
IkReal x1416=cj1*cj1;
IkReal x1417=(r10*sj6);
IkReal x1418=(cj6*r11);
j0eval[0]=(((x1416*x1418))+((x1416*x1417))+(((-1.0)*x1417))+(((-1.0)*x1418)));
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1419=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1419);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1419);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1419);
rxp2_2=0;
j0eval[0]=r12;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1425=IKPowWithIntegerCheck(sj1,-1);
if(!x1425.valid){
continue;
}
IkReal x1420=x1425.value;
IkReal x1421=((32.0)*cj5);
IkReal x1422=((0.0303030303030303)*x1420);
IkReal x1423=((32.0)*r01*sj5*sj6);
IkReal x1424=((32.0)*cj6*r00*sj5);
CheckValue<IkReal> x1426=IKPowWithIntegerCheck(r12,-1);
if(!x1426.valid){
continue;
}
if( IKabs((x1422*(x1426.value)*((((r02*x1423))+((x1421*(r02*r02)))+(((-33.0)*cj1*r22))+(((-100.0)*pz*r22))+(((-1.0)*r02*x1424))+(((-1.0)*x1421)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1422*((x1424+(((-1.0)*r02*x1421))+(((-1.0)*x1423)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1422*(x1426.value)*((((r02*x1423))+((x1421*(r02*r02)))+(((-33.0)*cj1*r22))+(((-100.0)*pz*r22))+(((-1.0)*r02*x1424))+(((-1.0)*x1421))))))+IKsqr((x1422*((x1424+(((-1.0)*r02*x1421))+(((-1.0)*x1423))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1422*(x1426.value)*((((r02*x1423))+((x1421*(r02*r02)))+(((-33.0)*cj1*r22))+(((-100.0)*pz*r22))+(((-1.0)*r02*x1424))+(((-1.0)*x1421))))), (x1422*((x1424+(((-1.0)*r02*x1421))+(((-1.0)*x1423))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1427=IKcos(j0);
IkReal x1428=IKsin(j0);
IkReal x1429=((0.32)*sj5);
IkReal x1430=(cj6*r10);
IkReal x1431=(r01*sj6);
IkReal x1432=((0.33)*cj1);
IkReal x1433=(pz*sj6);
IkReal x1434=((1.0)*r20);
IkReal x1435=(cj6*pz);
IkReal x1436=(r11*sj6);
IkReal x1437=((0.32)*cj5);
IkReal x1438=(cj6*r00);
IkReal x1439=((0.33)*sj1*x1427);
IkReal x1440=((0.33)*sj1*x1428);
evalcond[0]=(((x1429*x1438))+(((-1.0)*x1429*x1431))+(((-1.0)*x1439))+(((-1.0)*r02*x1437)));
evalcond[1]=(((x1429*x1430))+(((-1.0)*r12*x1437))+(((-1.0)*x1429*x1436))+(((-1.0)*x1440)));
evalcond[2]=((((-1.0)*pz*r22))+(((-1.0)*r22*x1432))+(((-1.0)*r12*x1440))+(((-1.0)*x1437))+(((-1.0)*r02*x1439)));
evalcond[3]=((((-1.0)*r00*sj6*x1439))+(((-1.0)*r21*x1435))+(((-1.0)*cj6*r01*x1439))+(((-1.0)*r10*sj6*x1440))+(((-1.0)*cj6*r21*x1432))+(((-1.0)*r20*sj6*x1432))+(((-1.0)*x1433*x1434))+(((-1.0)*cj6*r11*x1440)));
evalcond[4]=((((-1.0)*x1438*x1439))+((r21*sj6*x1432))+(((-1.0)*x1430*x1440))+(((-1.0)*x1434*x1435))+(((-1.0)*cj6*r20*x1432))+((x1436*x1440))+((r21*x1433))+x1429+((x1431*x1439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1441=cj1*cj1;
IkReal x1442=(cj6*sj5);
IkReal x1443=(cj5*r02);
IkReal x1444=(r01*sj5);
IkReal x1445=((33.0)*pz);
IkReal x1446=((10.56)*sj1);
IkReal x1447=((10.89)*cj1);
IkReal x1448=(sj6*x1446);
IkReal x1449=((10.89)*r10*sj6);
IkReal x1450=(r20*sj1*sj6);
IkReal x1451=((10.89)*cj6*r11);
IkReal x1452=(cj6*r21*sj1);
CheckValue<IkReal> x1453=IKPowWithIntegerCheck((((x1441*x1449))+(((-1.0)*x1451))+(((-1.0)*x1449))+((x1441*x1451))),-1);
if(!x1453.valid){
continue;
}
CheckValue<IkReal> x1454=IKPowWithIntegerCheck(sj1,-1);
if(!x1454.valid){
continue;
}
if( IKabs(((x1453.value)*((((x1445*x1450))+((x1445*x1452))+((x1447*x1450))+((x1447*x1452))+(((-1.0)*r00*x1444*x1446))+(((-1.0)*r00*x1443*x1448))+((x1442*x1448*(r00*r00)))+(((21.12)*cj6*r00*r01*sj1*x1442))+(((-1.0)*cj6*r01*x1443*x1446))+(((-1.0)*x1442*x1448*(r01*r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0303030303030303)*(x1454.value)*(((((-32.0)*x1443))+(((-32.0)*sj6*x1444))+(((32.0)*r00*x1442)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1453.value)*((((x1445*x1450))+((x1445*x1452))+((x1447*x1450))+((x1447*x1452))+(((-1.0)*r00*x1444*x1446))+(((-1.0)*r00*x1443*x1448))+((x1442*x1448*(r00*r00)))+(((21.12)*cj6*r00*r01*sj1*x1442))+(((-1.0)*cj6*r01*x1443*x1446))+(((-1.0)*x1442*x1448*(r01*r01)))))))+IKsqr(((0.0303030303030303)*(x1454.value)*(((((-32.0)*x1443))+(((-32.0)*sj6*x1444))+(((32.0)*r00*x1442))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1453.value)*((((x1445*x1450))+((x1445*x1452))+((x1447*x1450))+((x1447*x1452))+(((-1.0)*r00*x1444*x1446))+(((-1.0)*r00*x1443*x1448))+((x1442*x1448*(r00*r00)))+(((21.12)*cj6*r00*r01*sj1*x1442))+(((-1.0)*cj6*r01*x1443*x1446))+(((-1.0)*x1442*x1448*(r01*r01)))))), ((0.0303030303030303)*(x1454.value)*(((((-32.0)*x1443))+(((-32.0)*sj6*x1444))+(((32.0)*r00*x1442))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1455=IKcos(j0);
IkReal x1456=IKsin(j0);
IkReal x1457=((0.32)*sj5);
IkReal x1458=(cj6*r10);
IkReal x1459=(r01*sj6);
IkReal x1460=((0.33)*cj1);
IkReal x1461=(pz*sj6);
IkReal x1462=((1.0)*r20);
IkReal x1463=(cj6*pz);
IkReal x1464=(r11*sj6);
IkReal x1465=((0.32)*cj5);
IkReal x1466=(cj6*r00);
IkReal x1467=((0.33)*sj1*x1455);
IkReal x1468=((0.33)*sj1*x1456);
evalcond[0]=((((-1.0)*x1457*x1459))+(((-1.0)*r02*x1465))+(((-1.0)*x1467))+((x1457*x1466)));
evalcond[1]=((((-1.0)*x1468))+(((-1.0)*x1457*x1464))+(((-1.0)*r12*x1465))+((x1457*x1458)));
evalcond[2]=((((-1.0)*r02*x1467))+(((-1.0)*pz*r22))+(((-1.0)*x1465))+(((-1.0)*r22*x1460))+(((-1.0)*r12*x1468)));
evalcond[3]=((((-1.0)*r10*sj6*x1468))+(((-1.0)*cj6*r11*x1468))+(((-1.0)*r20*sj6*x1460))+(((-1.0)*r00*sj6*x1467))+(((-1.0)*x1461*x1462))+(((-1.0)*cj6*r01*x1467))+(((-1.0)*cj6*r21*x1460))+(((-1.0)*r21*x1463)));
evalcond[4]=((((-1.0)*x1458*x1468))+((r21*sj6*x1460))+(((-1.0)*cj6*r20*x1460))+((x1459*x1467))+(((-1.0)*x1466*x1467))+(((-1.0)*x1462*x1463))+((x1464*x1468))+x1457+((r21*x1461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1469=((32.0)*cj5);
IkReal x1470=((32.0)*sj5*sj6);
IkReal x1471=((32.0)*cj6*sj5);
CheckValue<IkReal> x1472 = IKatan2WithCheck(IkReal((((r10*x1471))+(((-1.0)*r11*x1470))+(((-1.0)*r12*x1469)))),IkReal(((((-1.0)*r01*x1470))+(((-1.0)*r02*x1469))+((r00*x1471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1472.valid){
continue;
}
CheckValue<IkReal> x1473=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x1473.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1472.value)+(((1.5707963267949)*(x1473.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1474=IKcos(j0);
IkReal x1475=IKsin(j0);
IkReal x1476=((0.32)*sj5);
IkReal x1477=(cj6*r10);
IkReal x1478=(r01*sj6);
IkReal x1479=((0.33)*cj1);
IkReal x1480=(pz*sj6);
IkReal x1481=((1.0)*r20);
IkReal x1482=(cj6*pz);
IkReal x1483=(r11*sj6);
IkReal x1484=((0.32)*cj5);
IkReal x1485=(cj6*r00);
IkReal x1486=((0.33)*sj1*x1474);
IkReal x1487=((0.33)*sj1*x1475);
evalcond[0]=(((x1476*x1485))+(((-1.0)*x1486))+(((-1.0)*x1476*x1478))+(((-1.0)*r02*x1484)));
evalcond[1]=((((-1.0)*r12*x1484))+(((-1.0)*x1487))+((x1476*x1477))+(((-1.0)*x1476*x1483)));
evalcond[2]=((((-1.0)*r22*x1479))+(((-1.0)*r12*x1487))+(((-1.0)*x1484))+(((-1.0)*pz*r22))+(((-1.0)*r02*x1486)));
evalcond[3]=((((-1.0)*r10*sj6*x1487))+(((-1.0)*r20*sj6*x1479))+(((-1.0)*cj6*r21*x1479))+(((-1.0)*x1480*x1481))+(((-1.0)*r21*x1482))+(((-1.0)*r00*sj6*x1486))+(((-1.0)*cj6*r01*x1486))+(((-1.0)*cj6*r11*x1487)));
evalcond[4]=((((-1.0)*x1481*x1482))+(((-1.0)*x1485*x1486))+((r21*x1480))+((x1483*x1487))+(((-1.0)*cj6*r20*x1479))+x1476+(((-1.0)*x1477*x1487))+((x1478*x1486))+((r21*sj6*x1479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1488=((((-0.32)*r21*sj6))+(((0.32)*cj6*r20)));
CheckValue<IkReal> x1491 = IKatan2WithCheck(IkReal(((-0.32)*r22)),IkReal(x1488),IKFAST_ATAN2_MAGTHRESH);
if(!x1491.valid){
continue;
}
IkReal x1489=((1.0)*(x1491.value));
if((((((0.1024)*(r22*r22)))+(x1488*x1488))) < -0.00001)
continue;
CheckValue<IkReal> x1492=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.1024)*(r22*r22)))+(x1488*x1488)))),-1);
if(!x1492.valid){
continue;
}
if( (((-1.0)*(x1492.value)*(((((-1.0)*pz))+(((-0.33)*cj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1492.value)*(((((-1.0)*pz))+(((-0.33)*cj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1490=((-1.0)*(IKasin(((-1.0)*(x1492.value)*(((((-1.0)*pz))+(((-0.33)*cj1))))))));
j5array[0]=((((-1.0)*x1489))+(((-1.0)*x1490)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1489))+(((1.0)*x1490)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1493=IKsin(j5);
IkReal x1494=((0.64)*pz*x1493);
evalcond[0]=((0.0065)+(((-1.0)*r21*sj6*x1494))+(((-1.0)*(pz*pz)))+(((-0.64)*pz*r22*(IKcos(j5))))+((cj6*r20*x1494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
IkReal x1495=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1495);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1495);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1495);
rxp2_2=0;
IkReal x1496=((32.0)*cj5);
IkReal x1497=((32.0)*sj5*sj6);
IkReal x1498=((32.0)*cj6*sj5);
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((r10*x1498))+(((-1.0)*r12*x1496))+(((-1.0)*r11*x1497)))))+(IKabs((((r00*x1498))+(((-1.0)*r01*x1497))+(((-1.0)*r02*x1496))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1499=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1499);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1499);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1499);
rxp2_2=0;
IkReal x1500=cj1*cj1;
IkReal x1501=(r10*sj6);
IkReal x1502=(cj6*r11);
j0eval[0]=((((-1.0)*x1501))+(((-1.0)*x1502))+((x1500*x1502))+((x1500*x1501)));
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1503=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1503);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1503);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1503);
rxp2_2=0;
j0eval[0]=r12;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1509=IKPowWithIntegerCheck(sj1,-1);
if(!x1509.valid){
continue;
}
IkReal x1504=x1509.value;
IkReal x1505=((32.0)*cj5);
IkReal x1506=((0.0303030303030303)*x1504);
IkReal x1507=((32.0)*r01*sj5*sj6);
IkReal x1508=((32.0)*cj6*r00*sj5);
CheckValue<IkReal> x1510=IKPowWithIntegerCheck(r12,-1);
if(!x1510.valid){
continue;
}
if( IKabs((x1506*(x1510.value)*(((((-1.0)*x1505))+((x1505*(r02*r02)))+(((-1.0)*r02*x1508))+((r02*x1507))+(((-33.0)*cj1*r22))+(((-100.0)*pz*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1506*(((((-1.0)*x1507))+(((-1.0)*r02*x1505))+x1508)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1506*(x1510.value)*(((((-1.0)*x1505))+((x1505*(r02*r02)))+(((-1.0)*r02*x1508))+((r02*x1507))+(((-33.0)*cj1*r22))+(((-100.0)*pz*r22))))))+IKsqr((x1506*(((((-1.0)*x1507))+(((-1.0)*r02*x1505))+x1508))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1506*(x1510.value)*(((((-1.0)*x1505))+((x1505*(r02*r02)))+(((-1.0)*r02*x1508))+((r02*x1507))+(((-33.0)*cj1*r22))+(((-100.0)*pz*r22))))), (x1506*(((((-1.0)*x1507))+(((-1.0)*r02*x1505))+x1508))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1511=IKcos(j0);
IkReal x1512=IKsin(j0);
IkReal x1513=((0.32)*sj5);
IkReal x1514=(cj6*r10);
IkReal x1515=(r01*sj6);
IkReal x1516=((0.33)*cj1);
IkReal x1517=(pz*sj6);
IkReal x1518=((1.0)*r20);
IkReal x1519=(cj6*pz);
IkReal x1520=(r11*sj6);
IkReal x1521=((0.32)*cj5);
IkReal x1522=(cj6*r00);
IkReal x1523=((0.33)*sj1*x1511);
IkReal x1524=((0.33)*sj1*x1512);
evalcond[0]=(((x1513*x1522))+(((-1.0)*x1513*x1515))+(((-1.0)*x1523))+(((-1.0)*r02*x1521)));
evalcond[1]=(((x1513*x1514))+(((-1.0)*r12*x1521))+(((-1.0)*x1524))+(((-1.0)*x1513*x1520)));
evalcond[2]=((((-1.0)*r12*x1524))+(((-1.0)*r22*x1516))+(((-1.0)*pz*r22))+(((-1.0)*x1521))+(((-1.0)*r02*x1523)));
evalcond[3]=((((-1.0)*cj6*r11*x1524))+(((-1.0)*r20*sj6*x1516))+(((-1.0)*r21*x1519))+(((-1.0)*r10*sj6*x1524))+(((-1.0)*cj6*r01*x1523))+(((-1.0)*r00*sj6*x1523))+(((-1.0)*x1517*x1518))+(((-1.0)*cj6*r21*x1516)));
evalcond[4]=((((-1.0)*x1514*x1524))+(((-1.0)*x1518*x1519))+((x1520*x1524))+x1513+(((-1.0)*cj6*r20*x1516))+((r21*sj6*x1516))+(((-1.0)*x1522*x1523))+((r21*x1517))+((x1515*x1523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1525=cj1*cj1;
IkReal x1526=(cj6*sj5);
IkReal x1527=(cj5*r02);
IkReal x1528=(r01*sj5);
IkReal x1529=((33.0)*pz);
IkReal x1530=((10.56)*sj1);
IkReal x1531=((10.89)*cj1);
IkReal x1532=(sj6*x1530);
IkReal x1533=((10.89)*r10*sj6);
IkReal x1534=(r20*sj1*sj6);
IkReal x1535=((10.89)*cj6*r11);
IkReal x1536=(cj6*r21*sj1);
CheckValue<IkReal> x1537=IKPowWithIntegerCheck((((x1525*x1533))+((x1525*x1535))+(((-1.0)*x1533))+(((-1.0)*x1535))),-1);
if(!x1537.valid){
continue;
}
CheckValue<IkReal> x1538=IKPowWithIntegerCheck(sj1,-1);
if(!x1538.valid){
continue;
}
if( IKabs(((x1537.value)*(((((-1.0)*cj6*r01*x1527*x1530))+(((21.12)*cj6*r00*r01*sj1*x1526))+((x1531*x1536))+((x1531*x1534))+(((-1.0)*r00*x1527*x1532))+((x1529*x1534))+((x1529*x1536))+(((-1.0)*x1526*x1532*(r01*r01)))+(((-1.0)*r00*x1528*x1530))+((x1526*x1532*(r00*r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0303030303030303)*(x1538.value)*(((((-32.0)*x1527))+(((-32.0)*sj6*x1528))+(((32.0)*r00*x1526)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1537.value)*(((((-1.0)*cj6*r01*x1527*x1530))+(((21.12)*cj6*r00*r01*sj1*x1526))+((x1531*x1536))+((x1531*x1534))+(((-1.0)*r00*x1527*x1532))+((x1529*x1534))+((x1529*x1536))+(((-1.0)*x1526*x1532*(r01*r01)))+(((-1.0)*r00*x1528*x1530))+((x1526*x1532*(r00*r00)))))))+IKsqr(((0.0303030303030303)*(x1538.value)*(((((-32.0)*x1527))+(((-32.0)*sj6*x1528))+(((32.0)*r00*x1526))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1537.value)*(((((-1.0)*cj6*r01*x1527*x1530))+(((21.12)*cj6*r00*r01*sj1*x1526))+((x1531*x1536))+((x1531*x1534))+(((-1.0)*r00*x1527*x1532))+((x1529*x1534))+((x1529*x1536))+(((-1.0)*x1526*x1532*(r01*r01)))+(((-1.0)*r00*x1528*x1530))+((x1526*x1532*(r00*r00)))))), ((0.0303030303030303)*(x1538.value)*(((((-32.0)*x1527))+(((-32.0)*sj6*x1528))+(((32.0)*r00*x1526))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1539=IKcos(j0);
IkReal x1540=IKsin(j0);
IkReal x1541=((0.32)*sj5);
IkReal x1542=(cj6*r10);
IkReal x1543=(r01*sj6);
IkReal x1544=((0.33)*cj1);
IkReal x1545=(pz*sj6);
IkReal x1546=((1.0)*r20);
IkReal x1547=(cj6*pz);
IkReal x1548=(r11*sj6);
IkReal x1549=((0.32)*cj5);
IkReal x1550=(cj6*r00);
IkReal x1551=((0.33)*sj1*x1539);
IkReal x1552=((0.33)*sj1*x1540);
evalcond[0]=((((-1.0)*r02*x1549))+((x1541*x1550))+(((-1.0)*x1551))+(((-1.0)*x1541*x1543)));
evalcond[1]=(((x1541*x1542))+(((-1.0)*x1552))+(((-1.0)*r12*x1549))+(((-1.0)*x1541*x1548)));
evalcond[2]=((((-1.0)*pz*r22))+(((-1.0)*r02*x1551))+(((-1.0)*r22*x1544))+(((-1.0)*r12*x1552))+(((-1.0)*x1549)));
evalcond[3]=((((-1.0)*cj6*r21*x1544))+(((-1.0)*r00*sj6*x1551))+(((-1.0)*r21*x1547))+(((-1.0)*r20*sj6*x1544))+(((-1.0)*x1545*x1546))+(((-1.0)*cj6*r01*x1551))+(((-1.0)*cj6*r11*x1552))+(((-1.0)*r10*sj6*x1552)));
evalcond[4]=((((-1.0)*x1546*x1547))+(((-1.0)*cj6*r20*x1544))+((x1543*x1551))+x1541+((r21*sj6*x1544))+((r21*x1545))+(((-1.0)*x1542*x1552))+(((-1.0)*x1550*x1551))+((x1548*x1552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1553=((32.0)*cj5);
IkReal x1554=((32.0)*sj5*sj6);
IkReal x1555=((32.0)*cj6*sj5);
CheckValue<IkReal> x1556=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x1556.valid){
continue;
}
CheckValue<IkReal> x1557 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1553))+(((-1.0)*r11*x1554))+((r10*x1555)))),IkReal((((r00*x1555))+(((-1.0)*r02*x1553))+(((-1.0)*r01*x1554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1557.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1556.value)))+(x1557.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1558=IKcos(j0);
IkReal x1559=IKsin(j0);
IkReal x1560=((0.32)*sj5);
IkReal x1561=(cj6*r10);
IkReal x1562=(r01*sj6);
IkReal x1563=((0.33)*cj1);
IkReal x1564=(pz*sj6);
IkReal x1565=((1.0)*r20);
IkReal x1566=(cj6*pz);
IkReal x1567=(r11*sj6);
IkReal x1568=((0.32)*cj5);
IkReal x1569=(cj6*r00);
IkReal x1570=((0.33)*sj1*x1558);
IkReal x1571=((0.33)*sj1*x1559);
evalcond[0]=(((x1560*x1569))+(((-1.0)*r02*x1568))+(((-1.0)*x1560*x1562))+(((-1.0)*x1570)));
evalcond[1]=(((x1560*x1561))+(((-1.0)*x1560*x1567))+(((-1.0)*r12*x1568))+(((-1.0)*x1571)));
evalcond[2]=((((-1.0)*r02*x1570))+(((-1.0)*pz*r22))+(((-1.0)*r22*x1563))+(((-1.0)*r12*x1571))+(((-1.0)*x1568)));
evalcond[3]=((((-1.0)*r10*sj6*x1571))+(((-1.0)*cj6*r21*x1563))+(((-1.0)*r21*x1566))+(((-1.0)*r20*sj6*x1563))+(((-1.0)*x1564*x1565))+(((-1.0)*cj6*r11*x1571))+(((-1.0)*cj6*r01*x1570))+(((-1.0)*r00*sj6*x1570)));
evalcond[4]=(((x1567*x1571))+(((-1.0)*x1565*x1566))+(((-1.0)*cj6*r20*x1563))+x1560+(((-1.0)*x1569*x1570))+((r21*x1564))+((r21*sj6*x1563))+((x1562*x1570))+(((-1.0)*x1561*x1571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j5, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1572=sj1*sj1;
IkReal x1573=((0.66)*sj1);
IkReal x1574=((0.4356)*x1572);
CheckValue<IkReal> x1577 = IKatan2WithCheck(IkReal((px*x1573)),IkReal((py*x1573)),IKFAST_ATAN2_MAGTHRESH);
if(!x1577.valid){
continue;
}
IkReal x1575=((1.0)*(x1577.value));
if(((((x1574*(py*py)))+((x1574*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x1578=IKPowWithIntegerCheck(IKabs(IKsqrt((((x1574*(py*py)))+((x1574*(px*px)))))),-1);
if(!x1578.valid){
continue;
}
if( (((x1578.value)*(((0.0065)+(((0.66)*cj1*pz))+pp)))) < -1-IKFAST_SINCOS_THRESH || (((x1578.value)*(((0.0065)+(((0.66)*cj1*pz))+pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1576=IKasin(((x1578.value)*(((0.0065)+(((0.66)*cj1*pz))+pp))));
j0array[0]=((((-1.0)*x1575))+(((-1.0)*x1576)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x1576+(((-1.0)*x1575)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1579=((1.03125)*sj1);
cj5array[0]=((((-1.03125)*cj1*r22))+(((-1.0)*r12*sj0*x1579))+(((-3.125)*npz))+(((-1.0)*cj0*r02*x1579)));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j6eval[3];
IkReal x1580=(r12*sj5);
IkReal x1581=((8.0)*cj5);
IkReal x1582=((8.25)*cj1);
IkReal x1583=((8.25)*cj0*sj1);
j6eval[0]=x1580;
j6eval[1]=((IKabs(((((25.0)*rxp1_1))+(((-1.0)*r01*x1582))+((r21*x1583))+((r10*x1581)))))+(IKabs(((((-1.0)*r11*x1581))+((r20*x1583))+(((-1.0)*r00*x1582))+(((25.0)*rxp0_1))))));
j6eval[2]=IKsign(x1580);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x1584=((16.5)*cj1);
IkReal x1585=((16.0)*npx);
IkReal x1586=(cj5*r22);
IkReal x1587=((50.0)*pz);
IkReal x1588=((25.0)*pp);
IkReal x1589=(r21*sj5);
IkReal x1590=(npy*r20*sj5);
IkReal x1591=((16.0)*cj5*npz);
j6eval[0]=(x1590+(((-1.0)*npx*x1589)));
j6eval[1]=IKsign(((((-1.0)*x1585*x1589))+(((16.0)*x1590))));
j6eval[2]=((IKabs(((((0.1625)*r20))+(((-1.0)*r20*x1588))+(((-1.0)*r20*x1591))+((x1585*x1586))+((npx*x1587))+((npx*x1584)))))+(IKabs(((((0.1625)*r21))+(((16.0)*npy*x1586))+((npy*x1587))+((npy*x1584))+(((-1.0)*r21*x1588))+(((-1.0)*r21*x1591))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x1592=((16.0)*cj5);
IkReal x1593=((25.0)*pp);
IkReal x1594=((50.0)*px);
IkReal x1595=(npy*r00*sj5);
IkReal x1596=(npx*r01*sj5);
IkReal x1597=((16.5)*cj0*sj1);
j6eval[0]=(x1595+(((-1.0)*x1596)));
j6eval[1]=IKsign(((((16.0)*x1595))+(((-16.0)*x1596))));
j6eval[2]=((IKabs(((((-1.0)*npz*r00*x1592))+((npx*r02*x1592))+(((-1.0)*r00*x1593))+((npx*x1597))+((npx*x1594))+(((0.1625)*r00)))))+(IKabs((((npy*r02*x1592))+((npy*x1597))+((npy*x1594))+(((-1.0)*r01*x1593))+(((-1.0)*npz*r01*x1592))+(((0.1625)*r01))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
sj5=0;
cj5=1.0;
j5=0;
IkReal x1598=((0.33)*sj1);
IkReal x1599=((0.33)*cj1);
j6eval[0]=((IKabs(((((-1.0)*cj0*r00*x1598))+(((-1.0)*npx))+(((-1.0)*r10*sj0*x1598))+(((-1.0)*r20*x1599)))))+(IKabs((((cj0*r01*x1598))+npy+((r11*sj0*x1598))+((r21*x1599))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj5=0;
cj5=1.0;
j5=0;
IkReal x1600=((0.33)*sj1);
IkReal x1601=((0.33)*cj1);
j6eval[0]=((IKabs(((((-1.0)*cj0*r01*x1600))+(((-1.0)*r21*x1601))+(((-1.0)*npy))+(((-1.0)*r11*sj0*x1600)))))+(IKabs(((((-1.0)*r20*x1601))+(((-1.0)*r10*sj0*x1600))+(((-1.0)*npx))+(((-1.0)*cj0*r00*x1600))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1602=((0.33)*sj1);
IkReal x1603=((0.33)*cj1);
CheckValue<IkReal> x1605 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r01*x1602))+(((-1.0)*r21*x1603))+(((-1.0)*npy))+(((-1.0)*r11*sj0*x1602)))),IkReal(((((-1.0)*r20*x1603))+(((-1.0)*r10*sj0*x1602))+(((-1.0)*npx))+(((-1.0)*cj0*r00*x1602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1605.valid){
continue;
}
IkReal x1604=x1605.value;
j6array[0]=((-1.0)*x1604);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1604)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1606=IKsin(j6);
IkReal x1607=IKcos(j6);
IkReal x1608=((0.33)*sj1);
IkReal x1609=((0.33)*cj1);
evalcond[0]=(((r21*x1606*x1609))+((npy*x1606))+((r11*sj0*x1606*x1608))+((cj0*r01*x1606*x1608))+(((-1.0)*cj0*r00*x1607*x1608))+(((-1.0)*r10*sj0*x1607*x1608))+(((-1.0)*npx*x1607))+(((-1.0)*r20*x1607*x1609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1610=((0.33)*sj1);
IkReal x1611=((0.33)*cj1);
CheckValue<IkReal> x1613 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj0*x1610))+(((-1.0)*r20*x1611))+(((-1.0)*cj0*r00*x1610))+(((-1.0)*npx)))),IkReal((((r21*x1611))+((cj0*r01*x1610))+npy+((r11*sj0*x1610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1613.valid){
continue;
}
IkReal x1612=x1613.value;
j6array[0]=((-1.0)*x1612);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1612)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1614=IKsin(j6);
IkReal x1615=IKcos(j6);
IkReal x1616=((0.33)*x1614);
IkReal x1617=((0.33)*sj1*x1615);
evalcond[0]=((((-1.0)*npx*x1614))+(((-1.0)*r11*sj0*x1617))+(((-1.0)*cj0*r01*x1617))+(((-1.0)*npy*x1615))+(((-1.0)*cj1*r20*x1616))+(((-1.0)*cj0*r00*sj1*x1616))+(((-0.33)*cj1*r21*x1615))+(((-1.0)*r10*sj0*sj1*x1616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1618=((0.33)*sj1);
IkReal x1619=((0.33)*cj1);
j6eval[0]=((IKabs((((r21*x1619))+((cj0*r01*x1618))+npy+((r11*sj0*x1618)))))+(IKabs(((((-1.0)*r10*sj0*x1618))+(((-1.0)*r20*x1619))+(((-1.0)*cj0*r00*x1618))+(((-1.0)*npx))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1620=((0.33)*sj1);
IkReal x1621=((0.33)*cj1);
j6eval[0]=((IKabs(((((-1.0)*r20*x1621))+(((-1.0)*cj0*r00*x1620))+(((-1.0)*r10*sj0*x1620))+(((-1.0)*npx)))))+(IKabs(((((-1.0)*r11*sj0*x1620))+(((-1.0)*r21*x1621))+(((-1.0)*cj0*r01*x1620))+(((-1.0)*npy))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1622=((0.33)*sj1);
IkReal x1623=((0.33)*cj1);
CheckValue<IkReal> x1625 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj0*x1622))+(((-1.0)*r21*x1623))+(((-1.0)*cj0*r01*x1622))+(((-1.0)*npy)))),IkReal(((((-1.0)*r20*x1623))+(((-1.0)*cj0*r00*x1622))+(((-1.0)*r10*sj0*x1622))+(((-1.0)*npx)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1625.valid){
continue;
}
IkReal x1624=x1625.value;
j6array[0]=((-1.0)*x1624);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1624)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1626=IKsin(j6);
IkReal x1627=IKcos(j6);
IkReal x1628=((0.33)*sj1);
IkReal x1629=((0.33)*cj1);
evalcond[0]=(((npy*x1626))+(((-1.0)*npx*x1627))+(((-1.0)*r20*x1627*x1629))+((r21*x1626*x1629))+((r11*sj0*x1626*x1628))+(((-1.0)*r10*sj0*x1627*x1628))+((cj0*r01*x1626*x1628))+(((-1.0)*cj0*r00*x1627*x1628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1630=((0.33)*sj1);
IkReal x1631=((0.33)*cj1);
CheckValue<IkReal> x1633 = IKatan2WithCheck(IkReal(((((-1.0)*npx))+(((-1.0)*r10*sj0*x1630))+(((-1.0)*r20*x1631))+(((-1.0)*cj0*r00*x1630)))),IkReal((((r21*x1631))+npy+((cj0*r01*x1630))+((r11*sj0*x1630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1633.valid){
continue;
}
IkReal x1632=x1633.value;
j6array[0]=((-1.0)*x1632);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1632)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1634=IKsin(j6);
IkReal x1635=IKcos(j6);
IkReal x1636=((0.33)*x1634);
IkReal x1637=((0.33)*sj1*x1635);
evalcond[0]=((((-1.0)*npy*x1635))+(((-1.0)*npx*x1634))+(((-1.0)*cj1*r20*x1636))+(((-1.0)*r11*sj0*x1637))+(((-0.33)*cj1*r21*x1635))+(((-1.0)*r10*sj0*sj1*x1636))+(((-1.0)*cj0*r01*x1637))+(((-1.0)*cj0*r00*sj1*x1636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
IkReal x1638=(r02*sj5);
IkReal x1639=((8.25)*cj1);
IkReal x1640=((8.25)*sj0*sj1);
IkReal x1641=((8.0)*cj5*r22);
j6eval[0]=x1638;
j6eval[1]=IKsign(x1638);
j6eval[2]=((IKabs((((r21*x1640))+(((-1.0)*r11*x1639))+(((-1.0)*r11*x1641))+(((-25.0)*rxp1_0)))))+(IKabs((((r20*x1640))+(((-25.0)*rxp0_0))+(((-1.0)*r10*x1639))+(((-1.0)*r10*x1641))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
IkReal x1642=(r22*sj5);
IkReal x1643=((8.25)*sj1);
IkReal x1644=((8.0)*cj5*r02);
j6eval[0]=x1642;
j6eval[1]=IKsign(x1642);
j6eval[2]=((IKabs(((((-1.0)*r01*sj0*x1643))+((r11*x1644))+(((-25.0)*rxp1_2))+((cj0*r11*x1643)))))+(IKabs((((cj0*r10*x1643))+(((-1.0)*r00*sj0*x1643))+((r10*x1644))+(((-25.0)*rxp0_2))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
IkReal x1645=((50.0)*py);
IkReal x1646=((16.0)*r10);
IkReal x1647=(npy*sj5);
IkReal x1648=((25.0)*pp);
IkReal x1649=((16.0)*r11);
IkReal x1650=(cj5*pz*r22);
IkReal x1651=(npx*r11*sj5);
IkReal x1652=((16.5)*sj0*sj1);
IkReal x1653=(cj5*px*r02);
j6eval[0]=(((r10*x1647))+(((-1.0)*x1651)));
j6eval[1]=((IKabs(((((-1.0)*r11*x1648))+(((-1.0)*x1649*x1653))+(((-1.0)*x1649*x1650))+((npy*x1652))+(((0.1625)*r11))+((npy*x1645)))))+(IKabs((((npx*x1645))+((npx*x1652))+(((-1.0)*x1646*x1650))+(((-1.0)*x1646*x1653))+(((-1.0)*r10*x1648))+(((0.1625)*r10))))));
j6eval[2]=IKsign(((((-1.0)*npx*sj5*x1649))+((x1646*x1647))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
sj5=0;
cj5=1.0;
j5=0;
IkReal x1654=((0.32)*r02);
IkReal x1655=((0.33)*cj1);
IkReal x1656=((1.0)*pz);
j6eval[0]=((IKabs(((((-1.0)*r20*x1655))+(((-1.0)*r20*x1656))+((r00*x1654)))))+(IKabs(((((-1.0)*r21*x1656))+(((-1.0)*r21*x1655))+((r01*x1654))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
sj5=0;
cj5=1.0;
j5=0;
IkReal x1657=((0.32)*r02);
IkReal x1658=((0.33)*cj1);
j6eval[0]=((IKabs(((((-1.0)*r01*x1657))+((pz*r21))+((r21*x1658)))))+(IKabs(((((-1.0)*pz*r20))+(((-1.0)*r20*x1658))+((r00*x1657))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1659=((0.32)*r02);
IkReal x1660=((0.33)*cj1);
CheckValue<IkReal> x1662 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*npx))+(((-1.0)*r20*x1660))+((r00*x1659))+((py*r10)))),IkReal(((((-1.0)*r01*x1659))+(((-1.0)*px*r01))+npy+(((-1.0)*py*r11))+((r21*x1660)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1662.valid){
continue;
}
IkReal x1661=x1662.value;
j6array[0]=((-1.0)*x1661);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1661)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1663=IKsin(j6);
IkReal x1664=IKcos(j6);
IkReal x1665=((0.32)*r02);
IkReal x1666=((0.33)*cj1);
IkReal x1667=(r00*x1663);
IkReal x1668=(r01*x1664);
evalcond[0]=(((px*x1667))+((px*x1668))+((py*r11*x1664))+(((-1.0)*npx*x1663))+((py*r10*x1663))+(((-1.0)*r21*x1664*x1666))+((x1665*x1667))+((x1665*x1668))+(((-1.0)*npy*x1664))+(((-1.0)*r20*x1663*x1666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1669=((0.32)*r02);
IkReal x1670=((0.33)*cj1);
CheckValue<IkReal> x1672 = IKatan2WithCheck(IkReal((((px*r01))+(((-1.0)*npy))+((r01*x1669))+((py*r11))+(((-1.0)*r21*x1670)))),IkReal((((px*r00))+(((-1.0)*npx))+((r00*x1669))+((py*r10))+(((-1.0)*r20*x1670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1672.valid){
continue;
}
IkReal x1671=x1672.value;
j6array[0]=((-1.0)*x1671);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1671)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1673=IKcos(j6);
IkReal x1674=IKsin(j6);
IkReal x1675=((0.33)*cj1);
IkReal x1676=((0.32)*r02);
IkReal x1677=(r00*x1673);
IkReal x1678=((1.0)*x1674);
evalcond[0]=(((x1676*x1677))+(((-1.0)*px*r01*x1678))+(((-1.0)*py*r11*x1678))+((px*x1677))+((py*r10*x1673))+(((-1.0)*npx*x1673))+((npy*x1674))+(((-1.0)*r01*x1674*x1676))+((r21*x1674*x1675))+(((-1.0)*r20*x1673*x1675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1679=((0.32)*r02);
IkReal x1680=((0.33)*cj1);
IkReal x1681=((1.0)*pz);
j6eval[0]=((IKabs(((((-1.0)*r21*x1680))+(((-1.0)*r21*x1681))+(((-1.0)*r01*x1679)))))+(IKabs(((((-1.0)*r20*x1681))+(((-1.0)*r20*x1680))+(((-1.0)*r00*x1679))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1682=((0.32)*r02);
IkReal x1683=((0.33)*cj1);
j6eval[0]=((IKabs((((r01*x1682))+((r21*x1683))+((pz*r21)))))+(IKabs(((((-1.0)*pz*r20))+(((-1.0)*r20*x1683))+(((-1.0)*r00*x1682))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1684=((0.32)*r02);
IkReal x1685=((0.33)*cj1);
CheckValue<IkReal> x1687 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*r20*x1685))+(((-1.0)*npx))+((py*r10))+(((-1.0)*r00*x1684)))),IkReal(((((-1.0)*px*r01))+((r01*x1684))+((r21*x1685))+npy+(((-1.0)*py*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1687.valid){
continue;
}
IkReal x1686=x1687.value;
j6array[0]=((-1.0)*x1686);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1686)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1688=IKsin(j6);
IkReal x1689=IKcos(j6);
IkReal x1690=((0.32)*r02);
IkReal x1691=((0.33)*cj1);
IkReal x1692=(r00*x1688);
IkReal x1693=(r01*x1689);
evalcond[0]=(((py*r10*x1688))+(((-1.0)*r20*x1688*x1691))+(((-1.0)*npx*x1688))+((py*r11*x1689))+(((-1.0)*x1690*x1693))+(((-1.0)*x1690*x1692))+(((-1.0)*npy*x1689))+(((-1.0)*r21*x1689*x1691))+((px*x1693))+((px*x1692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1694=((0.32)*r02);
IkReal x1695=((0.33)*cj1);
CheckValue<IkReal> x1697 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x1695))+((px*r01))+(((-1.0)*npy))+((py*r11))+(((-1.0)*r01*x1694)))),IkReal(((((-1.0)*r20*x1695))+((px*r00))+(((-1.0)*npx))+((py*r10))+(((-1.0)*r00*x1694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1697.valid){
continue;
}
IkReal x1696=x1697.value;
j6array[0]=((-1.0)*x1696);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1696)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1698=IKcos(j6);
IkReal x1699=IKsin(j6);
IkReal x1700=((0.33)*cj1);
IkReal x1701=((0.32)*r02);
IkReal x1702=(r00*x1698);
IkReal x1703=((1.0)*x1699);
evalcond[0]=(((r21*x1699*x1700))+((py*r10*x1698))+(((-1.0)*npx*x1698))+(((-1.0)*r20*x1698*x1700))+((px*x1702))+(((-1.0)*px*r01*x1703))+((npy*x1699))+((r01*x1699*x1701))+(((-1.0)*x1701*x1702))+(((-1.0)*py*r11*x1703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
IkReal x1704=(r22*sj5);
IkReal x1705=((8.25)*sj1);
j6eval[0]=x1704;
j6eval[1]=((IKabs(((((-1.0)*r01*sj0*x1705))+(((-25.0)*rxp1_2))+((cj0*r11*x1705)))))+(IKabs(((((-25.0)*rxp0_2))+((cj0*r10*x1705))+(((-1.0)*r00*sj0*x1705))))));
j6eval[2]=IKsign(x1704);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
IkReal x1706=((25.0)*pp);
IkReal x1707=((16.0)*r00);
IkReal x1708=(npy*sj5);
IkReal x1709=((50.0)*px);
IkReal x1710=(npx*r01*sj5);
IkReal x1711=((16.5)*cj0*sj1);
IkReal x1712=(cj5*pz*r22);
j6eval[0]=((((-1.0)*x1710))+((r00*x1708)));
j6eval[1]=((IKabs((((npy*x1709))+((npy*x1711))+(((-1.0)*r01*x1706))+(((-16.0)*r01*x1712))+(((0.1625)*r01)))))+(IKabs((((npx*x1709))+(((-1.0)*x1707*x1712))+(((-1.0)*r00*x1706))+(((0.1625)*r00))+((npx*x1711))))));
j6eval[2]=IKsign(((((-16.0)*x1710))+((x1707*x1708))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
IkReal x1713=((50.0)*py);
IkReal x1714=((16.0)*r10);
IkReal x1715=(npy*sj5);
IkReal x1716=((25.0)*pp);
IkReal x1717=(cj5*pz*r22);
IkReal x1718=(npx*r11*sj5);
IkReal x1719=((16.5)*sj0*sj1);
j6eval[0]=((((-1.0)*x1718))+((r10*x1715)));
j6eval[1]=((IKabs(((((-1.0)*x1714*x1717))+(((-1.0)*r10*x1716))+(((0.1625)*r10))+((npx*x1719))+((npx*x1713)))))+(IKabs((((npy*x1719))+((npy*x1713))+(((-16.0)*r11*x1717))+(((-1.0)*r11*x1716))+(((0.1625)*r11))))));
j6eval[2]=IKsign(((((-16.0)*x1718))+((x1714*x1715))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
sj5=0;
cj5=1.0;
j5=0;
IkReal x1720=((1.0)*pz);
IkReal x1721=((0.33)*cj1);
j6eval[0]=((IKabs(((((-1.0)*r20*x1721))+(((-1.0)*r20*x1720)))))+(IKabs(((((-1.0)*r21*x1720))+(((-1.0)*r21*x1721))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
sj5=0;
cj5=1.0;
j5=0;
IkReal x1722=((0.33)*cj1);
j6eval[0]=((IKabs((((r21*x1722))+((pz*r21)))))+(IKabs(((((-1.0)*pz*r20))+(((-1.0)*r20*x1722))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1723=((0.33)*cj1);
CheckValue<IkReal> x1725 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*npx))+((py*r10))+(((-1.0)*r20*x1723)))),IkReal(((((-1.0)*px*r01))+((r21*x1723))+npy+(((-1.0)*py*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1725.valid){
continue;
}
IkReal x1724=x1725.value;
j6array[0]=((-1.0)*x1724);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1724)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1726=IKsin(j6);
IkReal x1727=IKcos(j6);
IkReal x1728=((0.33)*cj1);
evalcond[0]=(((py*r11*x1727))+((px*r01*x1727))+(((-1.0)*npy*x1727))+(((-1.0)*r20*x1726*x1728))+((px*r00*x1726))+(((-1.0)*r21*x1727*x1728))+(((-1.0)*npx*x1726))+((py*r10*x1726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1729=((0.33)*cj1);
CheckValue<IkReal> x1731 = IKatan2WithCheck(IkReal((((px*r01))+(((-1.0)*npy))+((py*r11))+(((-1.0)*r21*x1729)))),IkReal((((px*r00))+(((-1.0)*npx))+((py*r10))+(((-1.0)*r20*x1729)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1731.valid){
continue;
}
IkReal x1730=x1731.value;
j6array[0]=((-1.0)*x1730);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1730)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1732=IKcos(j6);
IkReal x1733=IKsin(j6);
IkReal x1734=((0.33)*cj1);
IkReal x1735=((1.0)*x1733);
evalcond[0]=((((-1.0)*r20*x1732*x1734))+((r21*x1733*x1734))+((px*r00*x1732))+(((-1.0)*py*r11*x1735))+((py*r10*x1732))+(((-1.0)*npx*x1732))+((npy*x1733))+(((-1.0)*px*r01*x1735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1736=((1.0)*pz);
IkReal x1737=((0.33)*cj1);
j6eval[0]=((IKabs(((((-1.0)*r21*x1737))+(((-1.0)*r21*x1736)))))+(IKabs(((((-1.0)*r20*x1736))+(((-1.0)*r20*x1737))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1738=((0.33)*cj1);
j6eval[0]=((IKabs((((r21*x1738))+((pz*r21)))))+(IKabs(((((-1.0)*pz*r20))+(((-1.0)*r20*x1738))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1739=((0.33)*cj1);
CheckValue<IkReal> x1741 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*npx))+((py*r10))+(((-1.0)*r20*x1739)))),IkReal(((((-1.0)*px*r01))+((r21*x1739))+npy+(((-1.0)*py*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1741.valid){
continue;
}
IkReal x1740=x1741.value;
j6array[0]=((-1.0)*x1740);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1740)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1742=IKsin(j6);
IkReal x1743=IKcos(j6);
IkReal x1744=((0.33)*cj1);
evalcond[0]=((((-1.0)*r20*x1742*x1744))+((px*r01*x1743))+(((-1.0)*npy*x1743))+(((-1.0)*npx*x1742))+((py*r10*x1742))+((py*r11*x1743))+(((-1.0)*r21*x1743*x1744))+((px*r00*x1742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1745=((0.33)*cj1);
CheckValue<IkReal> x1747 = IKatan2WithCheck(IkReal((((px*r01))+(((-1.0)*npy))+((py*r11))+(((-1.0)*r21*x1745)))),IkReal((((px*r00))+(((-1.0)*npx))+(((-1.0)*r20*x1745))+((py*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1747.valid){
continue;
}
IkReal x1746=x1747.value;
j6array[0]=((-1.0)*x1746);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1746)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1748=IKcos(j6);
IkReal x1749=IKsin(j6);
IkReal x1750=((0.33)*cj1);
IkReal x1751=((1.0)*x1749);
evalcond[0]=(((npy*x1749))+(((-1.0)*py*r11*x1751))+(((-1.0)*npx*x1748))+((r21*x1749*x1750))+((py*r10*x1748))+(((-1.0)*r20*x1748*x1750))+((px*r00*x1748))+(((-1.0)*px*r01*x1751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1752=((50.0)*py);
IkReal x1753=((16.0)*r10);
IkReal x1754=((25.0)*pp);
IkReal x1755=((16.0)*r11);
IkReal x1756=(cj5*pz*r22);
IkReal x1757=((16.5)*sj0*sj1);
CheckValue<IkReal> x1758=IKPowWithIntegerCheck(IKsign(((((-1.0)*npx*sj5*x1755))+((npy*sj5*x1753)))),-1);
if(!x1758.valid){
continue;
}
CheckValue<IkReal> x1759 = IKatan2WithCheck(IkReal((((npx*x1757))+((npx*x1752))+(((-1.0)*r10*x1754))+(((-1.0)*x1753*x1756))+(((0.1625)*r10)))),IkReal(((((-1.0)*r11*x1754))+((npy*x1752))+((npy*x1757))+(((0.1625)*r11))+(((-1.0)*x1755*x1756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1759.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1758.value)))+(x1759.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1760=IKcos(j6);
IkReal x1761=IKsin(j6);
IkReal x1762=((0.64)*sj5);
IkReal x1763=((0.32)*sj5);
IkReal x1764=(cj5*r22);
IkReal x1765=(cj0*sj1);
IkReal x1766=(cj1*r20);
IkReal x1767=(cj1*r21);
IkReal x1768=(npy*x1761);
IkReal x1769=((0.33)*sj0*sj1);
IkReal x1770=((0.33)*x1761);
IkReal x1771=((0.33)*x1760);
IkReal x1772=(r10*x1760);
IkReal x1773=(r11*x1761);
IkReal x1774=((1.0)*x1760);
evalcond[0]=((((-1.0)*px))+(((-1.0)*r01*x1761*x1763))+(((-0.33)*x1765))+((r00*x1760*x1763)));
evalcond[1]=((((-1.0)*x1769))+((x1763*x1772))+(((-1.0)*x1763*x1773))+(((-1.0)*py)));
evalcond[2]=((0.0065)+(((-1.0)*x1762*x1768))+(((-1.0)*pp))+(((-0.64)*pz*x1764))+((npx*x1760*x1762)));
evalcond[3]=((((-1.0)*r21*x1761*x1763))+(((-0.32)*x1764))+((r20*x1760*x1763))+(((-1.0)*pz))+(((-0.33)*cj1)));
evalcond[4]=((((-1.0)*r01*x1765*x1771))+(((-1.0)*npx*x1761))+(((-1.0)*r11*x1760*x1769))+(((-1.0)*x1767*x1771))+(((-1.0)*r00*x1765*x1770))+(((-1.0)*npy*x1774))+(((-1.0)*x1766*x1770))+(((-1.0)*r10*x1761*x1769)));
evalcond[5]=(((x1767*x1770))+x1768+x1763+(((-1.0)*r00*x1765*x1771))+(((-1.0)*npx*x1774))+((r01*x1765*x1770))+(((-1.0)*x1766*x1771))+(((-1.0)*x1769*x1772))+((x1769*x1773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1775=((25.0)*pp);
IkReal x1776=((16.0)*r00);
IkReal x1777=((50.0)*px);
IkReal x1778=((16.0)*r01);
IkReal x1779=((16.5)*cj0*sj1);
IkReal x1780=(cj5*pz*r22);
CheckValue<IkReal> x1781 = IKatan2WithCheck(IkReal((((npx*x1779))+((npx*x1777))+(((-1.0)*r00*x1775))+(((-1.0)*x1776*x1780))+(((0.1625)*r00)))),IkReal((((npy*x1779))+((npy*x1777))+(((-1.0)*x1778*x1780))+(((-1.0)*r01*x1775))+(((0.1625)*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1781.valid){
continue;
}
CheckValue<IkReal> x1782=IKPowWithIntegerCheck(IKsign((((npy*sj5*x1776))+(((-1.0)*npx*sj5*x1778)))),-1);
if(!x1782.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1781.value)+(((1.5707963267949)*(x1782.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1783=IKcos(j6);
IkReal x1784=IKsin(j6);
IkReal x1785=((0.64)*sj5);
IkReal x1786=((0.32)*sj5);
IkReal x1787=(cj5*r22);
IkReal x1788=(cj0*sj1);
IkReal x1789=(cj1*r20);
IkReal x1790=(cj1*r21);
IkReal x1791=(npy*x1784);
IkReal x1792=((0.33)*sj0*sj1);
IkReal x1793=((0.33)*x1784);
IkReal x1794=((0.33)*x1783);
IkReal x1795=(r10*x1783);
IkReal x1796=(r11*x1784);
IkReal x1797=((1.0)*x1783);
evalcond[0]=(((r00*x1783*x1786))+(((-1.0)*r01*x1784*x1786))+(((-0.33)*x1788))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*x1792))+(((-1.0)*py))+(((-1.0)*x1786*x1796))+((x1786*x1795)));
evalcond[2]=((0.0065)+((npx*x1783*x1785))+(((-1.0)*x1785*x1791))+(((-1.0)*pp))+(((-0.64)*pz*x1787)));
evalcond[3]=(((r20*x1783*x1786))+(((-0.32)*x1787))+(((-1.0)*pz))+(((-1.0)*r21*x1784*x1786))+(((-0.33)*cj1)));
evalcond[4]=((((-1.0)*x1790*x1794))+(((-1.0)*r00*x1788*x1793))+(((-1.0)*r01*x1788*x1794))+(((-1.0)*r11*x1783*x1792))+(((-1.0)*x1789*x1793))+(((-1.0)*npy*x1797))+(((-1.0)*r10*x1784*x1792))+(((-1.0)*npx*x1784)));
evalcond[5]=((((-1.0)*x1792*x1795))+x1786+x1791+(((-1.0)*r00*x1788*x1794))+(((-1.0)*x1789*x1794))+((x1792*x1796))+((r01*x1788*x1793))+((x1790*x1793))+(((-1.0)*npx*x1797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1798=((8.25)*sj1);
CheckValue<IkReal> x1799 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj0*x1798))+(((-25.0)*rxp0_2))+((cj0*r10*x1798)))),IkReal(((((-25.0)*rxp1_2))+((cj0*r11*x1798))+(((-1.0)*r01*sj0*x1798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1799.valid){
continue;
}
CheckValue<IkReal> x1800=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x1800.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1799.value)+(((1.5707963267949)*(x1800.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1801=IKcos(j6);
IkReal x1802=IKsin(j6);
IkReal x1803=((0.64)*sj5);
IkReal x1804=((0.32)*sj5);
IkReal x1805=(cj5*r22);
IkReal x1806=(cj0*sj1);
IkReal x1807=(cj1*r20);
IkReal x1808=(cj1*r21);
IkReal x1809=(npy*x1802);
IkReal x1810=((0.33)*sj0*sj1);
IkReal x1811=((0.33)*x1802);
IkReal x1812=((0.33)*x1801);
IkReal x1813=(r10*x1801);
IkReal x1814=(r11*x1802);
IkReal x1815=((1.0)*x1801);
evalcond[0]=(((r00*x1801*x1804))+(((-0.33)*x1806))+(((-1.0)*px))+(((-1.0)*r01*x1802*x1804)));
evalcond[1]=((((-1.0)*x1810))+(((-1.0)*x1804*x1814))+((x1804*x1813))+(((-1.0)*py)));
evalcond[2]=((0.0065)+(((-0.64)*pz*x1805))+(((-1.0)*pp))+((npx*x1801*x1803))+(((-1.0)*x1803*x1809)));
evalcond[3]=((((-1.0)*r21*x1802*x1804))+(((-1.0)*pz))+(((-0.32)*x1805))+((r20*x1801*x1804))+(((-0.33)*cj1)));
evalcond[4]=((((-1.0)*r01*x1806*x1812))+(((-1.0)*r11*x1801*x1810))+(((-1.0)*x1807*x1811))+(((-1.0)*npy*x1815))+(((-1.0)*x1808*x1812))+(((-1.0)*r10*x1802*x1810))+(((-1.0)*r00*x1806*x1811))+(((-1.0)*npx*x1802)));
evalcond[5]=(((r01*x1806*x1811))+(((-1.0)*x1807*x1812))+(((-1.0)*npx*x1815))+(((-1.0)*x1810*x1813))+(((-1.0)*r00*x1806*x1812))+((x1808*x1811))+x1804+x1809+((x1810*x1814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1816=((50.0)*py);
IkReal x1817=((16.0)*r10);
IkReal x1818=((25.0)*pp);
IkReal x1819=((16.0)*r11);
IkReal x1820=(cj5*pz*r22);
IkReal x1821=((16.5)*sj0*sj1);
IkReal x1822=(cj5*px*r02);
CheckValue<IkReal> x1823 = IKatan2WithCheck(IkReal((((npx*x1816))+(((-1.0)*x1817*x1822))+(((-1.0)*x1817*x1820))+(((-1.0)*r10*x1818))+((npx*x1821))+(((0.1625)*r10)))),IkReal(((((-1.0)*x1819*x1820))+(((-1.0)*x1819*x1822))+(((-1.0)*r11*x1818))+((npy*x1816))+((npy*x1821))+(((0.1625)*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1823.valid){
continue;
}
CheckValue<IkReal> x1824=IKPowWithIntegerCheck(IKsign(((((-1.0)*npx*sj5*x1819))+((npy*sj5*x1817)))),-1);
if(!x1824.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1823.value)+(((1.5707963267949)*(x1824.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1825=IKcos(j6);
IkReal x1826=IKsin(j6);
IkReal x1827=((0.64)*sj5);
IkReal x1828=((0.32)*sj5);
IkReal x1829=(cj5*r22);
IkReal x1830=(cj0*sj1);
IkReal x1831=(cj1*r20);
IkReal x1832=(cj1*r21);
IkReal x1833=(cj5*r02);
IkReal x1834=(npy*x1826);
IkReal x1835=((0.33)*sj0*sj1);
IkReal x1836=((0.33)*x1826);
IkReal x1837=((0.33)*x1825);
IkReal x1838=(r10*x1825);
IkReal x1839=(r11*x1826);
IkReal x1840=((1.0)*x1825);
evalcond[0]=((((-1.0)*x1828*x1839))+(((-1.0)*x1835))+(((-1.0)*py))+((x1828*x1838)));
evalcond[1]=(((r20*x1825*x1828))+(((-1.0)*pz))+(((-0.32)*x1829))+(((-1.0)*r21*x1826*x1828))+(((-0.33)*cj1)));
evalcond[2]=((((-0.33)*x1830))+(((-1.0)*px))+((r00*x1825*x1828))+(((-1.0)*r01*x1826*x1828))+(((-0.32)*x1833)));
evalcond[3]=((0.0065)+(((-0.64)*px*x1833))+(((-0.64)*pz*x1829))+((npx*x1825*x1827))+(((-1.0)*pp))+(((-1.0)*x1827*x1834)));
evalcond[4]=((((-1.0)*r10*x1826*x1835))+(((-1.0)*x1832*x1837))+(((-1.0)*r01*x1830*x1837))+(((-1.0)*npy*x1840))+(((-1.0)*r00*x1830*x1836))+(((-1.0)*npx*x1826))+(((-1.0)*r11*x1825*x1835))+(((-1.0)*x1831*x1836)));
evalcond[5]=(((r01*x1830*x1836))+(((-1.0)*npx*x1840))+((x1835*x1839))+(((-1.0)*x1835*x1838))+(((-1.0)*r00*x1830*x1837))+x1828+x1834+((x1832*x1836))+(((-1.0)*x1831*x1837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1841=((8.25)*sj1);
IkReal x1842=((8.0)*cj5*r02);
CheckValue<IkReal> x1843 = IKatan2WithCheck(IkReal(((((-25.0)*rxp0_2))+((cj0*r10*x1841))+((r10*x1842))+(((-1.0)*r00*sj0*x1841)))),IkReal((((cj0*r11*x1841))+(((-1.0)*r01*sj0*x1841))+(((-25.0)*rxp1_2))+((r11*x1842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1843.valid){
continue;
}
CheckValue<IkReal> x1844=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x1844.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1843.value)+(((1.5707963267949)*(x1844.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1845=IKcos(j6);
IkReal x1846=IKsin(j6);
IkReal x1847=((0.64)*sj5);
IkReal x1848=((0.32)*sj5);
IkReal x1849=(cj5*r22);
IkReal x1850=(cj0*sj1);
IkReal x1851=(cj1*r20);
IkReal x1852=(cj1*r21);
IkReal x1853=(cj5*r02);
IkReal x1854=(npy*x1846);
IkReal x1855=((0.33)*sj0*sj1);
IkReal x1856=((0.33)*x1846);
IkReal x1857=((0.33)*x1845);
IkReal x1858=(r10*x1845);
IkReal x1859=(r11*x1846);
IkReal x1860=((1.0)*x1845);
evalcond[0]=((((-1.0)*x1848*x1859))+((x1848*x1858))+(((-1.0)*py))+(((-1.0)*x1855)));
evalcond[1]=(((r20*x1845*x1848))+(((-1.0)*pz))+(((-1.0)*r21*x1846*x1848))+(((-0.32)*x1849))+(((-0.33)*cj1)));
evalcond[2]=(((r00*x1845*x1848))+(((-0.33)*x1850))+(((-1.0)*px))+(((-0.32)*x1853))+(((-1.0)*r01*x1846*x1848)));
evalcond[3]=((0.0065)+((npx*x1845*x1847))+(((-0.64)*pz*x1849))+(((-1.0)*pp))+(((-0.64)*px*x1853))+(((-1.0)*x1847*x1854)));
evalcond[4]=((((-1.0)*r01*x1850*x1857))+(((-1.0)*r11*x1845*x1855))+(((-1.0)*x1852*x1857))+(((-1.0)*npy*x1860))+(((-1.0)*r00*x1850*x1856))+(((-1.0)*x1851*x1856))+(((-1.0)*npx*x1846))+(((-1.0)*r10*x1846*x1855)));
evalcond[5]=(((x1852*x1856))+((r01*x1850*x1856))+(((-1.0)*r00*x1850*x1857))+(((-1.0)*x1851*x1857))+((x1855*x1859))+(((-1.0)*npx*x1860))+x1854+x1848+(((-1.0)*x1855*x1858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1861=((8.25)*cj1);
IkReal x1862=((8.25)*sj0*sj1);
IkReal x1863=((8.0)*cj5*r22);
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal(((((-25.0)*rxp0_0))+((r20*x1862))+(((-1.0)*r10*x1863))+(((-1.0)*r10*x1861)))),IkReal(((((-25.0)*rxp1_0))+(((-1.0)*r11*x1861))+(((-1.0)*r11*x1863))+((r21*x1862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
CheckValue<IkReal> x1865=IKPowWithIntegerCheck(IKsign((r02*sj5)),-1);
if(!x1865.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1864.value)+(((1.5707963267949)*(x1865.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1866=IKcos(j6);
IkReal x1867=IKsin(j6);
IkReal x1868=((0.64)*sj5);
IkReal x1869=((0.32)*sj5);
IkReal x1870=(cj5*r22);
IkReal x1871=(cj0*sj1);
IkReal x1872=(cj1*r20);
IkReal x1873=(cj1*r21);
IkReal x1874=(cj5*r02);
IkReal x1875=(npy*x1867);
IkReal x1876=((0.33)*sj0*sj1);
IkReal x1877=((0.33)*x1867);
IkReal x1878=((0.33)*x1866);
IkReal x1879=(r10*x1866);
IkReal x1880=(r11*x1867);
IkReal x1881=((1.0)*x1866);
evalcond[0]=((((-1.0)*x1876))+(((-1.0)*x1869*x1880))+(((-1.0)*py))+((x1869*x1879)));
evalcond[1]=((((-1.0)*pz))+(((-1.0)*r21*x1867*x1869))+((r20*x1866*x1869))+(((-0.32)*x1870))+(((-0.33)*cj1)));
evalcond[2]=(((r00*x1866*x1869))+(((-1.0)*px))+(((-0.33)*x1871))+(((-1.0)*r01*x1867*x1869))+(((-0.32)*x1874)));
evalcond[3]=((0.0065)+(((-1.0)*x1868*x1875))+(((-0.64)*pz*x1870))+(((-1.0)*pp))+((npx*x1866*x1868))+(((-0.64)*px*x1874)));
evalcond[4]=((((-1.0)*x1873*x1878))+(((-1.0)*x1872*x1877))+(((-1.0)*r00*x1871*x1877))+(((-1.0)*npx*x1867))+(((-1.0)*r10*x1867*x1876))+(((-1.0)*r01*x1871*x1878))+(((-1.0)*npy*x1881))+(((-1.0)*r11*x1866*x1876)));
evalcond[5]=((((-1.0)*x1872*x1878))+(((-1.0)*x1876*x1879))+((x1876*x1880))+(((-1.0)*r00*x1871*x1878))+(((-1.0)*npx*x1881))+x1869+x1875+((r01*x1871*x1877))+((x1873*x1877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1882=((16.0)*cj5);
IkReal x1883=((25.0)*pp);
IkReal x1884=((16.0)*sj5);
IkReal x1885=((50.0)*px);
IkReal x1886=((16.5)*cj0*sj1);
CheckValue<IkReal> x1887 = IKatan2WithCheck(IkReal((((npx*r02*x1882))+(((-1.0)*npz*r00*x1882))+(((-1.0)*r00*x1883))+(((0.1625)*r00))+((npx*x1885))+((npx*x1886)))),IkReal(((((-1.0)*npz*r01*x1882))+((npy*r02*x1882))+((npy*x1885))+((npy*x1886))+(((-1.0)*r01*x1883))+(((0.1625)*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1887.valid){
continue;
}
CheckValue<IkReal> x1888=IKPowWithIntegerCheck(IKsign(((((-1.0)*npx*r01*x1884))+((npy*r00*x1884)))),-1);
if(!x1888.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1887.value)+(((1.5707963267949)*(x1888.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1889=IKcos(j6);
IkReal x1890=IKsin(j6);
IkReal x1891=((0.64)*sj5);
IkReal x1892=((0.32)*sj5);
IkReal x1893=((0.32)*cj5);
IkReal x1894=(cj0*sj1);
IkReal x1895=(cj1*r20);
IkReal x1896=(cj1*r21);
IkReal x1897=(npy*x1890);
IkReal x1898=((0.33)*sj0*sj1);
IkReal x1899=((0.33)*x1890);
IkReal x1900=((0.33)*x1889);
IkReal x1901=(r10*x1889);
IkReal x1902=(r11*x1890);
IkReal x1903=((1.0)*x1889);
evalcond[0]=((0.0065)+(((-0.64)*cj5*npz))+(((-1.0)*x1891*x1897))+((npx*x1889*x1891))+(((-1.0)*pp)));
evalcond[1]=((((-1.0)*r21*x1890*x1892))+((r20*x1889*x1892))+(((-1.0)*r22*x1893))+(((-1.0)*pz))+(((-0.33)*cj1)));
evalcond[2]=((((-1.0)*r01*x1890*x1892))+(((-1.0)*r02*x1893))+((r00*x1889*x1892))+(((-1.0)*px))+(((-0.33)*x1894)));
evalcond[3]=(((x1892*x1901))+(((-1.0)*x1892*x1902))+(((-1.0)*py))+(((-1.0)*r12*x1893))+(((-1.0)*x1898)));
evalcond[4]=((((-1.0)*r10*x1890*x1898))+(((-1.0)*r01*x1894*x1900))+(((-1.0)*r00*x1894*x1899))+(((-1.0)*npx*x1890))+(((-1.0)*x1895*x1899))+(((-1.0)*npy*x1903))+(((-1.0)*x1896*x1900))+(((-1.0)*r11*x1889*x1898)));
evalcond[5]=((((-1.0)*r00*x1894*x1900))+((r01*x1894*x1899))+((x1896*x1899))+((x1898*x1902))+(((-1.0)*x1898*x1901))+x1897+x1892+(((-1.0)*npx*x1903))+(((-1.0)*x1895*x1900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1904=((16.0)*npx);
IkReal x1905=(cj5*r22);
IkReal x1906=((16.5)*cj1);
IkReal x1907=((50.0)*pz);
IkReal x1908=((25.0)*pp);
IkReal x1909=((16.0)*npy);
IkReal x1910=((16.0)*cj5*npz);
CheckValue<IkReal> x1911=IKPowWithIntegerCheck(IKsign((((r20*sj5*x1909))+(((-1.0)*r21*sj5*x1904)))),-1);
if(!x1911.valid){
continue;
}
CheckValue<IkReal> x1912 = IKatan2WithCheck(IkReal(((((0.1625)*r20))+((npx*x1906))+((npx*x1907))+((x1904*x1905))+(((-1.0)*r20*x1908))+(((-1.0)*r20*x1910)))),IkReal(((((0.1625)*r21))+((x1905*x1909))+(((-1.0)*r21*x1908))+(((-1.0)*r21*x1910))+((npy*x1907))+((npy*x1906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1912.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1911.value)))+(x1912.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1913=IKcos(j6);
IkReal x1914=IKsin(j6);
IkReal x1915=((0.64)*sj5);
IkReal x1916=((0.32)*sj5);
IkReal x1917=((0.32)*cj5);
IkReal x1918=(cj0*sj1);
IkReal x1919=(cj1*r20);
IkReal x1920=(cj1*r21);
IkReal x1921=(npy*x1914);
IkReal x1922=((0.33)*sj0*sj1);
IkReal x1923=((0.33)*x1914);
IkReal x1924=((0.33)*x1913);
IkReal x1925=(r10*x1913);
IkReal x1926=(r11*x1914);
IkReal x1927=((1.0)*x1913);
evalcond[0]=((0.0065)+(((-0.64)*cj5*npz))+((npx*x1913*x1915))+(((-1.0)*x1915*x1921))+(((-1.0)*pp)));
evalcond[1]=((((-1.0)*r22*x1917))+(((-1.0)*pz))+(((-1.0)*r21*x1914*x1916))+((r20*x1913*x1916))+(((-0.33)*cj1)));
evalcond[2]=((((-1.0)*r02*x1917))+((r00*x1913*x1916))+(((-0.33)*x1918))+(((-1.0)*px))+(((-1.0)*r01*x1914*x1916)));
evalcond[3]=((((-1.0)*x1916*x1926))+(((-1.0)*r12*x1917))+(((-1.0)*x1922))+(((-1.0)*py))+((x1916*x1925)));
evalcond[4]=((((-1.0)*npy*x1927))+(((-1.0)*r01*x1918*x1924))+(((-1.0)*r10*x1914*x1922))+(((-1.0)*x1919*x1923))+(((-1.0)*npx*x1914))+(((-1.0)*r11*x1913*x1922))+(((-1.0)*x1920*x1924))+(((-1.0)*r00*x1918*x1923)));
evalcond[5]=((((-1.0)*npx*x1927))+((r01*x1918*x1923))+(((-1.0)*x1922*x1925))+x1921+x1916+(((-1.0)*x1919*x1924))+((x1920*x1923))+(((-1.0)*r00*x1918*x1924))+((x1922*x1926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1928=((8.0)*cj5);
IkReal x1929=((8.25)*cj1);
IkReal x1930=((8.25)*cj0*sj1);
CheckValue<IkReal> x1931 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1928))+(((-1.0)*r00*x1929))+(((25.0)*rxp0_1))+((r20*x1930)))),IkReal(((((25.0)*rxp1_1))+(((-1.0)*r01*x1929))+((r21*x1930))+((r10*x1928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1931.valid){
continue;
}
CheckValue<IkReal> x1932=IKPowWithIntegerCheck(IKsign((r12*sj5)),-1);
if(!x1932.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1931.value)+(((-1.5707963267949)*(x1932.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1933=IKcos(j6);
IkReal x1934=IKsin(j6);
IkReal x1935=((0.64)*sj5);
IkReal x1936=((0.32)*sj5);
IkReal x1937=((0.32)*cj5);
IkReal x1938=(cj0*sj1);
IkReal x1939=(cj1*r20);
IkReal x1940=(cj1*r21);
IkReal x1941=(npy*x1934);
IkReal x1942=((0.33)*sj0*sj1);
IkReal x1943=((0.33)*x1934);
IkReal x1944=((0.33)*x1933);
IkReal x1945=(r10*x1933);
IkReal x1946=(r11*x1934);
IkReal x1947=((1.0)*x1933);
evalcond[0]=((0.0065)+(((-0.64)*cj5*npz))+((npx*x1933*x1935))+(((-1.0)*pp))+(((-1.0)*x1935*x1941)));
evalcond[1]=(((r20*x1933*x1936))+(((-1.0)*r22*x1937))+(((-1.0)*pz))+(((-1.0)*r21*x1934*x1936))+(((-0.33)*cj1)));
evalcond[2]=((((-1.0)*r01*x1934*x1936))+(((-1.0)*px))+(((-0.33)*x1938))+((r00*x1933*x1936))+(((-1.0)*r02*x1937)));
evalcond[3]=((((-1.0)*x1942))+((x1936*x1945))+(((-1.0)*r12*x1937))+(((-1.0)*py))+(((-1.0)*x1936*x1946)));
evalcond[4]=((((-1.0)*r11*x1933*x1942))+(((-1.0)*r10*x1934*x1942))+(((-1.0)*r01*x1938*x1944))+(((-1.0)*x1940*x1944))+(((-1.0)*npy*x1947))+(((-1.0)*r00*x1938*x1943))+(((-1.0)*npx*x1934))+(((-1.0)*x1939*x1943)));
evalcond[5]=((((-1.0)*npx*x1947))+(((-1.0)*x1942*x1945))+(((-1.0)*r00*x1938*x1944))+((x1940*x1943))+x1936+x1941+((x1942*x1946))+(((-1.0)*x1939*x1944))+((r01*x1938*x1943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x266=(r11*sj0);
IkReal x267=((1.0)*sj6);
IkReal x268=((1.0)*sj5);
IkReal x269=((1.0)*cj1);
IkReal x270=((1.0)*sj1);
IkReal x271=(r10*sj0);
IkReal x272=((1.0)*cj5);
IkReal x273=(cj0*cj1);
IkReal x274=(cj0*r02);
IkReal x275=(r12*sj0);
IkReal x276=((1.0)*cj0);
IkReal x277=(((r01*sj0))+(((-1.0)*r11*x276)));
IkReal x278=(((r00*sj0))+(((-1.0)*r10*x276)));
IkReal x279=((((-1.0)*r02*sj0))+((cj0*r12)));
IkReal x280=(((cj1*x271))+((r00*x273))+(((-1.0)*r20*x270)));
IkReal x281=(((cj1*x266))+((r01*x273))+(((-1.0)*r21*x270)));
IkReal x282=(((cj1*r22))+((sj1*x275))+((sj1*x274)));
IkReal x283=(((r22*sj1))+(((-1.0)*x269*x275))+(((-1.0)*x269*x274)));
IkReal x284=(((cj6*x278))+(((-1.0)*x267*x277)));
IkReal x285=((((-1.0)*cj0*r00*x270))+(((-1.0)*x270*x271))+(((-1.0)*r20*x269)));
IkReal x286=((((-1.0)*cj0*r01*x270))+(((-1.0)*x266*x270))+(((-1.0)*r21*x269)));
IkReal x287=((((-1.0)*x267*x281))+((cj6*x280)));
IkReal x288=((((-1.0)*x267*x286))+((cj6*x285)));
new_r00=((((-1.0)*x268*x283))+((cj5*x287)));
new_r01=(((sj6*x280))+((cj6*x281)));
new_r02=((((-1.0)*x268*x287))+(((-1.0)*x272*x283)));
new_r10=((((-1.0)*x268*x279))+((cj5*x284)));
new_r11=(((sj6*x278))+((cj6*x277)));
new_r12=((((-1.0)*x272*x279))+(((-1.0)*x268*x284)));
new_r20=((((-1.0)*x268*x282))+((cj5*x288)));
new_r21=(((sj6*x285))+((cj6*x286)));
new_r22=((((-1.0)*x268*x288))+(((-1.0)*x272*x282)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((-1.0)*new_r22);
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j2eval[3];
j2eval[0]=sj3;
j2eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
j4eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=new_r12;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j4mul = 1;
j4=0;
j2mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].fmul = j2mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(1);
vfree[0] = 4;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j4mul = 1;
j4=0;
j2mul=-1.0;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].fmul = j2mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(1);
vfree[0] = 4;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x289=new_r22*new_r22;
IkReal x290=((16.0)*new_r10);
IkReal x291=((16.0)*new_r01);
IkReal x292=((16.0)*new_r22);
IkReal x293=((8.0)*new_r11);
IkReal x294=((8.0)*new_r00);
IkReal x295=(x289*x290);
IkReal x296=(x289*x291);
j2eval[0]=((IKabs(((((-16.0)*new_r11*x289))+(((32.0)*new_r11))+(((-1.0)*new_r00*x292)))))+(IKabs(((((-1.0)*x295))+x290)))+(IKabs(((((-1.0)*x296))+x291)))+(IKabs(((((-1.0)*x290))+x295)))+(IKabs(((((-1.0)*x291))+x296)))+(IKabs((((x289*x293))+(((-1.0)*new_r22*x294)))))+(IKabs(((((-1.0)*x294))+((new_r22*x293)))))+(IKabs((((new_r11*x292))+(((16.0)*new_r00))+(((-32.0)*new_r00*x289))))));
if( IKabs(j2eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j2, j4]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j2evalpoly[1];
IkReal x297=new_r22*new_r22;
IkReal x298=((16.0)*new_r10);
IkReal x299=(new_r11*new_r22);
IkReal x300=(x297*x298);
IkReal x301=((((-8.0)*new_r00))+(((8.0)*x299)));
op[0]=x301;
op[1]=(x298+(((-1.0)*x300)));
op[2]=((((-32.0)*new_r00*x297))+(((16.0)*new_r00))+(((16.0)*x299)));
op[3]=((((-1.0)*x298))+x300);
op[4]=x301;
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

IkReal x302=((16.0)*new_r01);
IkReal x303=new_r22*new_r22;
IkReal x304=(new_r00*new_r22);
IkReal x305=((8.0)*x304);
IkReal x306=(new_r11*x303);
IkReal x307=(x302*x303);
IkReal x308=((8.0)*x306);
j2evalpoly[0]=(((htj2*((x302+(((-1.0)*x307))))))+x308+(((htj2*htj2)*(((((32.0)*new_r11))+(((-16.0)*x304))+(((-16.0)*x306))))))+(((-1.0)*x305))+(((htj2*htj2*htj2*htj2)*((x308+(((-1.0)*x305))))))+(((htj2*htj2*htj2)*((x307+(((-1.0)*x302)))))));
if( IKabs(j2evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j4eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x309=cj2*cj2;
IkReal x310=new_r22*new_r22;
IkReal x311=(new_r22*sj2);
IkReal x312=((1.0)*new_r10);
IkReal x313=(x309+x310+(((-1.0)*x309*x310)));
j4eval[0]=x313;
j4eval[1]=((IKabs((((new_r11*x311))+(((-1.0)*cj2*x312)))))+(IKabs(((((-1.0)*cj2*new_r11))+(((-1.0)*x311*x312))))));
j4eval[2]=IKsign(x313);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=new_r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r00, new_r01);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x314=IKcos(j4);
IkReal x315=IKsin(j4);
IkReal x316=((1.0)*new_r22);
evalcond[0]=(x315+(((-1.0)*new_r00)));
evalcond[1]=(x314+(((-1.0)*new_r01)));
evalcond[2]=(new_r10+((new_r22*x314)));
evalcond[3]=((((-1.0)*x315*x316))+new_r11);
evalcond[4]=((((-1.0)*new_r11*x316))+x315);
evalcond[5]=((((-1.0)*new_r10*x316))+(((-1.0)*x314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x317=IKsin(j4);
IkReal x318=IKcos(j4);
evalcond[0]=(x317+new_r00);
evalcond[1]=(x318+new_r01);
evalcond[2]=(x317+((new_r11*new_r22)));
evalcond[3]=((((-1.0)*new_r10))+((new_r22*x318)));
evalcond[4]=(((new_r10*new_r22))+(((-1.0)*x318)));
evalcond[5]=((((-1.0)*new_r22*x317))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x319=new_r22*new_r22;
CheckValue<IkReal> x320=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x319))),-1);
if(!x320.valid){
continue;
}
if((((-1.0)*x319*(x320.value))) < -0.00001)
continue;
IkReal gconst62=IKsqrt(((-1.0)*x319*(x320.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj2+(((-1.0)*gconst62)))))+(IKabs(((-1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if((((1.0)+(((-1.0)*(gconst62*gconst62))))) < -0.00001)
continue;
IkReal x321=IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62)))));
if( IKabs((((new_r00*x321))+(((-1.0)*gconst62*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*x321))+(((-1.0)*gconst62*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*x321))+(((-1.0)*gconst62*new_r10))))+IKsqr((((new_r01*x321))+(((-1.0)*gconst62*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((new_r00*x321))+(((-1.0)*gconst62*new_r10))), (((new_r01*x321))+(((-1.0)*gconst62*new_r11))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x322=IKcos(j4);
IkReal x323=IKsin(j4);
IkReal x324=((1.0)*new_r22);
IkReal x325=(gconst62*new_r00);
IkReal x326=(gconst62*new_r01);
IkReal x327=(new_r22*x322);
IkReal x328=(gconst62*x323);
IkReal x329=x321;
IkReal x330=((1.0)*x329);
evalcond[0]=(((gconst62*new_r10))+x323+(((-1.0)*new_r00*x330)));
evalcond[1]=(((gconst62*new_r11))+x322+(((-1.0)*new_r01*x330)));
evalcond[2]=(x325+x327+((new_r10*x329)));
evalcond[3]=((((-1.0)*x323*x324))+x326+((new_r11*x329)));
evalcond[4]=(((x327*x329))+x328+new_r10);
evalcond[5]=((((-1.0)*x323*x324*x329))+((gconst62*x322))+new_r11);
evalcond[6]=(((gconst62*x327))+(((-1.0)*x323*x330))+new_r00);
evalcond[7]=(x323+(((-1.0)*x324*x326))+(((-1.0)*new_r11*x324*x329)));
evalcond[8]=((((-1.0)*x322*x330))+new_r01+(((-1.0)*x324*x328)));
evalcond[9]=((((-1.0)*x322))+(((-1.0)*x324*x325))+(((-1.0)*new_r10*x324*x329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x331=new_r22*new_r22;
CheckValue<IkReal> x332=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x331))),-1);
if(!x332.valid){
continue;
}
if((((-1.0)*x331*(x332.value))) < -0.00001)
continue;
IkReal gconst62=IKsqrt(((-1.0)*x331*(x332.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj2+(((-1.0)*gconst62)))))+(IKabs(((1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if((((1.0)+(((-1.0)*(gconst62*gconst62))))) < -0.00001)
continue;
IkReal x333=IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62)))));
if( IKabs(((((-1.0)*gconst62*new_r10))+(((-1.0)*new_r00*x333)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst62*new_r11))+(((-1.0)*new_r01*x333)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst62*new_r10))+(((-1.0)*new_r00*x333))))+IKsqr(((((-1.0)*gconst62*new_r11))+(((-1.0)*new_r01*x333))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*gconst62*new_r10))+(((-1.0)*new_r00*x333))), ((((-1.0)*gconst62*new_r11))+(((-1.0)*new_r01*x333))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x334=IKsin(j4);
IkReal x335=IKcos(j4);
IkReal x336=((1.0)*new_r22);
IkReal x337=(gconst62*new_r00);
IkReal x338=(gconst62*new_r01);
IkReal x339=(gconst62*x334);
IkReal x340=(gconst62*x335);
IkReal x341=((1.0)*x335);
IkReal x342=x333;
IkReal x343=(new_r22*x342);
IkReal x344=((1.0)*x342);
evalcond[0]=(((gconst62*new_r10))+((new_r00*x342))+x334);
evalcond[1]=(((gconst62*new_r11))+((new_r01*x342))+x335);
evalcond[2]=(x340+new_r11+((x334*x343)));
evalcond[3]=((((-1.0)*new_r10*x344))+((new_r22*x335))+x337);
evalcond[4]=(((new_r22*x340))+new_r00+((x334*x342)));
evalcond[5]=(((new_r11*x343))+x334+(((-1.0)*x336*x338)));
evalcond[6]=((((-1.0)*new_r11*x344))+x338+(((-1.0)*x334*x336)));
evalcond[7]=(((x335*x342))+new_r01+(((-1.0)*x336*x339)));
evalcond[8]=((((-1.0)*x335*x336*x342))+x339+new_r10);
evalcond[9]=(((new_r10*x343))+(((-1.0)*x341))+(((-1.0)*x336*x337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x345=new_r22*new_r22;
CheckValue<IkReal> x346=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x345))),-1);
if(!x346.valid){
continue;
}
if((((-1.0)*x345*(x346.value))) < -0.00001)
continue;
IkReal gconst63=((-1.0)*(IKsqrt(((-1.0)*x345*(x346.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj2+(((-1.0)*gconst63)))))+(IKabs(((-1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if((((1.0)+(((-1.0)*(gconst63*gconst63))))) < -0.00001)
continue;
IkReal x347=IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63)))));
if( IKabs((((new_r00*x347))+(((-1.0)*gconst63*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*x347))+(((-1.0)*gconst63*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*x347))+(((-1.0)*gconst63*new_r10))))+IKsqr((((new_r01*x347))+(((-1.0)*gconst63*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((new_r00*x347))+(((-1.0)*gconst63*new_r10))), (((new_r01*x347))+(((-1.0)*gconst63*new_r11))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x348=IKcos(j4);
IkReal x349=IKsin(j4);
IkReal x350=(gconst63*new_r01);
IkReal x351=((1.0)*new_r22);
IkReal x352=(gconst63*new_r00);
IkReal x353=(gconst63*x348);
IkReal x354=(new_r22*x348);
IkReal x355=(gconst63*x349);
IkReal x356=x347;
IkReal x357=((1.0)*x356);
IkReal x358=(x351*x356);
evalcond[0]=(((gconst63*new_r10))+x349+(((-1.0)*new_r00*x357)));
evalcond[1]=(((gconst63*new_r11))+x348+(((-1.0)*new_r01*x357)));
evalcond[2]=(x352+x354+((new_r10*x356)));
evalcond[3]=((((-1.0)*x349*x351))+x350+((new_r11*x356)));
evalcond[4]=(x355+((x354*x356))+new_r10);
evalcond[5]=((((-1.0)*x349*x358))+x353+new_r11);
evalcond[6]=(((new_r22*x353))+(((-1.0)*x349*x357))+new_r00);
evalcond[7]=(x349+(((-1.0)*new_r11*x358))+(((-1.0)*x350*x351)));
evalcond[8]=((((-1.0)*x348*x357))+(((-1.0)*x351*x355))+new_r01);
evalcond[9]=((((-1.0)*x351*x352))+(((-1.0)*new_r10*x358))+(((-1.0)*x348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x359=new_r22*new_r22;
CheckValue<IkReal> x360=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x359))),-1);
if(!x360.valid){
continue;
}
if((((-1.0)*x359*(x360.value))) < -0.00001)
continue;
IkReal gconst63=((-1.0)*(IKsqrt(((-1.0)*x359*(x360.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj2+(((-1.0)*gconst63)))))+(IKabs(((1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if((((1.0)+(((-1.0)*(gconst63*gconst63))))) < -0.00001)
continue;
IkReal x361=IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63)))));
if( IKabs(((((-1.0)*new_r00*x361))+(((-1.0)*gconst63*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst63*new_r11))+(((-1.0)*new_r01*x361)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x361))+(((-1.0)*gconst63*new_r10))))+IKsqr(((((-1.0)*gconst63*new_r11))+(((-1.0)*new_r01*x361))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*new_r00*x361))+(((-1.0)*gconst63*new_r10))), ((((-1.0)*gconst63*new_r11))+(((-1.0)*new_r01*x361))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x362=IKcos(j4);
IkReal x363=IKsin(j4);
IkReal x364=(gconst63*new_r01);
IkReal x365=((1.0)*new_r22);
IkReal x366=(gconst63*new_r00);
IkReal x367=(gconst63*x362);
IkReal x368=(gconst63*x363);
IkReal x369=x361;
IkReal x370=(new_r10*x369);
IkReal x371=(new_r22*x369);
IkReal x372=(x362*x369);
evalcond[0]=(((gconst63*new_r10))+((new_r00*x369))+x363);
evalcond[1]=(((gconst63*new_r11))+x362+((new_r01*x369)));
evalcond[2]=(x367+new_r11+((x363*x371)));
evalcond[3]=((((-1.0)*x370))+((new_r22*x362))+x366);
evalcond[4]=(((new_r22*x367))+new_r00+((x363*x369)));
evalcond[5]=(x363+(((-1.0)*x364*x365))+((new_r11*x371)));
evalcond[6]=((((-1.0)*x363*x365))+(((-1.0)*new_r11*x369))+x364);
evalcond[7]=(x372+new_r01+(((-1.0)*x365*x368)));
evalcond[8]=(x368+new_r10+(((-1.0)*x365*x372)));
evalcond[9]=((((-1.0)*x362))+(((-1.0)*x365*x366))+((new_r22*x370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x373=(new_r01*new_r22);
IkReal x374=(cj2*new_r11);
CheckValue<IkReal> x375=IKPowWithIntegerCheck(cj2,-1);
if(!x375.valid){
continue;
}
if( IKabs(((x375.value)*((((new_r22*sj2*x374))+(((-1.0)*x373))+((x373*(cj2*cj2)))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x374))+((new_r01*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x375.value)*((((new_r22*sj2*x374))+(((-1.0)*x373))+((x373*(cj2*cj2)))+(((-1.0)*new_r10))))))+IKsqr(((((-1.0)*x374))+((new_r01*sj2))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x375.value)*((((new_r22*sj2*x374))+(((-1.0)*x373))+((x373*(cj2*cj2)))+(((-1.0)*new_r10))))), ((((-1.0)*x374))+((new_r01*sj2))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x376=IKcos(j4);
IkReal x377=IKsin(j4);
IkReal x378=(cj2*new_r01);
IkReal x379=(new_r10*sj2);
IkReal x380=((1.0)*new_r22);
IkReal x381=((1.0)*sj2);
IkReal x382=(new_r11*sj2);
IkReal x383=(cj2*new_r00);
IkReal x384=(cj2*x377);
IkReal x385=(new_r22*x376);
evalcond[0]=((((-1.0)*new_r00*x381))+x377+((cj2*new_r10)));
evalcond[1]=((((-1.0)*new_r01*x381))+x376+((cj2*new_r11)));
evalcond[2]=(x385+x383+x379);
evalcond[3]=(x382+x378+(((-1.0)*x377*x380)));
evalcond[4]=(x384+new_r10+((sj2*x385)));
evalcond[5]=(new_r11+((cj2*x376))+(((-1.0)*sj2*x377*x380)));
evalcond[6]=(((cj2*x385))+new_r00+(((-1.0)*x377*x381)));
evalcond[7]=((((-1.0)*x380*x382))+x377+(((-1.0)*x378*x380)));
evalcond[8]=((((-1.0)*x380*x384))+(((-1.0)*x376*x381))+new_r01);
evalcond[9]=((((-1.0)*x376))+(((-1.0)*x380*x383))+(((-1.0)*x379*x380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x386=((1.0)*cj2);
CheckValue<IkReal> x387=IKPowWithIntegerCheck(new_r22,-1);
if(!x387.valid){
continue;
}
if( IKabs(((((-1.0)*new_r10*x386))+((new_r00*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x387.value)*(((((-1.0)*new_r00*x386))+(((-1.0)*new_r10*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r10*x386))+((new_r00*sj2))))+IKsqr(((x387.value)*(((((-1.0)*new_r00*x386))+(((-1.0)*new_r10*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*new_r10*x386))+((new_r00*sj2))), ((x387.value)*(((((-1.0)*new_r00*x386))+(((-1.0)*new_r10*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x388=IKcos(j4);
IkReal x389=IKsin(j4);
IkReal x390=(cj2*new_r01);
IkReal x391=(new_r10*sj2);
IkReal x392=((1.0)*new_r22);
IkReal x393=((1.0)*sj2);
IkReal x394=(new_r11*sj2);
IkReal x395=(cj2*new_r00);
IkReal x396=(cj2*x389);
IkReal x397=(new_r22*x388);
evalcond[0]=(x389+((cj2*new_r10))+(((-1.0)*new_r00*x393)));
evalcond[1]=((((-1.0)*new_r01*x393))+x388+((cj2*new_r11)));
evalcond[2]=(x395+x397+x391);
evalcond[3]=((((-1.0)*x389*x392))+x394+x390);
evalcond[4]=(x396+((sj2*x397))+new_r10);
evalcond[5]=(((cj2*x388))+(((-1.0)*sj2*x389*x392))+new_r11);
evalcond[6]=((((-1.0)*x389*x393))+((cj2*x397))+new_r00);
evalcond[7]=(x389+(((-1.0)*x390*x392))+(((-1.0)*x392*x394)));
evalcond[8]=((((-1.0)*x388*x393))+new_r01+(((-1.0)*x392*x396)));
evalcond[9]=((((-1.0)*x391*x392))+(((-1.0)*x388))+(((-1.0)*x392*x395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x398=cj2*cj2;
IkReal x399=new_r22*new_r22;
IkReal x400=(new_r22*sj2);
IkReal x401=((1.0)*cj2);
CheckValue<IkReal> x402 = IKatan2WithCheck(IkReal((((new_r11*x400))+(((-1.0)*new_r10*x401)))),IkReal(((((-1.0)*new_r10*x400))+(((-1.0)*new_r11*x401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x402.valid){
continue;
}
CheckValue<IkReal> x403=IKPowWithIntegerCheck(IKsign(((((-1.0)*x398*x399))+x399+x398)),-1);
if(!x403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x402.value)+(((1.5707963267949)*(x403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x404=IKcos(j4);
IkReal x405=IKsin(j4);
IkReal x406=(cj2*new_r01);
IkReal x407=(new_r10*sj2);
IkReal x408=((1.0)*new_r22);
IkReal x409=((1.0)*sj2);
IkReal x410=(new_r11*sj2);
IkReal x411=(cj2*new_r00);
IkReal x412=(cj2*x405);
IkReal x413=(new_r22*x404);
evalcond[0]=(x405+((cj2*new_r10))+(((-1.0)*new_r00*x409)));
evalcond[1]=(x404+((cj2*new_r11))+(((-1.0)*new_r01*x409)));
evalcond[2]=(x407+x413+x411);
evalcond[3]=(x406+x410+(((-1.0)*x405*x408)));
evalcond[4]=(((sj2*x413))+x412+new_r10);
evalcond[5]=((((-1.0)*sj2*x405*x408))+new_r11+((cj2*x404)));
evalcond[6]=(new_r00+(((-1.0)*x405*x409))+((cj2*x413)));
evalcond[7]=((((-1.0)*x406*x408))+x405+(((-1.0)*x408*x410)));
evalcond[8]=((((-1.0)*x404*x409))+new_r01+(((-1.0)*x408*x412)));
evalcond[9]=((((-1.0)*x407*x408))+(((-1.0)*x408*x411))+(((-1.0)*x404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x415=IKPowWithIntegerCheck(sj3,-1);
if(!x415.valid){
continue;
}
IkReal x414=x415.value;
CheckValue<IkReal> x416=IKPowWithIntegerCheck(new_r12,-1);
if(!x416.valid){
continue;
}
if( IKabs((x414*(x416.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x414)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x414*(x416.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj3*cj3)))))))+IKsqr((new_r02*x414))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x414*(x416.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj3*cj3)))))), (new_r02*x414));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x417=IKcos(j2);
IkReal x418=IKsin(j2);
IkReal x419=((1.0)*sj3);
IkReal x420=(new_r02*x417);
IkReal x421=(new_r12*x418);
IkReal x422=(x418*x419);
evalcond[0]=((((-1.0)*x417*x419))+new_r02);
evalcond[1]=((((-1.0)*x422))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x418))+((new_r12*x417)));
evalcond[3]=(x421+x420+(((-1.0)*x419)));
evalcond[4]=(((new_r22*sj3))+((cj3*x420))+((cj3*x421)));
evalcond[5]=((((-1.0)*new_r00*x417*x419))+(((-1.0)*new_r10*x422))+((cj3*new_r20)));
evalcond[6]=((((-1.0)*new_r11*x422))+((cj3*new_r21))+(((-1.0)*new_r01*x417*x419)));
evalcond[7]=((1.0)+(((-1.0)*x419*x421))+(((-1.0)*x419*x420))+((cj3*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
j4eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x423=((1.0)*cj2);
if( IKabs(((((-1.0)*new_r11*sj2))+(((-1.0)*new_r01*x423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj2))+(((-1.0)*new_r11*x423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj2))+(((-1.0)*new_r01*x423))))+IKsqr((((new_r01*sj2))+(((-1.0)*new_r11*x423))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*new_r11*sj2))+(((-1.0)*new_r01*x423))), (((new_r01*sj2))+(((-1.0)*new_r11*x423))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x424=IKsin(j4);
IkReal x425=IKcos(j4);
IkReal x426=((1.0)*sj2);
IkReal x427=(cj2*x424);
IkReal x428=(cj2*x425);
IkReal x429=(x425*x426);
evalcond[0]=(((new_r11*sj2))+x424+((cj2*new_r01)));
evalcond[1]=((((-1.0)*new_r00*x426))+x424+((cj2*new_r10)));
evalcond[2]=(x425+((cj2*new_r11))+(((-1.0)*new_r01*x426)));
evalcond[3]=(x428+new_r11+((sj2*x424)));
evalcond[4]=((((-1.0)*x425))+((new_r10*sj2))+((cj2*new_r00)));
evalcond[5]=((((-1.0)*x429))+x427+new_r01);
evalcond[6]=((((-1.0)*x429))+x427+new_r10);
evalcond[7]=((((-1.0)*x428))+(((-1.0)*x424*x426))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x430=((1.0)*new_r10);
if( IKabs(((((-1.0)*cj2*x430))+((new_r11*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj2*new_r11))+(((-1.0)*sj2*x430)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj2*x430))+((new_r11*sj2))))+IKsqr(((((-1.0)*cj2*new_r11))+(((-1.0)*sj2*x430))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj2*x430))+((new_r11*sj2))), ((((-1.0)*cj2*new_r11))+(((-1.0)*sj2*x430))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x431=IKcos(j4);
IkReal x432=IKsin(j4);
IkReal x433=((1.0)*sj2);
IkReal x434=(cj2*x431);
IkReal x435=((1.0)*x432);
IkReal x436=(x432*x433);
evalcond[0]=(((new_r10*sj2))+x431+((cj2*new_r00)));
evalcond[1]=((((-1.0)*new_r00*x433))+x432+((cj2*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x433))+x431+((cj2*new_r11)));
evalcond[3]=((((-1.0)*x435))+((new_r11*sj2))+((cj2*new_r01)));
evalcond[4]=(((sj2*x431))+((cj2*x432))+new_r10);
evalcond[5]=((((-1.0)*x436))+x434+new_r11);
evalcond[6]=((((-1.0)*x436))+x434+new_r00);
evalcond[7]=((((-1.0)*cj2*x435))+(((-1.0)*x431*x433))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x437=IKsin(j4);
IkReal x438=IKcos(j4);
IkReal x439=((1.0)*x438);
evalcond[0]=(x437+new_r10);
evalcond[1]=(x438+new_r11);
evalcond[2]=(((sj3*x437))+new_r21);
evalcond[3]=(((cj3*x437))+new_r01);
evalcond[4]=((((-1.0)*sj3*x439))+new_r20);
evalcond[5]=((((-1.0)*cj3*x439))+new_r00);
evalcond[6]=(x437+((cj3*new_r01))+((new_r21*sj3)));
evalcond[7]=((((-1.0)*x439))+((new_r20*sj3))+((cj3*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r10, new_r11);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x440=IKsin(j4);
IkReal x441=IKcos(j4);
IkReal x442=((1.0)*new_r00);
IkReal x443=((1.0)*new_r01);
IkReal x444=((1.0)*x441);
evalcond[0]=(((sj3*x440))+new_r21);
evalcond[1]=(x440+(((-1.0)*new_r10)));
evalcond[2]=(x441+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj3*x444))+new_r20);
evalcond[4]=((((-1.0)*x443))+((cj3*x440)));
evalcond[5]=((((-1.0)*x442))+(((-1.0)*cj3*x444)));
evalcond[6]=((((-1.0)*cj3*x443))+x440+((new_r21*sj3)));
evalcond[7]=((((-1.0)*x444))+(((-1.0)*cj3*x442))+((new_r20*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r00, new_r01);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x445=IKsin(j4);
IkReal x446=IKcos(j4);
IkReal x447=((1.0)*x446);
evalcond[0]=(((sj3*x445))+new_r21);
evalcond[1]=(x445+(((-1.0)*new_r00)));
evalcond[2]=(x446+(((-1.0)*new_r01)));
evalcond[3]=(((cj3*x445))+new_r11);
evalcond[4]=((((-1.0)*sj3*x447))+new_r20);
evalcond[5]=((((-1.0)*cj3*x447))+new_r10);
evalcond[6]=(x445+((cj3*new_r11))+((new_r21*sj3)));
evalcond[7]=((((-1.0)*x447))+((new_r20*sj3))+((cj3*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x448=IKsin(j4);
IkReal x449=IKcos(j4);
IkReal x450=((1.0)*cj3);
IkReal x451=((1.0)*x449);
evalcond[0]=(x448+new_r00);
evalcond[1]=(x449+new_r01);
evalcond[2]=(((sj3*x448))+new_r21);
evalcond[3]=((((-1.0)*sj3*x451))+new_r20);
evalcond[4]=(((cj3*x448))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x449*x450)));
evalcond[6]=((((-1.0)*new_r11*x450))+x448+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+(((-1.0)*new_r10*x450))+(((-1.0)*x451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j4eval[0]=IKabs(new_r22);
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j4]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*new_r22);
op[1]=0;
op[2]=new_r22;
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x453=IKPowWithIntegerCheck(sj3,-1);
if(!x453.valid){
continue;
}
IkReal x452=x453.value;
CheckValue<IkReal> x454=IKPowWithIntegerCheck(sj2,-1);
if(!x454.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x452)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x452*(x454.value)*((((new_r01*sj3))+(((-1.0)*cj2*cj3*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x452))+IKsqr((x452*(x454.value)*((((new_r01*sj3))+(((-1.0)*cj2*cj3*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r21*x452), (x452*(x454.value)*((((new_r01*sj3))+(((-1.0)*cj2*cj3*new_r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x455=IKsin(j4);
IkReal x456=IKcos(j4);
IkReal x457=(cj2*new_r01);
IkReal x458=(new_r10*sj2);
IkReal x459=((1.0)*sj2);
IkReal x460=(cj3*sj2);
IkReal x461=(cj2*new_r00);
IkReal x462=((1.0)*x456);
IkReal x463=(cj2*x455);
evalcond[0]=(((sj3*x455))+new_r21);
evalcond[1]=((((-1.0)*sj3*x462))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x459))+x455+((cj2*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x459))+x456+((cj2*new_r11)));
evalcond[4]=(((new_r11*sj2))+((cj3*x455))+x457);
evalcond[5]=(((x455*x460))+((cj2*x456))+new_r11);
evalcond[6]=(x458+x461+(((-1.0)*cj3*x462)));
evalcond[7]=((((-1.0)*x456*x459))+((cj3*x463))+new_r01);
evalcond[8]=((((-1.0)*cj3*x456*x459))+x463+new_r10);
evalcond[9]=((((-1.0)*x455*x459))+new_r00+(((-1.0)*cj2*cj3*x462)));
evalcond[10]=(((new_r11*x460))+((cj3*x457))+x455+((new_r21*sj3)));
evalcond[11]=(((new_r20*sj3))+(((-1.0)*x462))+((cj3*x458))+((cj3*x461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x465=IKPowWithIntegerCheck(sj3,-1);
if(!x465.valid){
continue;
}
IkReal x464=x465.value;
CheckValue<IkReal> x466=IKPowWithIntegerCheck(cj2,-1);
if(!x466.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x464)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x464*(x466.value)*((((cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x464))+IKsqr((x464*(x466.value)*((((cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r21*x464), (x464*(x466.value)*((((cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x467=IKsin(j4);
IkReal x468=IKcos(j4);
IkReal x469=(cj2*new_r01);
IkReal x470=(new_r10*sj2);
IkReal x471=((1.0)*sj2);
IkReal x472=(cj3*sj2);
IkReal x473=(cj2*new_r00);
IkReal x474=((1.0)*x468);
IkReal x475=(cj2*x467);
evalcond[0]=(((sj3*x467))+new_r21);
evalcond[1]=((((-1.0)*sj3*x474))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x471))+x467+((cj2*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x471))+x468+((cj2*new_r11)));
evalcond[4]=(((new_r11*sj2))+((cj3*x467))+x469);
evalcond[5]=(((cj2*x468))+((x467*x472))+new_r11);
evalcond[6]=(x470+x473+(((-1.0)*cj3*x474)));
evalcond[7]=((((-1.0)*x468*x471))+((cj3*x475))+new_r01);
evalcond[8]=(x475+new_r10+(((-1.0)*cj3*x468*x471)));
evalcond[9]=((((-1.0)*x467*x471))+new_r00+(((-1.0)*cj2*cj3*x474)));
evalcond[10]=(((new_r11*x472))+((cj3*x469))+x467+((new_r21*sj3)));
evalcond[11]=(((new_r20*sj3))+((cj3*x470))+((cj3*x473))+(((-1.0)*x474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x476=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x476.valid){
continue;
}
CheckValue<IkReal> x477 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x476.value)))+(x477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x478=IKsin(j4);
IkReal x479=IKcos(j4);
IkReal x480=(cj2*new_r01);
IkReal x481=(new_r10*sj2);
IkReal x482=((1.0)*sj2);
IkReal x483=(cj3*sj2);
IkReal x484=(cj2*new_r00);
IkReal x485=((1.0)*x479);
IkReal x486=(cj2*x478);
evalcond[0]=(new_r21+((sj3*x478)));
evalcond[1]=((((-1.0)*sj3*x485))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x482))+x478+((cj2*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x482))+x479+((cj2*new_r11)));
evalcond[4]=(((new_r11*sj2))+((cj3*x478))+x480);
evalcond[5]=(((cj2*x479))+((x478*x483))+new_r11);
evalcond[6]=((((-1.0)*cj3*x485))+x481+x484);
evalcond[7]=(((cj3*x486))+(((-1.0)*x479*x482))+new_r01);
evalcond[8]=(x486+new_r10+(((-1.0)*cj3*x479*x482)));
evalcond[9]=((((-1.0)*cj2*cj3*x485))+new_r00+(((-1.0)*x478*x482)));
evalcond[10]=(((cj3*x480))+((new_r11*x483))+x478+((new_r21*sj3)));
evalcond[11]=(((cj3*x481))+((cj3*x484))+((new_r20*sj3))+(((-1.0)*x485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x487=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x487.valid){
continue;
}
CheckValue<IkReal> x488 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x487.value)))+(x488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(new_r21+((sj3*(IKsin(j4)))));
evalcond[1]=((((-1.0)*sj3*(IKcos(j4))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
j2eval[0]=sj3;
j2eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=new_r00;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x489=((1.0)*sj4);
IkReal x490=(((new_r10*new_r11))+((new_r00*new_r01)));
j2eval[0]=x490;
j2eval[1]=((IKabs(((((-1.0)*new_r10*x489))+((new_r01*sj4)))))+(IKabs(((((-1.0)*new_r11*x489))+(((-1.0)*new_r00*x489))))));
j2eval[2]=IKsign(x490);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x491=((1.0)*new_r11);
IkReal x492=((new_r01*new_r01)+(new_r11*new_r11));
j2eval[0]=x492;
j2eval[1]=((IKabs((((cj4*new_r01))+(((-1.0)*sj4*x491)))))+(IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x491))))));
j2eval[2]=IKsign(x492);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x493=(((cj4*new_r01))+((new_r11*sj4)));
j2eval[0]=x493;
j2eval[1]=IKsign(x493);
j2eval[2]=((IKabs(((-1.0)+(new_r01*new_r01)+(cj4*cj4))))+(IKabs(((((-1.0)*cj4*sj4))+(((-1.0)*new_r01*new_r11))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x495 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x495)==0){
continue;
}
IkReal x494=pow(x495,-0.5);
CheckValue<IkReal> x496 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x496.valid){
continue;
}
IkReal gconst50=((-1.0)*(x496.value));
IkReal gconst51=((-1.0)*new_r01*x494);
IkReal gconst52=(new_r11*x494);
CheckValue<IkReal> x497 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x497.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x497.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
CheckValue<IkReal> x500 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x500.valid){
continue;
}
IkReal x498=((-1.0)*(x500.value));
IkReal x499=x494;
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x498;
IkReal gconst50=x498;
IkReal gconst51=((-1.0)*new_r01*x499);
IkReal gconst52=(new_r11*x499);
IkReal x501=new_r01*new_r01;
IkReal x502=(new_r00*new_r01);
IkReal x503=(((new_r10*new_r11))+x502);
IkReal x504=x494;
IkReal x505=(new_r01*x504);
j2eval[0]=x503;
j2eval[1]=((IKabs((((new_r11*x505))+((x502*x504)))))+(IKabs((((new_r10*x505))+(((-1.0)*x501*x504))))));
j2eval[2]=IKsign(x503);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x508 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x508.valid){
continue;
}
IkReal x506=((-1.0)*(x508.value));
IkReal x507=x494;
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x506;
IkReal gconst50=x506;
IkReal gconst51=((-1.0)*new_r01*x507);
IkReal gconst52=(new_r11*x507);
IkReal x509=((new_r01*new_r01)+(new_r11*new_r11));
j2eval[0]=x509;
j2eval[1]=IKsign(x509);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x512 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x512.valid){
continue;
}
IkReal x510=((-1.0)*(x512.value));
IkReal x511=x494;
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x510;
IkReal gconst50=x510;
IkReal gconst51=((-1.0)*new_r01*x511);
IkReal gconst52=(new_r11*x511);
IkReal x513=new_r01*new_r01;
IkReal x514=new_r11*new_r11;
IkReal x515=((1.0)*x513);
CheckValue<IkReal> x521=IKPowWithIntegerCheck((x514+x513),-1);
if(!x521.valid){
continue;
}
IkReal x516=x521.value;
CheckValue<IkReal> x522=IKPowWithIntegerCheck(((((-1.0)*x514))+(((-1.0)*x515))),-1);
if(!x522.valid){
continue;
}
IkReal x517=x522.value;
IkReal x518=((1.0)*x517);
IkReal x519=(new_r11*x518);
IkReal x520=(new_r01*x518);
j2eval[0]=((IKabs((((x516*(x514*x514)))+((x513*x514*x516))+(((-1.0)*x515*x516)))))+(IKabs(((((-1.0)*x519*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x519*(new_r11*new_r11)))+(((-1.0)*new_r01*x519))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x524 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x524.valid){
continue;
}
IkReal x523=((-1.0)*(x524.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x523;
new_r11=0;
new_r00=0;
IkReal gconst50=x523;
IkReal x525 = new_r01*new_r01;
if(IKabs(x525)==0){
continue;
}
IkReal gconst51=((-1.0)*new_r01*(pow(x525,-0.5)));
IkReal gconst52=0;
j2eval[0]=new_r10;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x527 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x527.valid){
continue;
}
IkReal x526=((-1.0)*(x527.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x526;
new_r11=0;
new_r00=0;
IkReal gconst50=x526;
IkReal x528 = new_r01*new_r01;
if(IKabs(x528)==0){
continue;
}
IkReal gconst51=((-1.0)*new_r01*(pow(x528,-0.5)));
IkReal gconst52=0;
j2eval[0]=new_r01;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x529=IKPowWithIntegerCheck(gconst51,-1);
if(!x529.valid){
continue;
}
cj2array[0]=((-1.0)*new_r01*(x529.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x530=IKsin(j2);
IkReal x531=IKcos(j2);
evalcond[0]=(gconst51*x530);
evalcond[1]=(new_r10*x530);
evalcond[2]=((-1.0)*new_r01*x530);
evalcond[3]=(gconst51+((new_r10*x531)));
evalcond[4]=(((new_r01*x531))+gconst51);
evalcond[5]=(new_r10+((gconst51*x531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x532=IKPowWithIntegerCheck(new_r01,-1);
if(!x532.valid){
continue;
}
cj2array[0]=((-1.0)*gconst51*(x532.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x533=IKsin(j2);
IkReal x534=IKcos(j2);
IkReal x535=(gconst51*x534);
evalcond[0]=(gconst51*x533);
evalcond[1]=(new_r10*x533);
evalcond[2]=((-1.0)*new_r01*x533);
evalcond[3]=(gconst51+((new_r10*x534)));
evalcond[4]=(x535+new_r01);
evalcond[5]=(x535+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x536=IKPowWithIntegerCheck(new_r10,-1);
if(!x536.valid){
continue;
}
cj2array[0]=((-1.0)*gconst51*(x536.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x537=IKsin(j2);
IkReal x538=IKcos(j2);
IkReal x539=(gconst51*x538);
evalcond[0]=(gconst51*x537);
evalcond[1]=(new_r10*x537);
evalcond[2]=((-1.0)*new_r01*x537);
evalcond[3]=(((new_r01*x538))+gconst51);
evalcond[4]=(x539+new_r01);
evalcond[5]=(x539+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst51;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
CheckValue<IkReal> x541 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x541.valid){
continue;
}
IkReal x540=((-1.0)*(x541.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x540;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst50=x540;
IkReal gconst51=((-1.0)*new_r01);
IkReal gconst52=new_r11;
j2eval[0]=-1.0;
j2eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j2eval[2]=-1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x543 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x543.valid){
continue;
}
IkReal x542=((-1.0)*(x543.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x542;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst50=x542;
IkReal gconst51=((-1.0)*new_r01);
IkReal gconst52=new_r11;
j2eval[0]=-1.0;
j2eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j2eval[2]=-1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x545 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x545.valid){
continue;
}
IkReal x544=((-1.0)*(x545.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x544;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst50=x544;
IkReal gconst51=((-1.0)*new_r01);
IkReal gconst52=new_r11;
j2eval[0]=1.0;
j2eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j2eval[2]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x546=((1.0)*new_r11);
CheckValue<IkReal> x547 = IKatan2WithCheck(IkReal(((((-1.0)*gconst51*x546))+((gconst52*new_r01)))),IkReal(((((-1.0)*gconst51*new_r01))+(((-1.0)*gconst52*x546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x547.valid){
continue;
}
CheckValue<IkReal> x548=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x548.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x547.value)+(((1.5707963267949)*(x548.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x549=IKsin(j2);
IkReal x550=IKcos(j2);
IkReal x551=(gconst51*x550);
IkReal x552=((1.0)*x549);
IkReal x553=(gconst52*x550);
IkReal x554=(gconst52*x552);
evalcond[0]=(gconst51+((new_r11*x549))+((new_r01*x550)));
evalcond[1]=(x553+new_r11+((gconst51*x549)));
evalcond[2]=((((-1.0)*x554))+x551);
evalcond[3]=(((new_r11*x550))+gconst52+(((-1.0)*new_r01*x552)));
evalcond[4]=((((-1.0)*x554))+x551+new_r01);
evalcond[5]=((((-1.0)*x553))+(((-1.0)*gconst51*x552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x555 = IKatan2WithCheck(IkReal((gconst51*new_r11)),IkReal((gconst52*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x555.valid){
continue;
}
CheckValue<IkReal> x556=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst51*gconst51)))+(((-1.0)*(gconst52*gconst52))))),-1);
if(!x556.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x555.value)+(((1.5707963267949)*(x556.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x557=IKsin(j2);
IkReal x558=IKcos(j2);
IkReal x559=(gconst51*x558);
IkReal x560=((1.0)*x557);
IkReal x561=(gconst52*x558);
IkReal x562=(gconst52*x560);
evalcond[0]=(((new_r11*x557))+gconst51+((new_r01*x558)));
evalcond[1]=(((gconst51*x557))+x561+new_r11);
evalcond[2]=(x559+(((-1.0)*x562)));
evalcond[3]=(((new_r11*x558))+gconst52+(((-1.0)*new_r01*x560)));
evalcond[4]=(x559+new_r01+(((-1.0)*x562)));
evalcond[5]=((((-1.0)*gconst51*x560))+(((-1.0)*x561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x563=IKPowWithIntegerCheck(IKsign((((gconst51*new_r01))+(((-1.0)*gconst52*new_r11)))),-1);
if(!x563.valid){
continue;
}
CheckValue<IkReal> x564 = IKatan2WithCheck(IkReal((gconst51*gconst52)),IkReal(((-1.0)*(gconst51*gconst51))),IKFAST_ATAN2_MAGTHRESH);
if(!x564.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x563.value)))+(x564.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x565=IKsin(j2);
IkReal x566=IKcos(j2);
IkReal x567=(gconst51*x566);
IkReal x568=((1.0)*x565);
IkReal x569=(gconst52*x566);
IkReal x570=(gconst52*x568);
evalcond[0]=(gconst51+((new_r01*x566))+((new_r11*x565)));
evalcond[1]=(((gconst51*x565))+x569+new_r11);
evalcond[2]=((((-1.0)*x570))+x567);
evalcond[3]=(gconst52+((new_r11*x566))+(((-1.0)*new_r01*x568)));
evalcond[4]=((((-1.0)*x570))+x567+new_r01);
evalcond[5]=((((-1.0)*gconst51*x568))+(((-1.0)*x569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x571=IKPowWithIntegerCheck(gconst52,-1);
if(!x571.valid){
continue;
}
cj2array[0]=(new_r00*(x571.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x572=IKsin(j2);
IkReal x573=IKcos(j2);
IkReal x574=((-1.0)*x572);
evalcond[0]=(new_r11*x572);
evalcond[1]=(new_r00*x574);
evalcond[2]=(gconst52*x574);
evalcond[3]=(((new_r11*x573))+gconst52);
evalcond[4]=(((gconst52*x573))+new_r11);
evalcond[5]=(((new_r00*x573))+(((-1.0)*gconst52)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x576 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x576.valid){
continue;
}
IkReal x575=((-1.0)*(x576.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x575;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst50=x575;
IkReal gconst51=0;
IkReal x577 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x577)==0){
continue;
}
IkReal gconst52=(new_r11*(pow(x577,-0.5)));
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x579 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x579.valid){
continue;
}
IkReal x578=((-1.0)*(x579.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x578;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst50=x578;
IkReal gconst51=0;
IkReal x580 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x580)==0){
continue;
}
IkReal gconst52=(new_r11*(pow(x580,-0.5)));
j2eval[0]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x582 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x582.valid){
continue;
}
IkReal x581=((-1.0)*(x582.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x581;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst50=x581;
IkReal gconst51=0;
IkReal x583 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x583)==0){
continue;
}
IkReal gconst52=(new_r11*(pow(x583,-0.5)));
j2eval[0]=new_r10;
j2eval[1]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x584=IKPowWithIntegerCheck(new_r10,-1);
if(!x584.valid){
continue;
}
CheckValue<IkReal> x585=IKPowWithIntegerCheck(new_r11,-1);
if(!x585.valid){
continue;
}
if( IKabs((gconst52*(x584.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst52*(x585.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst52*(x584.value)))+IKsqr(((-1.0)*gconst52*(x585.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((gconst52*(x584.value)), ((-1.0)*gconst52*(x585.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x586=IKsin(j2);
IkReal x587=IKcos(j2);
IkReal x588=((1.0)*gconst52);
IkReal x589=(gconst52*x587);
evalcond[0]=(new_r10*x587);
evalcond[1]=(new_r11*x586);
evalcond[2]=((-1.0)*gconst52*x586);
evalcond[3]=((-1.0)*x589);
evalcond[4]=(gconst52+((new_r11*x587)));
evalcond[5]=(x589+new_r11);
evalcond[6]=((((-1.0)*x586*x588))+new_r10);
evalcond[7]=((((-1.0)*x588))+((new_r10*x586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x590=IKPowWithIntegerCheck(gconst52,-1);
if(!x590.valid){
continue;
}
CheckValue<IkReal> x591=IKPowWithIntegerCheck(new_r11,-1);
if(!x591.valid){
continue;
}
if( IKabs((new_r10*(x590.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst52*(x591.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x590.value)))+IKsqr(((-1.0)*gconst52*(x591.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((new_r10*(x590.value)), ((-1.0)*gconst52*(x591.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x592=IKsin(j2);
IkReal x593=IKcos(j2);
IkReal x594=((1.0)*gconst52);
IkReal x595=(gconst52*x593);
evalcond[0]=(new_r10*x593);
evalcond[1]=(new_r11*x592);
evalcond[2]=((-1.0)*gconst52*x592);
evalcond[3]=((-1.0)*x595);
evalcond[4]=(((new_r11*x593))+gconst52);
evalcond[5]=(x595+new_r11);
evalcond[6]=((((-1.0)*x592*x594))+new_r10);
evalcond[7]=(((new_r10*x592))+(((-1.0)*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x596=IKPowWithIntegerCheck(IKsign(gconst52),-1);
if(!x596.valid){
continue;
}
CheckValue<IkReal> x597 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x597.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x596.value)))+(x597.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x598=IKsin(j2);
IkReal x599=IKcos(j2);
IkReal x600=((1.0)*gconst52);
IkReal x601=(gconst52*x599);
evalcond[0]=(new_r10*x599);
evalcond[1]=(new_r11*x598);
evalcond[2]=((-1.0)*gconst52*x598);
evalcond[3]=((-1.0)*x601);
evalcond[4]=(((new_r11*x599))+gconst52);
evalcond[5]=(x601+new_r11);
evalcond[6]=((((-1.0)*x598*x600))+new_r10);
evalcond[7]=(((new_r10*x598))+(((-1.0)*x600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x603 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x603.valid){
continue;
}
IkReal x602=((-1.0)*(x603.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x602;
new_r01=0;
IkReal gconst50=x602;
IkReal gconst51=0;
IkReal x604 = new_r11*new_r11;
if(IKabs(x604)==0){
continue;
}
IkReal gconst52=(new_r11*(pow(x604,-0.5)));
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x606 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x606.valid){
continue;
}
IkReal x605=((-1.0)*(x606.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x605;
new_r01=0;
IkReal gconst50=x605;
IkReal gconst51=0;
IkReal x607 = new_r11*new_r11;
if(IKabs(x607)==0){
continue;
}
IkReal gconst52=(new_r11*(pow(x607,-0.5)));
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x609 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x609.valid){
continue;
}
IkReal x608=((-1.0)*(x609.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x608;
new_r01=0;
IkReal gconst50=x608;
IkReal gconst51=0;
IkReal x610 = new_r11*new_r11;
if(IKabs(x610)==0){
continue;
}
IkReal gconst52=(new_r11*(pow(x610,-0.5)));
j2eval[0]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x611=IKPowWithIntegerCheck(gconst52,-1);
if(!x611.valid){
continue;
}
CheckValue<IkReal> x612=IKPowWithIntegerCheck(new_r11,-1);
if(!x612.valid){
continue;
}
if( IKabs((new_r10*(x611.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst52*(x612.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x611.value)))+IKsqr(((-1.0)*gconst52*(x612.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((new_r10*(x611.value)), ((-1.0)*gconst52*(x612.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x613=IKsin(j2);
IkReal x614=IKcos(j2);
IkReal x615=((1.0)*x613);
IkReal x616=(gconst52*x614);
evalcond[0]=(new_r11*x613);
evalcond[1]=((-1.0)*gconst52*x613);
evalcond[2]=(gconst52+((new_r11*x614)));
evalcond[3]=(x616+new_r11);
evalcond[4]=((((-1.0)*gconst52*x615))+new_r10);
evalcond[5]=((((-1.0)*x616))+new_r00);
evalcond[6]=(((new_r10*x614))+(((-1.0)*new_r00*x615)));
evalcond[7]=((((-1.0)*gconst52))+((new_r10*x613))+((new_r00*x614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x617=IKPowWithIntegerCheck(IKsign(gconst52),-1);
if(!x617.valid){
continue;
}
CheckValue<IkReal> x618 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x618.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x617.value)))+(x618.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x619=IKsin(j2);
IkReal x620=IKcos(j2);
IkReal x621=((1.0)*x619);
IkReal x622=(gconst52*x620);
evalcond[0]=(new_r11*x619);
evalcond[1]=((-1.0)*gconst52*x619);
evalcond[2]=(gconst52+((new_r11*x620)));
evalcond[3]=(x622+new_r11);
evalcond[4]=((((-1.0)*gconst52*x621))+new_r10);
evalcond[5]=((((-1.0)*x622))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x621))+((new_r10*x620)));
evalcond[7]=((((-1.0)*gconst52))+((new_r00*x620))+((new_r10*x619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x623=IKPowWithIntegerCheck(IKsign(gconst52),-1);
if(!x623.valid){
continue;
}
CheckValue<IkReal> x624 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x624.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x623.value)))+(x624.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x625=IKsin(j2);
IkReal x626=IKcos(j2);
IkReal x627=((1.0)*x625);
IkReal x628=(gconst52*x626);
evalcond[0]=(new_r11*x625);
evalcond[1]=((-1.0)*gconst52*x625);
evalcond[2]=(gconst52+((new_r11*x626)));
evalcond[3]=(x628+new_r11);
evalcond[4]=((((-1.0)*gconst52*x627))+new_r10);
evalcond[5]=((((-1.0)*x628))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x627))+((new_r10*x626)));
evalcond[7]=((((-1.0)*gconst52))+((new_r00*x626))+((new_r10*x625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x629=((1.0)*new_r11);
CheckValue<IkReal> x630 = IKatan2WithCheck(IkReal(((((-1.0)*new_r01*x629))+((gconst51*gconst52)))),IkReal(((((-1.0)*(gconst51*gconst51)))+(new_r11*new_r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x630.valid){
continue;
}
CheckValue<IkReal> x631=IKPowWithIntegerCheck(IKsign((((gconst51*new_r01))+(((-1.0)*gconst52*x629)))),-1);
if(!x631.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x630.value)+(((1.5707963267949)*(x631.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x632=IKsin(j2);
IkReal x633=IKcos(j2);
IkReal x634=(gconst51*x633);
IkReal x635=((1.0)*x632);
IkReal x636=(gconst52*x633);
IkReal x637=(gconst52*x635);
evalcond[0]=(gconst51+((new_r01*x633))+((new_r11*x632)));
evalcond[1]=(x636+((gconst51*x632))+new_r11);
evalcond[2]=((((-1.0)*new_r00*x635))+gconst51+((new_r10*x633)));
evalcond[3]=((((-1.0)*new_r01*x635))+gconst52+((new_r11*x633)));
evalcond[4]=((((-1.0)*x637))+x634+new_r01);
evalcond[5]=((((-1.0)*x637))+x634+new_r10);
evalcond[6]=((((-1.0)*gconst52))+((new_r00*x633))+((new_r10*x632)));
evalcond[7]=((((-1.0)*gconst51*x635))+(((-1.0)*x636))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x638=((1.0)*new_r11);
CheckValue<IkReal> x639 = IKatan2WithCheck(IkReal((((gconst52*new_r01))+(((-1.0)*gconst51*x638)))),IkReal(((((-1.0)*gconst51*new_r01))+(((-1.0)*gconst52*x638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x639.valid){
continue;
}
CheckValue<IkReal> x640=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x640.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x639.value)+(((1.5707963267949)*(x640.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x641=IKsin(j2);
IkReal x642=IKcos(j2);
IkReal x643=(gconst51*x642);
IkReal x644=((1.0)*x641);
IkReal x645=(gconst52*x642);
IkReal x646=(gconst52*x644);
evalcond[0]=(gconst51+((new_r11*x641))+((new_r01*x642)));
evalcond[1]=(((gconst51*x641))+x645+new_r11);
evalcond[2]=(gconst51+((new_r10*x642))+(((-1.0)*new_r00*x644)));
evalcond[3]=(gconst52+((new_r11*x642))+(((-1.0)*new_r01*x644)));
evalcond[4]=((((-1.0)*x646))+x643+new_r01);
evalcond[5]=((((-1.0)*x646))+x643+new_r10);
evalcond[6]=((((-1.0)*gconst52))+((new_r10*x641))+((new_r00*x642)));
evalcond[7]=((((-1.0)*x645))+new_r00+(((-1.0)*gconst51*x644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x647=((1.0)*gconst51);
CheckValue<IkReal> x648 = IKatan2WithCheck(IkReal((((gconst51*new_r01))+(((-1.0)*new_r10*x647)))),IkReal(((((-1.0)*new_r11*x647))+(((-1.0)*new_r00*x647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x648.valid){
continue;
}
CheckValue<IkReal> x649=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x649.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x648.value)+(((1.5707963267949)*(x649.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x650=IKsin(j2);
IkReal x651=IKcos(j2);
IkReal x652=(gconst51*x651);
IkReal x653=((1.0)*x650);
IkReal x654=(gconst52*x651);
IkReal x655=(gconst52*x653);
evalcond[0]=(gconst51+((new_r01*x651))+((new_r11*x650)));
evalcond[1]=(((gconst51*x650))+x654+new_r11);
evalcond[2]=(gconst51+(((-1.0)*new_r00*x653))+((new_r10*x651)));
evalcond[3]=(gconst52+(((-1.0)*new_r01*x653))+((new_r11*x651)));
evalcond[4]=((((-1.0)*x655))+x652+new_r01);
evalcond[5]=((((-1.0)*x655))+x652+new_r10);
evalcond[6]=((((-1.0)*gconst52))+((new_r10*x650))+((new_r00*x651)));
evalcond[7]=((((-1.0)*x654))+(((-1.0)*gconst51*x653))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x657 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x657)==0){
continue;
}
IkReal x656=pow(x657,-0.5);
CheckValue<IkReal> x658 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x658.valid){
continue;
}
IkReal gconst53=((3.14159265358979)+(((-1.0)*(x658.value))));
IkReal gconst54=((1.0)*new_r01*x656);
IkReal gconst55=((-1.0)*new_r11*x656);
CheckValue<IkReal> x659 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x659.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x659.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
CheckValue<IkReal> x662 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x662.valid){
continue;
}
IkReal x660=((1.0)*(x662.value));
IkReal x661=x656;
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x660)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x660)));
IkReal gconst54=((1.0)*new_r01*x661);
IkReal gconst55=((-1.0)*new_r11*x661);
IkReal x663=new_r01*new_r01;
IkReal x664=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x665=x656;
IkReal x666=((1.0)*new_r01*x665);
j2eval[0]=x664;
j2eval[1]=IKsign(x664);
j2eval[2]=((IKabs(((((-1.0)*new_r11*x666))+(((-1.0)*new_r00*x666)))))+(IKabs((((x663*x665))+(((-1.0)*new_r10*x666))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x669 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x669.valid){
continue;
}
IkReal x667=((1.0)*(x669.value));
IkReal x668=x656;
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x667)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x667)));
IkReal gconst54=((1.0)*new_r01*x668);
IkReal gconst55=((-1.0)*new_r11*x668);
IkReal x670=((new_r01*new_r01)+(new_r11*new_r11));
j2eval[0]=x670;
j2eval[1]=IKsign(x670);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x673 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x673.valid){
continue;
}
IkReal x671=((1.0)*(x673.value));
IkReal x672=x656;
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x671)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x671)));
IkReal gconst54=((1.0)*new_r01*x672);
IkReal gconst55=((-1.0)*new_r11*x672);
IkReal x674=new_r01*new_r01;
IkReal x675=new_r11*new_r11;
IkReal x676=((1.0)*x674);
CheckValue<IkReal> x682=IKPowWithIntegerCheck((x674+x675),-1);
if(!x682.valid){
continue;
}
IkReal x677=x682.value;
CheckValue<IkReal> x683=IKPowWithIntegerCheck(((((-1.0)*x675))+(((-1.0)*x676))),-1);
if(!x683.valid){
continue;
}
IkReal x678=x683.value;
IkReal x679=((1.0)*x678);
IkReal x680=(new_r11*x679);
IkReal x681=(new_r01*x679);
j2eval[0]=((IKabs((((x677*(x675*x675)))+((x674*x675*x677))+(((-1.0)*x676*x677)))))+(IKabs(((((-1.0)*new_r01*x680))+(((-1.0)*x680*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x680*(new_r11*new_r11)))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x685 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x685.valid){
continue;
}
IkReal x684=((1.0)*(x685.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x684)));
new_r11=0;
new_r00=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x684)));
IkReal x686 = new_r01*new_r01;
if(IKabs(x686)==0){
continue;
}
IkReal gconst54=((1.0)*new_r01*(pow(x686,-0.5)));
IkReal gconst55=0;
j2eval[0]=new_r10;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x688 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x688.valid){
continue;
}
IkReal x687=((1.0)*(x688.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x687)));
new_r11=0;
new_r00=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x687)));
IkReal x689 = new_r01*new_r01;
if(IKabs(x689)==0){
continue;
}
IkReal gconst54=((1.0)*new_r01*(pow(x689,-0.5)));
IkReal gconst55=0;
j2eval[0]=new_r01;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x690=IKPowWithIntegerCheck(gconst54,-1);
if(!x690.valid){
continue;
}
cj2array[0]=((-1.0)*new_r01*(x690.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x691=IKsin(j2);
IkReal x692=IKcos(j2);
evalcond[0]=(gconst54*x691);
evalcond[1]=(new_r10*x691);
evalcond[2]=((-1.0)*new_r01*x691);
evalcond[3]=(gconst54+((new_r10*x692)));
evalcond[4]=(gconst54+((new_r01*x692)));
evalcond[5]=(((gconst54*x692))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x693=IKPowWithIntegerCheck(new_r01,-1);
if(!x693.valid){
continue;
}
cj2array[0]=((-1.0)*gconst54*(x693.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x694=IKsin(j2);
IkReal x695=IKcos(j2);
IkReal x696=(gconst54*x695);
evalcond[0]=(gconst54*x694);
evalcond[1]=(new_r10*x694);
evalcond[2]=((-1.0)*new_r01*x694);
evalcond[3]=(gconst54+((new_r10*x695)));
evalcond[4]=(x696+new_r01);
evalcond[5]=(x696+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x697=IKPowWithIntegerCheck(new_r10,-1);
if(!x697.valid){
continue;
}
cj2array[0]=((-1.0)*gconst54*(x697.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x698=IKsin(j2);
IkReal x699=IKcos(j2);
IkReal x700=(gconst54*x699);
evalcond[0]=(gconst54*x698);
evalcond[1]=(new_r10*x698);
evalcond[2]=((-1.0)*new_r01*x698);
evalcond[3]=(gconst54+((new_r01*x699)));
evalcond[4]=(x700+new_r01);
evalcond[5]=(x700+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst54;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[4];
CheckValue<IkReal> x702 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x702.valid){
continue;
}
IkReal x701=((1.0)*(x702.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x701)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x701)));
IkReal gconst54=((1.0)*new_r01);
IkReal gconst55=((-1.0)*new_r11);
j2eval[0]=1.0;
j2eval[1]=1.0;
j2eval[2]=new_r01;
j2eval[3]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x704 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x704.valid){
continue;
}
IkReal x703=((1.0)*(x704.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x703)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x703)));
IkReal gconst54=((1.0)*new_r01);
IkReal gconst55=((-1.0)*new_r11);
j2eval[0]=-1.0;
j2eval[1]=-1.0;
j2eval[2]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x706 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x706.valid){
continue;
}
IkReal x705=((1.0)*(x706.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x705)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x705)));
IkReal gconst54=((1.0)*new_r01);
IkReal gconst55=((-1.0)*new_r11);
j2eval[0]=1.0;
j2eval[1]=1.0;
j2eval[2]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x707=((1.0)*gconst54);
CheckValue<IkReal> x708 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x707))+((gconst55*new_r01)))),IkReal(((((-1.0)*new_r01*x707))+(((-1.0)*gconst55*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x708.valid){
continue;
}
CheckValue<IkReal> x709=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x709.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x708.value)+(((1.5707963267949)*(x709.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x710=IKcos(j2);
IkReal x711=IKsin(j2);
IkReal x712=((1.0)*gconst55);
IkReal x713=(gconst54*x710);
IkReal x714=((1.0)*x711);
IkReal x715=(x711*x712);
evalcond[0]=(((new_r01*x710))+gconst54+((new_r11*x711)));
evalcond[1]=(((gconst55*x710))+((gconst54*x711))+new_r11);
evalcond[2]=((((-1.0)*x715))+x713);
evalcond[3]=(gconst55+((new_r11*x710))+(((-1.0)*new_r01*x714)));
evalcond[4]=((((-1.0)*x715))+x713+new_r01);
evalcond[5]=((((-1.0)*x710*x712))+(((-1.0)*gconst54*x714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x716=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst55*gconst55)))+(((-1.0)*(gconst54*gconst54))))),-1);
if(!x716.valid){
continue;
}
CheckValue<IkReal> x717 = IKatan2WithCheck(IkReal((gconst54*new_r11)),IkReal((gconst55*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x717.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x716.value)))+(x717.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x718=IKcos(j2);
IkReal x719=IKsin(j2);
IkReal x720=((1.0)*gconst55);
IkReal x721=(gconst54*x718);
IkReal x722=((1.0)*x719);
IkReal x723=(x719*x720);
evalcond[0]=(((new_r01*x718))+gconst54+((new_r11*x719)));
evalcond[1]=(((gconst55*x718))+((gconst54*x719))+new_r11);
evalcond[2]=((((-1.0)*x723))+x721);
evalcond[3]=(gconst55+((new_r11*x718))+(((-1.0)*new_r01*x722)));
evalcond[4]=((((-1.0)*x723))+x721+new_r01);
evalcond[5]=((((-1.0)*gconst54*x722))+(((-1.0)*x718*x720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x724 = IKatan2WithCheck(IkReal((gconst54*gconst55)),IkReal(((-1.0)*(gconst54*gconst54))),IKFAST_ATAN2_MAGTHRESH);
if(!x724.valid){
continue;
}
CheckValue<IkReal> x725=IKPowWithIntegerCheck(IKsign((((gconst54*new_r01))+(((-1.0)*gconst55*new_r11)))),-1);
if(!x725.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x724.value)+(((1.5707963267949)*(x725.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x726=IKcos(j2);
IkReal x727=IKsin(j2);
IkReal x728=((1.0)*gconst55);
IkReal x729=(gconst54*x726);
IkReal x730=((1.0)*x727);
IkReal x731=(x727*x728);
evalcond[0]=(gconst54+((new_r01*x726))+((new_r11*x727)));
evalcond[1]=(((gconst54*x727))+((gconst55*x726))+new_r11);
evalcond[2]=((((-1.0)*x731))+x729);
evalcond[3]=(gconst55+(((-1.0)*new_r01*x730))+((new_r11*x726)));
evalcond[4]=((((-1.0)*x731))+x729+new_r01);
evalcond[5]=((((-1.0)*gconst54*x730))+(((-1.0)*x726*x728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x732=IKPowWithIntegerCheck(gconst55,-1);
if(!x732.valid){
continue;
}
cj2array[0]=(new_r00*(x732.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x733=IKsin(j2);
IkReal x734=IKcos(j2);
IkReal x735=((-1.0)*x733);
evalcond[0]=(new_r11*x733);
evalcond[1]=(new_r00*x735);
evalcond[2]=(gconst55*x735);
evalcond[3]=(gconst55+((new_r11*x734)));
evalcond[4]=(((gconst55*x734))+new_r11);
evalcond[5]=((((-1.0)*gconst55))+((new_r00*x734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x737 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x737.valid){
continue;
}
IkReal x736=((1.0)*(x737.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x736)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x736)));
IkReal gconst54=0;
IkReal x738 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x738)==0){
continue;
}
IkReal gconst55=((-1.0)*new_r11*(pow(x738,-0.5)));
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x740 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x740.valid){
continue;
}
IkReal x739=((1.0)*(x740.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x739)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x739)));
IkReal gconst54=0;
IkReal x741 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x741)==0){
continue;
}
IkReal gconst55=((-1.0)*new_r11*(pow(x741,-0.5)));
j2eval[0]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x743 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x743.valid){
continue;
}
IkReal x742=((1.0)*(x743.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x742)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x742)));
IkReal gconst54=0;
IkReal x744 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x744)==0){
continue;
}
IkReal gconst55=((-1.0)*new_r11*(pow(x744,-0.5)));
j2eval[0]=new_r10;
j2eval[1]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x745=IKPowWithIntegerCheck(new_r10,-1);
if(!x745.valid){
continue;
}
CheckValue<IkReal> x746=IKPowWithIntegerCheck(new_r11,-1);
if(!x746.valid){
continue;
}
if( IKabs((gconst55*(x745.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst55*(x746.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst55*(x745.value)))+IKsqr(((-1.0)*gconst55*(x746.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((gconst55*(x745.value)), ((-1.0)*gconst55*(x746.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x747=IKsin(j2);
IkReal x748=IKcos(j2);
IkReal x749=((1.0)*gconst55);
IkReal x750=((-1.0)*gconst55);
evalcond[0]=(new_r10*x748);
evalcond[1]=(new_r11*x747);
evalcond[2]=(x747*x750);
evalcond[3]=(x748*x750);
evalcond[4]=(gconst55+((new_r11*x748)));
evalcond[5]=(new_r11+((gconst55*x748)));
evalcond[6]=((((-1.0)*x747*x749))+new_r10);
evalcond[7]=(((new_r10*x747))+(((-1.0)*x749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x751=IKPowWithIntegerCheck(gconst55,-1);
if(!x751.valid){
continue;
}
CheckValue<IkReal> x752=IKPowWithIntegerCheck(new_r11,-1);
if(!x752.valid){
continue;
}
if( IKabs((new_r10*(x751.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst55*(x752.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x751.value)))+IKsqr(((-1.0)*gconst55*(x752.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((new_r10*(x751.value)), ((-1.0)*gconst55*(x752.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x753=IKsin(j2);
IkReal x754=IKcos(j2);
IkReal x755=((1.0)*gconst55);
IkReal x756=((-1.0)*gconst55);
evalcond[0]=(new_r10*x754);
evalcond[1]=(new_r11*x753);
evalcond[2]=(x753*x756);
evalcond[3]=(x754*x756);
evalcond[4]=(gconst55+((new_r11*x754)));
evalcond[5]=(((gconst55*x754))+new_r11);
evalcond[6]=((((-1.0)*x753*x755))+new_r10);
evalcond[7]=(((new_r10*x753))+(((-1.0)*x755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x757 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x757.valid){
continue;
}
CheckValue<IkReal> x758=IKPowWithIntegerCheck(IKsign(gconst55),-1);
if(!x758.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x757.value)+(((1.5707963267949)*(x758.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x759=IKsin(j2);
IkReal x760=IKcos(j2);
IkReal x761=((1.0)*gconst55);
IkReal x762=((-1.0)*gconst55);
evalcond[0]=(new_r10*x760);
evalcond[1]=(new_r11*x759);
evalcond[2]=(x759*x762);
evalcond[3]=(x760*x762);
evalcond[4]=(((new_r11*x760))+gconst55);
evalcond[5]=(((gconst55*x760))+new_r11);
evalcond[6]=(new_r10+(((-1.0)*x759*x761)));
evalcond[7]=((((-1.0)*x761))+((new_r10*x759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x764 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x764.valid){
continue;
}
IkReal x763=((1.0)*(x764.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x763)));
new_r01=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x763)));
IkReal gconst54=0;
IkReal x765 = new_r11*new_r11;
if(IKabs(x765)==0){
continue;
}
IkReal gconst55=((-1.0)*new_r11*(pow(x765,-0.5)));
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x767 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x767.valid){
continue;
}
IkReal x766=((1.0)*(x767.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x766)));
new_r01=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x766)));
IkReal gconst54=0;
IkReal x768 = new_r11*new_r11;
if(IKabs(x768)==0){
continue;
}
IkReal gconst55=((-1.0)*new_r11*(pow(x768,-0.5)));
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x770 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x770.valid){
continue;
}
IkReal x769=((1.0)*(x770.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x769)));
new_r01=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x769)));
IkReal gconst54=0;
IkReal x771 = new_r11*new_r11;
if(IKabs(x771)==0){
continue;
}
IkReal gconst55=((-1.0)*new_r11*(pow(x771,-0.5)));
j2eval[0]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x772=IKPowWithIntegerCheck(gconst55,-1);
if(!x772.valid){
continue;
}
CheckValue<IkReal> x773=IKPowWithIntegerCheck(new_r11,-1);
if(!x773.valid){
continue;
}
if( IKabs((new_r10*(x772.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst55*(x773.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x772.value)))+IKsqr(((-1.0)*gconst55*(x773.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((new_r10*(x772.value)), ((-1.0)*gconst55*(x773.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x774=IKsin(j2);
IkReal x775=IKcos(j2);
IkReal x776=((1.0)*gconst55);
evalcond[0]=(new_r11*x774);
evalcond[1]=((-1.0)*gconst55*x774);
evalcond[2]=(gconst55+((new_r11*x775)));
evalcond[3]=(new_r11+((gconst55*x775)));
evalcond[4]=((((-1.0)*x774*x776))+new_r10);
evalcond[5]=((((-1.0)*x775*x776))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x774))+((new_r10*x775)));
evalcond[7]=(((new_r00*x775))+((new_r10*x774))+(((-1.0)*x776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x777 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x777.valid){
continue;
}
CheckValue<IkReal> x778=IKPowWithIntegerCheck(IKsign(gconst55),-1);
if(!x778.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x777.value)+(((1.5707963267949)*(x778.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x779=IKsin(j2);
IkReal x780=IKcos(j2);
IkReal x781=((1.0)*gconst55);
evalcond[0]=(new_r11*x779);
evalcond[1]=((-1.0)*gconst55*x779);
evalcond[2]=(((new_r11*x780))+gconst55);
evalcond[3]=(((gconst55*x780))+new_r11);
evalcond[4]=(new_r10+(((-1.0)*x779*x781)));
evalcond[5]=(new_r00+(((-1.0)*x780*x781)));
evalcond[6]=((((-1.0)*new_r00*x779))+((new_r10*x780)));
evalcond[7]=((((-1.0)*x781))+((new_r00*x780))+((new_r10*x779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x782=IKPowWithIntegerCheck(IKsign(gconst55),-1);
if(!x782.valid){
continue;
}
CheckValue<IkReal> x783 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x783.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x782.value)))+(x783.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x784=IKsin(j2);
IkReal x785=IKcos(j2);
IkReal x786=((1.0)*gconst55);
evalcond[0]=(new_r11*x784);
evalcond[1]=((-1.0)*gconst55*x784);
evalcond[2]=(((new_r11*x785))+gconst55);
evalcond[3]=(((gconst55*x785))+new_r11);
evalcond[4]=((((-1.0)*x784*x786))+new_r10);
evalcond[5]=(new_r00+(((-1.0)*x785*x786)));
evalcond[6]=(((new_r10*x785))+(((-1.0)*new_r00*x784)));
evalcond[7]=(((new_r10*x784))+(((-1.0)*x786))+((new_r00*x785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x787=((1.0)*new_r11);
CheckValue<IkReal> x788=IKPowWithIntegerCheck(IKsign((((gconst54*new_r01))+(((-1.0)*gconst55*x787)))),-1);
if(!x788.valid){
continue;
}
CheckValue<IkReal> x789 = IKatan2WithCheck(IkReal((((gconst54*gconst55))+(((-1.0)*new_r01*x787)))),IkReal(((new_r11*new_r11)+(((-1.0)*(gconst54*gconst54))))),IKFAST_ATAN2_MAGTHRESH);
if(!x789.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x788.value)))+(x789.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x790=IKcos(j2);
IkReal x791=IKsin(j2);
IkReal x792=((1.0)*gconst55);
IkReal x793=(gconst54*x790);
IkReal x794=((1.0)*x791);
IkReal x795=(x791*x792);
evalcond[0]=(((new_r11*x791))+gconst54+((new_r01*x790)));
evalcond[1]=(((gconst55*x790))+new_r11+((gconst54*x791)));
evalcond[2]=(((new_r10*x790))+gconst54+(((-1.0)*new_r00*x794)));
evalcond[3]=((((-1.0)*new_r01*x794))+((new_r11*x790))+gconst55);
evalcond[4]=((((-1.0)*x795))+x793+new_r01);
evalcond[5]=((((-1.0)*x795))+x793+new_r10);
evalcond[6]=((((-1.0)*x792))+((new_r10*x791))+((new_r00*x790)));
evalcond[7]=((((-1.0)*gconst54*x794))+(((-1.0)*x790*x792))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x796=((1.0)*gconst54);
CheckValue<IkReal> x797=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x797.valid){
continue;
}
CheckValue<IkReal> x798 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x796))+((gconst55*new_r01)))),IkReal(((((-1.0)*new_r01*x796))+(((-1.0)*gconst55*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x798.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x797.value)))+(x798.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x799=IKcos(j2);
IkReal x800=IKsin(j2);
IkReal x801=((1.0)*gconst55);
IkReal x802=(gconst54*x799);
IkReal x803=((1.0)*x800);
IkReal x804=(x800*x801);
evalcond[0]=(gconst54+((new_r01*x799))+((new_r11*x800)));
evalcond[1]=(((gconst55*x799))+((gconst54*x800))+new_r11);
evalcond[2]=(((new_r10*x799))+(((-1.0)*new_r00*x803))+gconst54);
evalcond[3]=((((-1.0)*new_r01*x803))+((new_r11*x799))+gconst55);
evalcond[4]=(new_r01+x802+(((-1.0)*x804)));
evalcond[5]=(new_r10+x802+(((-1.0)*x804)));
evalcond[6]=(((new_r00*x799))+((new_r10*x800))+(((-1.0)*x801)));
evalcond[7]=((((-1.0)*gconst54*x803))+(((-1.0)*x799*x801))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x805=((1.0)*gconst54);
CheckValue<IkReal> x806=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x806.valid){
continue;
}
CheckValue<IkReal> x807 = IKatan2WithCheck(IkReal((((gconst54*new_r01))+(((-1.0)*new_r10*x805)))),IkReal(((((-1.0)*new_r00*x805))+(((-1.0)*new_r11*x805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x807.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x806.value)))+(x807.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x808=IKcos(j2);
IkReal x809=IKsin(j2);
IkReal x810=((1.0)*gconst55);
IkReal x811=(gconst54*x808);
IkReal x812=((1.0)*x809);
IkReal x813=(x809*x810);
evalcond[0]=(gconst54+((new_r11*x809))+((new_r01*x808)));
evalcond[1]=(((gconst55*x808))+((gconst54*x809))+new_r11);
evalcond[2]=(gconst54+(((-1.0)*new_r00*x812))+((new_r10*x808)));
evalcond[3]=(gconst55+(((-1.0)*new_r01*x812))+((new_r11*x808)));
evalcond[4]=((((-1.0)*x813))+new_r01+x811);
evalcond[5]=((((-1.0)*x813))+new_r10+x811);
evalcond[6]=((((-1.0)*x810))+((new_r00*x808))+((new_r10*x809)));
evalcond[7]=((((-1.0)*x808*x810))+new_r00+(((-1.0)*gconst54*x812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=1.0;
j3=0;
new_r01=0;
new_r11=0;
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x815 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x815.valid){
continue;
}
IkReal x814=x815.value;
j2array[0]=((-1.0)*x814);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x814)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j2))))+((new_r10*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x816=IKcos(j2);
IkReal x817=IKsin(j2);
IkReal x818=((1.0)*x817);
evalcond[0]=(new_r11+x816);
evalcond[1]=((((-1.0)*x818))+new_r01);
evalcond[2]=((((-1.0)*x818))+new_r10);
evalcond[3]=((((-1.0)*x816))+new_r00);
evalcond[4]=(((new_r11*x817))+((new_r01*x816)));
evalcond[5]=(((new_r10*x816))+(((-1.0)*new_r00*x818)));
evalcond[6]=((-1.0)+((new_r00*x816))+((new_r10*x817)));
evalcond[7]=((1.0)+((new_r11*x816))+(((-1.0)*new_r01*x818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x819=IKsin(j2);
IkReal x820=IKcos(j2);
IkReal x821=((1.0)*x819);
evalcond[0]=(new_r01+x819);
evalcond[1]=(new_r10+x819);
evalcond[2]=(new_r00+x820);
evalcond[3]=((((-1.0)*x820))+new_r11);
evalcond[4]=(((new_r11*x819))+((new_r01*x820)));
evalcond[5]=(((new_r10*x820))+(((-1.0)*new_r00*x821)));
evalcond[6]=((1.0)+((new_r10*x819))+((new_r00*x820)));
evalcond[7]=((-1.0)+((new_r11*x820))+(((-1.0)*new_r01*x821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
new_r11=0;
new_r00=0;
j2eval[0]=new_r01;
j2eval[1]=((IKabs(cj4))+(IKabs(sj4)));
j2eval[2]=IKsign(new_r01);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
new_r11=0;
new_r00=0;
j2eval[0]=new_r10;
j2eval[1]=((IKabs(cj4))+(IKabs(sj4)));
j2eval[2]=IKsign(new_r10);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj3=0;
cj3=1.0;
j3=0;
new_r11=0;
new_r00=0;
j2eval[0]=new_r01;
j2eval[1]=new_r10;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x822=IKPowWithIntegerCheck(new_r01,-1);
if(!x822.valid){
continue;
}
CheckValue<IkReal> x823=IKPowWithIntegerCheck(new_r10,-1);
if(!x823.valid){
continue;
}
if( IKabs((cj4*(x822.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj4*(x823.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj4*(x822.value)))+IKsqr(((-1.0)*sj4*(x823.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj4*(x822.value)), ((-1.0)*sj4*(x823.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x824=IKcos(j2);
IkReal x825=IKsin(j2);
IkReal x826=((1.0)*cj4);
IkReal x827=(sj4*x824);
IkReal x828=(x825*x826);
evalcond[0]=(sj4+((new_r10*x824)));
evalcond[1]=(sj4+((new_r01*x824)));
evalcond[2]=((((-1.0)*new_r01*x825))+cj4);
evalcond[3]=(((new_r10*x825))+(((-1.0)*x826)));
evalcond[4]=(((cj4*x824))+((sj4*x825)));
evalcond[5]=((((-1.0)*x828))+new_r01+x827);
evalcond[6]=((((-1.0)*x828))+new_r10+x827);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x829=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x829.valid){
continue;
}
CheckValue<IkReal> x830 = IKatan2WithCheck(IkReal(cj4),IkReal(((-1.0)*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x830.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x829.value)))+(x830.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x831=IKcos(j2);
IkReal x832=IKsin(j2);
IkReal x833=((1.0)*cj4);
IkReal x834=(sj4*x831);
IkReal x835=(x832*x833);
evalcond[0]=(sj4+((new_r10*x831)));
evalcond[1]=(sj4+((new_r01*x831)));
evalcond[2]=(cj4+(((-1.0)*new_r01*x832)));
evalcond[3]=((((-1.0)*x833))+((new_r10*x832)));
evalcond[4]=(((sj4*x832))+((cj4*x831)));
evalcond[5]=((((-1.0)*x835))+new_r01+x834);
evalcond[6]=((((-1.0)*x835))+new_r10+x834);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x836=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x836.valid){
continue;
}
CheckValue<IkReal> x837 = IKatan2WithCheck(IkReal(cj4),IkReal(((-1.0)*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x837.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x836.value)))+(x837.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x838=IKcos(j2);
IkReal x839=IKsin(j2);
IkReal x840=((1.0)*cj4);
IkReal x841=(sj4*x838);
IkReal x842=(x839*x840);
evalcond[0]=(sj4+((new_r10*x838)));
evalcond[1]=(sj4+((new_r01*x838)));
evalcond[2]=(cj4+(((-1.0)*new_r01*x839)));
evalcond[3]=((((-1.0)*x840))+((new_r10*x839)));
evalcond[4]=(((sj4*x839))+((cj4*x838)));
evalcond[5]=((((-1.0)*x842))+new_r01+x841);
evalcond[6]=((((-1.0)*x842))+new_r10+x841);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=1.0;
j3=0;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x844 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x844.valid){
continue;
}
IkReal x843=x844.value;
j2array[0]=((-1.0)*x843);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x843)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j2))))+((new_r10*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=1.0;
j3=0;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x846 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x846.valid){
continue;
}
IkReal x845=x846.value;
j2array[0]=((-1.0)*x845);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x845)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j2))))+((new_r11*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
new_r01=0;
new_r10=0;
j2eval[0]=new_r11;
j2eval[1]=IKsign(new_r11);
j2eval[2]=((IKabs(cj4))+(IKabs(sj4)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj3=0;
cj3=1.0;
j3=0;
new_r01=0;
new_r10=0;
j2eval[0]=new_r00;
j2eval[1]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj3=0;
cj3=1.0;
j3=0;
new_r01=0;
new_r10=0;
j2eval[0]=new_r11;
j2eval[1]=sj4;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
cj2array[0]=new_r00;
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x847=IKsin(j2);
IkReal x848=IKcos(j2);
IkReal x849=((-1.0)*x847);
evalcond[0]=(new_r11*x847);
evalcond[1]=(new_r11+x848);
evalcond[2]=x849;
evalcond[3]=(new_r00*x849);
evalcond[4]=((1.0)+((new_r11*x848)));
evalcond[5]=((-1.0)+((new_r00*x848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
cj2array[0]=new_r11;
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x850=IKsin(j2);
IkReal x851=IKcos(j2);
evalcond[0]=x850;
evalcond[1]=(new_r11*x850);
evalcond[2]=(new_r00+x851);
evalcond[3]=((-1.0)*new_r00*x850);
evalcond[4]=((-1.0)+((new_r11*x851)));
evalcond[5]=((1.0)+((new_r00*x851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x853=IKPowWithIntegerCheck(new_r11,-1);
if(!x853.valid){
continue;
}
IkReal x852=x853.value;
CheckValue<IkReal> x854=IKPowWithIntegerCheck(sj4,-1);
if(!x854.valid){
continue;
}
CheckValue<IkReal> x855=IKPowWithIntegerCheck(x852,-2);
if(!x855.valid){
continue;
}
if( IKabs((x852*(x854.value)*(((cj4*cj4)+(((-1.0)*(x855.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj4*x852)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x852*(x854.value)*(((cj4*cj4)+(((-1.0)*(x855.value)))))))+IKsqr(((-1.0)*cj4*x852))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x852*(x854.value)*(((cj4*cj4)+(((-1.0)*(x855.value)))))), ((-1.0)*cj4*x852));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x856=IKsin(j2);
IkReal x857=IKcos(j2);
IkReal x858=((1.0)*cj4);
IkReal x859=((1.0)*x856);
evalcond[0]=(cj4+((new_r11*x857)));
evalcond[1]=(sj4+((new_r11*x856)));
evalcond[2]=(sj4+(((-1.0)*new_r00*x859)));
evalcond[3]=((((-1.0)*x858))+((new_r00*x857)));
evalcond[4]=(new_r11+((cj4*x857))+((sj4*x856)));
evalcond[5]=((((-1.0)*x856*x858))+((sj4*x857)));
evalcond[6]=((((-1.0)*sj4*x859))+new_r00+(((-1.0)*x857*x858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x860=IKPowWithIntegerCheck(new_r00,-1);
if(!x860.valid){
continue;
}
CheckValue<IkReal> x861=IKPowWithIntegerCheck(new_r11,-1);
if(!x861.valid){
continue;
}
if( IKabs((sj4*(x860.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj4*(x861.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*(x860.value)))+IKsqr(((-1.0)*cj4*(x861.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((sj4*(x860.value)), ((-1.0)*cj4*(x861.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x862=IKsin(j2);
IkReal x863=IKcos(j2);
IkReal x864=((1.0)*cj4);
IkReal x865=((1.0)*x862);
evalcond[0]=(cj4+((new_r11*x863)));
evalcond[1]=(sj4+((new_r11*x862)));
evalcond[2]=(sj4+(((-1.0)*new_r00*x865)));
evalcond[3]=((((-1.0)*x864))+((new_r00*x863)));
evalcond[4]=(((sj4*x862))+((cj4*x863))+new_r11);
evalcond[5]=((((-1.0)*x862*x864))+((sj4*x863)));
evalcond[6]=((((-1.0)*sj4*x865))+new_r00+(((-1.0)*x863*x864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x866=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x866.valid){
continue;
}
CheckValue<IkReal> x867 = IKatan2WithCheck(IkReal(((-1.0)*sj4)),IkReal(((-1.0)*cj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x867.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x866.value)))+(x867.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x868=IKsin(j2);
IkReal x869=IKcos(j2);
IkReal x870=((1.0)*cj4);
IkReal x871=((1.0)*x868);
evalcond[0]=(cj4+((new_r11*x869)));
evalcond[1]=(sj4+((new_r11*x868)));
evalcond[2]=(sj4+(((-1.0)*new_r00*x871)));
evalcond[3]=(((new_r00*x869))+(((-1.0)*x870)));
evalcond[4]=(((sj4*x868))+((cj4*x869))+new_r11);
evalcond[5]=((((-1.0)*x868*x870))+((sj4*x869)));
evalcond[6]=((((-1.0)*sj4*x871))+(((-1.0)*x869*x870))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x872=IKPowWithIntegerCheck(IKsign((((cj4*new_r01))+((new_r11*sj4)))),-1);
if(!x872.valid){
continue;
}
CheckValue<IkReal> x873 = IKatan2WithCheck(IkReal(((-1.0)+(new_r01*new_r01)+(cj4*cj4))),IkReal(((((-1.0)*cj4*sj4))+(((-1.0)*new_r01*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x873.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x872.value)))+(x873.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x874=IKsin(j2);
IkReal x875=IKcos(j2);
IkReal x876=((1.0)*cj4);
IkReal x877=(sj4*x875);
IkReal x878=((1.0)*x874);
IkReal x879=(x874*x876);
evalcond[0]=(((new_r01*x875))+sj4+((new_r11*x874)));
evalcond[1]=(((cj4*x875))+((sj4*x874))+new_r11);
evalcond[2]=(sj4+(((-1.0)*new_r00*x878))+((new_r10*x875)));
evalcond[3]=(cj4+(((-1.0)*new_r01*x878))+((new_r11*x875)));
evalcond[4]=(new_r01+x877+(((-1.0)*x879)));
evalcond[5]=(new_r10+x877+(((-1.0)*x879)));
evalcond[6]=(((new_r00*x875))+((new_r10*x874))+(((-1.0)*x876)));
evalcond[7]=((((-1.0)*sj4*x878))+(((-1.0)*x875*x876))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x880=((1.0)*new_r11);
CheckValue<IkReal> x881=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x881.valid){
continue;
}
CheckValue<IkReal> x882 = IKatan2WithCheck(IkReal((((cj4*new_r01))+(((-1.0)*sj4*x880)))),IkReal(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x882.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x881.value)))+(x882.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x883=IKsin(j2);
IkReal x884=IKcos(j2);
IkReal x885=((1.0)*cj4);
IkReal x886=(sj4*x884);
IkReal x887=((1.0)*x883);
IkReal x888=(x883*x885);
evalcond[0]=(sj4+((new_r01*x884))+((new_r11*x883)));
evalcond[1]=(((sj4*x883))+((cj4*x884))+new_r11);
evalcond[2]=(sj4+((new_r10*x884))+(((-1.0)*new_r00*x887)));
evalcond[3]=(cj4+((new_r11*x884))+(((-1.0)*new_r01*x887)));
evalcond[4]=((((-1.0)*x888))+new_r01+x886);
evalcond[5]=((((-1.0)*x888))+new_r10+x886);
evalcond[6]=(((new_r10*x883))+((new_r00*x884))+(((-1.0)*x885)));
evalcond[7]=((((-1.0)*sj4*x887))+new_r00+(((-1.0)*x884*x885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x889=((1.0)*sj4);
CheckValue<IkReal> x890 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x889))+((new_r01*sj4)))),IkReal(((((-1.0)*new_r11*x889))+(((-1.0)*new_r00*x889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x890.valid){
continue;
}
CheckValue<IkReal> x891=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x891.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x890.value)+(((1.5707963267949)*(x891.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x892=IKsin(j2);
IkReal x893=IKcos(j2);
IkReal x894=((1.0)*cj4);
IkReal x895=(sj4*x893);
IkReal x896=((1.0)*x892);
IkReal x897=(x892*x894);
evalcond[0]=(sj4+((new_r11*x892))+((new_r01*x893)));
evalcond[1]=(((sj4*x892))+((cj4*x893))+new_r11);
evalcond[2]=(sj4+((new_r10*x893))+(((-1.0)*new_r00*x896)));
evalcond[3]=(((new_r11*x893))+cj4+(((-1.0)*new_r01*x896)));
evalcond[4]=((((-1.0)*x897))+new_r01+x895);
evalcond[5]=((((-1.0)*x897))+new_r10+x895);
evalcond[6]=(((new_r00*x893))+((new_r10*x892))+(((-1.0)*x894)));
evalcond[7]=((((-1.0)*sj4*x896))+(((-1.0)*x893*x894))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x898=((1.0)*new_r10);
IkReal x899=((new_r10*new_r10)+(new_r00*new_r00));
j2eval[0]=x899;
j2eval[1]=IKsign(x899);
j2eval[2]=((IKabs((((new_r00*sj4))+(((-1.0)*cj4*x898)))))+(IKabs(((((-1.0)*cj4*new_r00))+(((-1.0)*sj4*x898))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x900=((1.0)*cj4);
IkReal x901=(((new_r10*new_r11))+((new_r00*new_r01)));
j2eval[0]=x901;
j2eval[1]=((IKabs(((((-1.0)*new_r01*x900))+(((-1.0)*new_r10*x900)))))+(IKabs(((((-1.0)*new_r11*x900))+((cj4*new_r00))))));
j2eval[2]=IKsign(x901);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x902=((1.0)*new_r10);
IkReal x903=(((cj4*new_r00))+(((-1.0)*sj4*x902)));
j2eval[0]=x903;
j2eval[1]=IKsign(x903);
j2eval[2]=((IKabs(((((-1.0)*(cj4*cj4)))+(new_r10*new_r10))))+(IKabs((((cj4*sj4))+(((-1.0)*new_r00*x902))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x906 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x906)==0){
continue;
}
IkReal x904=pow(x906,-0.5);
IkReal x905=((-1.0)*x904);
CheckValue<IkReal> x907 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x907.valid){
continue;
}
IkReal gconst56=((-1.0)*(x907.value));
IkReal gconst57=(new_r00*x905);
IkReal gconst58=(new_r10*x905);
CheckValue<IkReal> x908 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x908.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x908.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
CheckValue<IkReal> x912 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x912.valid){
continue;
}
IkReal x909=((-1.0)*(x912.value));
IkReal x910=x904;
IkReal x911=((-1.0)*x910);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x909;
IkReal gconst56=x909;
IkReal gconst57=(new_r00*x911);
IkReal gconst58=(new_r10*x911);
IkReal x913=((new_r10*new_r10)+(new_r00*new_r00));
j2eval[0]=x913;
j2eval[1]=IKsign(x913);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x917 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x917.valid){
continue;
}
IkReal x914=((-1.0)*(x917.value));
IkReal x915=x904;
IkReal x916=((-1.0)*x915);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x914;
IkReal gconst56=x914;
IkReal gconst57=(new_r00*x916);
IkReal gconst58=(new_r10*x916);
IkReal x918=new_r10*new_r10;
IkReal x919=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x920=x904;
IkReal x921=(new_r10*x920);
j2eval[0]=x919;
j2eval[1]=((IKabs(((((-1.0)*new_r00*x921))+((new_r11*x921)))))+(IKabs((((x918*x920))+((new_r01*x921))))));
j2eval[2]=IKsign(x919);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x925 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x925.valid){
continue;
}
IkReal x922=((-1.0)*(x925.value));
IkReal x923=x904;
IkReal x924=((-1.0)*x923);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x922;
IkReal gconst56=x922;
IkReal gconst57=(new_r00*x924);
IkReal gconst58=(new_r10*x924);
IkReal x926=new_r10*new_r10;
IkReal x927=new_r11*new_r11;
IkReal x928=new_r00*new_r00;
j2eval[0]=(x928+x926);
j2eval[1]=(((x927*(x928*x928)))+(((2.0)*x926*x927*x928))+((x927*(x926*x926)))+x926);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x929=IKPowWithIntegerCheck(IKsign((((gconst57*new_r00))+((gconst58*new_r10)))),-1);
if(!x929.valid){
continue;
}
CheckValue<IkReal> x930 = IKatan2WithCheck(IkReal((((new_r00*new_r11))+(((-1.0)*(gconst58*gconst58))))),IkReal(((((-1.0)*gconst57*gconst58))+(((-1.0)*new_r10*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x930.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x929.value)))+(x930.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x931=IKsin(j2);
IkReal x932=IKcos(j2);
IkReal x933=(gconst58*x932);
IkReal x934=((1.0)*x931);
IkReal x935=(gconst57*x932);
IkReal x936=(gconst57*x934);
evalcond[0]=(gconst58+((new_r00*x932))+((new_r10*x931)));
evalcond[1]=(((gconst58*x931))+new_r10+x935);
evalcond[2]=(gconst57+(((-1.0)*new_r00*x934))+((new_r10*x932)));
evalcond[3]=(gconst58+(((-1.0)*new_r01*x934))+((new_r11*x932)));
evalcond[4]=(new_r11+x933+(((-1.0)*x936)));
evalcond[5]=(new_r00+x933+(((-1.0)*x936)));
evalcond[6]=((((-1.0)*gconst57))+((new_r01*x932))+((new_r11*x931)));
evalcond[7]=((((-1.0)*x935))+new_r01+(((-1.0)*gconst58*x934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x937=((1.0)*gconst58);
CheckValue<IkReal> x938 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x937))+((gconst58*new_r00)))),IkReal(((((-1.0)*new_r10*x937))+(((-1.0)*new_r01*x937)))),IKFAST_ATAN2_MAGTHRESH);
if(!x938.valid){
continue;
}
CheckValue<IkReal> x939=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x939.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x938.value)+(((1.5707963267949)*(x939.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x940=IKsin(j2);
IkReal x941=IKcos(j2);
IkReal x942=(gconst58*x941);
IkReal x943=((1.0)*x940);
IkReal x944=(gconst57*x941);
IkReal x945=(gconst57*x943);
evalcond[0]=(((new_r00*x941))+gconst58+((new_r10*x940)));
evalcond[1]=(new_r10+x944+((gconst58*x940)));
evalcond[2]=(gconst57+((new_r10*x941))+(((-1.0)*new_r00*x943)));
evalcond[3]=(gconst58+((new_r11*x941))+(((-1.0)*new_r01*x943)));
evalcond[4]=((((-1.0)*x945))+new_r11+x942);
evalcond[5]=((((-1.0)*x945))+new_r00+x942);
evalcond[6]=((((-1.0)*gconst57))+((new_r01*x941))+((new_r11*x940)));
evalcond[7]=((((-1.0)*gconst58*x943))+(((-1.0)*x944))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x946=((1.0)*new_r10);
CheckValue<IkReal> x947=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x947.valid){
continue;
}
CheckValue<IkReal> x948 = IKatan2WithCheck(IkReal(((((-1.0)*gconst58*x946))+((gconst57*new_r00)))),IkReal(((((-1.0)*gconst57*x946))+(((-1.0)*gconst58*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x948.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x947.value)))+(x948.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x949=IKsin(j2);
IkReal x950=IKcos(j2);
IkReal x951=(gconst58*x950);
IkReal x952=((1.0)*x949);
IkReal x953=(gconst57*x950);
IkReal x954=(gconst57*x952);
evalcond[0]=(((new_r00*x950))+gconst58+((new_r10*x949)));
evalcond[1]=(new_r10+x953+((gconst58*x949)));
evalcond[2]=(((new_r10*x950))+gconst57+(((-1.0)*new_r00*x952)));
evalcond[3]=(gconst58+(((-1.0)*new_r01*x952))+((new_r11*x950)));
evalcond[4]=(new_r11+(((-1.0)*x954))+x951);
evalcond[5]=(new_r00+(((-1.0)*x954))+x951);
evalcond[6]=(((new_r01*x950))+(((-1.0)*gconst57))+((new_r11*x949)));
evalcond[7]=((((-1.0)*gconst58*x952))+(((-1.0)*x953))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x957 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x957)==0){
continue;
}
IkReal x955=pow(x957,-0.5);
IkReal x956=((1.0)*x955);
CheckValue<IkReal> x958 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x958.valid){
continue;
}
IkReal gconst59=((3.14159265358979)+(((-1.0)*(x958.value))));
IkReal gconst60=(new_r00*x956);
IkReal gconst61=(new_r10*x956);
CheckValue<IkReal> x959 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x959.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x959.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
CheckValue<IkReal> x963 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x963.valid){
continue;
}
IkReal x960=((1.0)*(x963.value));
IkReal x961=x955;
IkReal x962=((1.0)*x961);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x960)));
IkReal gconst59=((3.14159265358979)+(((-1.0)*x960)));
IkReal gconst60=(new_r00*x962);
IkReal gconst61=(new_r10*x962);
IkReal x964=((new_r10*new_r10)+(new_r00*new_r00));
j2eval[0]=x964;
j2eval[1]=IKsign(x964);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x968 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x968.valid){
continue;
}
IkReal x965=((1.0)*(x968.value));
IkReal x966=x955;
IkReal x967=((1.0)*x966);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x965)));
IkReal gconst59=((3.14159265358979)+(((-1.0)*x965)));
IkReal gconst60=(new_r00*x967);
IkReal gconst61=(new_r10*x967);
IkReal x969=new_r10*new_r10;
IkReal x970=(new_r10*new_r11);
IkReal x971=(((new_r00*new_r01))+x970);
IkReal x972=x955;
IkReal x973=((1.0)*x972);
j2eval[0]=x971;
j2eval[1]=((IKabs(((((-1.0)*x969*x973))+(((-1.0)*new_r01*new_r10*x973)))))+(IKabs((((new_r00*new_r10*x972))+(((-1.0)*x970*x973))))));
j2eval[2]=IKsign(x971);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x974 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst61*gconst61)))+((new_r00*new_r11)))),IkReal(((((-1.0)*gconst60*gconst61))+(((-1.0)*new_r10*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x974.valid){
continue;
}
CheckValue<IkReal> x975=IKPowWithIntegerCheck(IKsign((((gconst61*new_r10))+((gconst60*new_r00)))),-1);
if(!x975.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x974.value)+(((1.5707963267949)*(x975.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x976=IKcos(j2);
IkReal x977=IKsin(j2);
IkReal x978=((1.0)*gconst60);
IkReal x979=(gconst61*x976);
IkReal x980=((1.0)*x977);
IkReal x981=(x977*x978);
evalcond[0]=(gconst61+((new_r10*x977))+((new_r00*x976)));
evalcond[1]=(((gconst61*x977))+((gconst60*x976))+new_r10);
evalcond[2]=(gconst60+(((-1.0)*new_r00*x980))+((new_r10*x976)));
evalcond[3]=(gconst61+(((-1.0)*new_r01*x980))+((new_r11*x976)));
evalcond[4]=((((-1.0)*x981))+new_r11+x979);
evalcond[5]=((((-1.0)*x981))+new_r00+x979);
evalcond[6]=(((new_r01*x976))+((new_r11*x977))+(((-1.0)*x978)));
evalcond[7]=((((-1.0)*x976*x978))+new_r01+(((-1.0)*gconst61*x980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x982=((1.0)*gconst61);
CheckValue<IkReal> x983 = IKatan2WithCheck(IkReal((((gconst61*new_r00))+(((-1.0)*new_r11*x982)))),IkReal(((((-1.0)*new_r01*x982))+(((-1.0)*new_r10*x982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x983.valid){
continue;
}
CheckValue<IkReal> x984=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x984.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x983.value)+(((1.5707963267949)*(x984.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x985=IKcos(j2);
IkReal x986=IKsin(j2);
IkReal x987=((1.0)*gconst60);
IkReal x988=(gconst61*x985);
IkReal x989=((1.0)*x986);
IkReal x990=(x986*x987);
evalcond[0]=(((new_r00*x985))+gconst61+((new_r10*x986)));
evalcond[1]=(((gconst61*x986))+((gconst60*x985))+new_r10);
evalcond[2]=(gconst60+(((-1.0)*new_r00*x989))+((new_r10*x985)));
evalcond[3]=(gconst61+(((-1.0)*new_r01*x989))+((new_r11*x985)));
evalcond[4]=((((-1.0)*x990))+new_r11+x988);
evalcond[5]=((((-1.0)*x990))+new_r00+x988);
evalcond[6]=((((-1.0)*x987))+((new_r11*x986))+((new_r01*x985)));
evalcond[7]=(new_r01+(((-1.0)*gconst61*x989))+(((-1.0)*x985*x987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x991=((1.0)*new_r10);
CheckValue<IkReal> x992=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x992.valid){
continue;
}
CheckValue<IkReal> x993 = IKatan2WithCheck(IkReal(((((-1.0)*gconst61*x991))+((gconst60*new_r00)))),IkReal(((((-1.0)*gconst61*new_r00))+(((-1.0)*gconst60*x991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x993.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x992.value)))+(x993.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x994=IKcos(j2);
IkReal x995=IKsin(j2);
IkReal x996=((1.0)*gconst60);
IkReal x997=(gconst61*x994);
IkReal x998=((1.0)*x995);
IkReal x999=(x995*x996);
evalcond[0]=(((new_r10*x995))+gconst61+((new_r00*x994)));
evalcond[1]=(((gconst60*x994))+new_r10+((gconst61*x995)));
evalcond[2]=((((-1.0)*new_r00*x998))+((new_r10*x994))+gconst60);
evalcond[3]=(((new_r11*x994))+(((-1.0)*new_r01*x998))+gconst61);
evalcond[4]=((((-1.0)*x999))+new_r11+x997);
evalcond[5]=((((-1.0)*x999))+new_r00+x997);
evalcond[6]=(((new_r11*x995))+(((-1.0)*x996))+((new_r01*x994)));
evalcond[7]=((((-1.0)*gconst61*x998))+(((-1.0)*x994*x996))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1000=IKcos(j2);
IkReal x1001=IKsin(j2);
IkReal x1002=((1.0)*x1001);
evalcond[0]=(x1000+new_r10);
evalcond[1]=((((-1.0)*x1002))+new_r11);
evalcond[2]=((((-1.0)*x1000))+new_r01);
evalcond[3]=((((-1.0)*x1002))+new_r00);
evalcond[4]=(((new_r10*x1001))+((new_r00*x1000)));
evalcond[5]=(((new_r11*x1000))+(((-1.0)*new_r01*x1002)));
evalcond[6]=((-1.0)+((new_r11*x1001))+((new_r01*x1000)));
evalcond[7]=((1.0)+((new_r10*x1000))+(((-1.0)*new_r00*x1002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1003=IKsin(j2);
IkReal x1004=IKcos(j2);
IkReal x1005=((1.0)*x1003);
evalcond[0]=(x1003+new_r11);
evalcond[1]=(x1004+new_r01);
evalcond[2]=(x1003+new_r00);
evalcond[3]=((((-1.0)*x1004))+new_r10);
evalcond[4]=(((new_r10*x1003))+((new_r00*x1004)));
evalcond[5]=(((new_r11*x1004))+(((-1.0)*new_r01*x1005)));
evalcond[6]=((1.0)+((new_r11*x1003))+((new_r01*x1004)));
evalcond[7]=((-1.0)+((new_r10*x1004))+(((-1.0)*new_r00*x1005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r10*new_r10)+(new_r00*new_r00));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
new_r10=0;
new_r00=0;
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x1007 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1007.valid){
continue;
}
IkReal x1006=x1007.value;
j2array[0]=((-1.0)*x1006);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x1006)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j2))))+((new_r11*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x1009 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1009.valid){
continue;
}
IkReal x1008=x1009.value;
j2array[0]=((-1.0)*x1008);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x1008)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j2))))+((new_r11*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1010=((1.0)*new_r10);
CheckValue<IkReal> x1011 = IKatan2WithCheck(IkReal((((cj4*sj4))+(((-1.0)*new_r00*x1010)))),IkReal(((((-1.0)*(cj4*cj4)))+(new_r10*new_r10))),IKFAST_ATAN2_MAGTHRESH);
if(!x1011.valid){
continue;
}
CheckValue<IkReal> x1012=IKPowWithIntegerCheck(IKsign((((cj4*new_r00))+(((-1.0)*sj4*x1010)))),-1);
if(!x1012.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1011.value)+(((1.5707963267949)*(x1012.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1013=IKsin(j2);
IkReal x1014=IKcos(j2);
IkReal x1015=((1.0)*sj4);
IkReal x1016=(cj4*x1014);
IkReal x1017=((1.0)*x1013);
IkReal x1018=(x1013*x1015);
evalcond[0]=(cj4+((new_r10*x1013))+((new_r00*x1014)));
evalcond[1]=(((sj4*x1014))+((cj4*x1013))+new_r10);
evalcond[2]=(sj4+((new_r10*x1014))+(((-1.0)*new_r00*x1017)));
evalcond[3]=(cj4+((new_r11*x1014))+(((-1.0)*new_r01*x1017)));
evalcond[4]=(x1016+(((-1.0)*x1018))+new_r11);
evalcond[5]=(x1016+(((-1.0)*x1018))+new_r00);
evalcond[6]=(((new_r11*x1013))+(((-1.0)*x1015))+((new_r01*x1014)));
evalcond[7]=((((-1.0)*x1014*x1015))+(((-1.0)*cj4*x1017))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1019=((1.0)*cj4);
CheckValue<IkReal> x1020 = IKatan2WithCheck(IkReal((((cj4*new_r00))+(((-1.0)*new_r11*x1019)))),IkReal(((((-1.0)*new_r10*x1019))+(((-1.0)*new_r01*x1019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1020.valid){
continue;
}
CheckValue<IkReal> x1021=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1021.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1020.value)+(((1.5707963267949)*(x1021.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1022=IKsin(j2);
IkReal x1023=IKcos(j2);
IkReal x1024=((1.0)*sj4);
IkReal x1025=(cj4*x1023);
IkReal x1026=((1.0)*x1022);
IkReal x1027=(x1022*x1024);
evalcond[0]=(((new_r10*x1022))+cj4+((new_r00*x1023)));
evalcond[1]=(((sj4*x1023))+((cj4*x1022))+new_r10);
evalcond[2]=((((-1.0)*new_r00*x1026))+((new_r10*x1023))+sj4);
evalcond[3]=(((new_r11*x1023))+cj4+(((-1.0)*new_r01*x1026)));
evalcond[4]=(x1025+(((-1.0)*x1027))+new_r11);
evalcond[5]=(x1025+(((-1.0)*x1027))+new_r00);
evalcond[6]=(((new_r11*x1022))+(((-1.0)*x1024))+((new_r01*x1023)));
evalcond[7]=((((-1.0)*cj4*x1026))+(((-1.0)*x1023*x1024))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1028=((1.0)*new_r10);
CheckValue<IkReal> x1029=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x1029.valid){
continue;
}
CheckValue<IkReal> x1030 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x1028))+((new_r00*sj4)))),IkReal(((((-1.0)*cj4*new_r00))+(((-1.0)*sj4*x1028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1030.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1029.value)))+(x1030.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1031=IKsin(j2);
IkReal x1032=IKcos(j2);
IkReal x1033=((1.0)*sj4);
IkReal x1034=(cj4*x1032);
IkReal x1035=((1.0)*x1031);
IkReal x1036=(x1031*x1033);
evalcond[0]=(cj4+((new_r10*x1031))+((new_r00*x1032)));
evalcond[1]=(((sj4*x1032))+((cj4*x1031))+new_r10);
evalcond[2]=(sj4+((new_r10*x1032))+(((-1.0)*new_r00*x1035)));
evalcond[3]=(cj4+((new_r11*x1032))+(((-1.0)*new_r01*x1035)));
evalcond[4]=((((-1.0)*x1036))+x1034+new_r11);
evalcond[5]=((((-1.0)*x1036))+x1034+new_r00);
evalcond[6]=((((-1.0)*x1033))+((new_r11*x1031))+((new_r01*x1032)));
evalcond[7]=((((-1.0)*cj4*x1035))+(((-1.0)*x1032*x1033))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x1037=((-1.0)*new_r22);
CheckValue<IkReal> x1039 = IKatan2WithCheck(IkReal((new_r01*x1037)),IkReal((new_r11*x1037)),IKFAST_ATAN2_MAGTHRESH);
if(!x1039.valid){
continue;
}
IkReal x1038=x1039.value;
j2array[0]=((-1.0)*x1038);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x1038)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1040=IKcos(j2);
IkReal x1041=IKsin(j2);
IkReal x1042=((1.0)*new_r00);
IkReal x1043=(new_r10*x1041);
evalcond[0]=(((new_r11*x1041))+((new_r01*x1040)));
evalcond[1]=(x1043+((new_r00*x1040)));
evalcond[2]=((((-1.0)*x1041*x1042))+((new_r10*x1040)));
evalcond[3]=(((new_r11*x1040))+(((-1.0)*new_r01*x1041)));
evalcond[4]=((((-1.0)*new_r22*x1040*x1042))+(((-1.0)*new_r22*x1043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x1045 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1045.valid){
continue;
}
IkReal x1044=x1045.value;
j2array[0]=((-1.0)*x1044);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x1044)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1046=IKcos(j2);
IkReal x1047=IKsin(j2);
IkReal x1048=((1.0)*new_r22);
IkReal x1049=(new_r11*x1047);
IkReal x1050=((1.0)*x1047);
IkReal x1051=(new_r01*x1046);
evalcond[0]=(x1051+x1049);
evalcond[1]=((((-1.0)*new_r00*x1050))+((new_r10*x1046)));
evalcond[2]=((((-1.0)*new_r01*x1050))+((new_r11*x1046)));
evalcond[3]=((((-1.0)*x1048*x1049))+(((-1.0)*x1048*x1051)));
evalcond[4]=((((-1.0)*new_r10*x1047*x1048))+(((-1.0)*new_r00*x1046*x1048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x1053 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1053.valid){
continue;
}
IkReal x1052=x1053.value;
j2array[0]=((-1.0)*x1052);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x1052)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1054=IKcos(j2);
IkReal x1055=IKsin(j2);
IkReal x1056=((1.0)*new_r22);
IkReal x1057=(new_r00*x1054);
IkReal x1058=((1.0)*x1055);
IkReal x1059=(new_r10*x1055);
evalcond[0]=(x1057+x1059);
evalcond[1]=((((-1.0)*new_r00*x1058))+((new_r10*x1054)));
evalcond[2]=((((-1.0)*new_r01*x1058))+((new_r11*x1054)));
evalcond[3]=((((-1.0)*new_r11*x1055*x1056))+(((-1.0)*new_r01*x1054*x1056)));
evalcond[4]=((((-1.0)*x1056*x1057))+(((-1.0)*x1056*x1059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1061=IKPowWithIntegerCheck(sj3,-1);
if(!x1061.valid){
continue;
}
IkReal x1060=x1061.value;
CheckValue<IkReal> x1062=IKPowWithIntegerCheck(new_r00,-1);
if(!x1062.valid){
continue;
}
if( IKabs((x1060*(x1062.value)*((((sj3*sj4))+((new_r02*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x1060)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1060*(x1062.value)*((((sj3*sj4))+((new_r02*new_r10))))))+IKsqr((new_r02*x1060))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x1060*(x1062.value)*((((sj3*sj4))+((new_r02*new_r10))))), (new_r02*x1060));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[18];
IkReal x1063=IKcos(j2);
IkReal x1064=IKsin(j2);
IkReal x1065=((1.0)*sj3);
IkReal x1066=((1.0)*cj4);
IkReal x1067=(new_r01*x1063);
IkReal x1068=(new_r02*x1063);
IkReal x1069=(cj3*x1064);
IkReal x1070=(cj3*x1066);
IkReal x1071=(sj4*x1063);
IkReal x1072=(new_r11*x1064);
IkReal x1073=((1.0)*x1064);
IkReal x1074=(new_r00*x1063);
IkReal x1075=(new_r10*x1064);
IkReal x1076=(new_r12*x1064);
evalcond[0]=((((-1.0)*x1063*x1065))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x1064*x1065)));
evalcond[2]=(((new_r12*x1063))+(((-1.0)*new_r02*x1073)));
evalcond[3]=(sj4+(((-1.0)*new_r00*x1073))+((new_r10*x1063)));
evalcond[4]=(cj4+(((-1.0)*new_r01*x1073))+((new_r11*x1063)));
evalcond[5]=(((cj4*x1063))+new_r11+((sj4*x1069)));
evalcond[6]=(x1076+x1068+(((-1.0)*x1065)));
evalcond[7]=(x1072+x1067+((cj3*sj4)));
evalcond[8]=(((cj3*x1071))+new_r01+(((-1.0)*x1064*x1066)));
evalcond[9]=(x1071+(((-1.0)*x1066*x1069))+new_r10);
evalcond[10]=(x1074+x1075+(((-1.0)*x1070)));
evalcond[11]=((((-1.0)*x1063*x1070))+(((-1.0)*sj4*x1073))+new_r00);
evalcond[12]=(((cj3*x1068))+((new_r22*sj3))+((new_r12*x1069)));
evalcond[13]=(sj4+((cj3*x1067))+((new_r11*x1069))+((new_r21*sj3)));
evalcond[14]=((((-1.0)*x1065*x1075))+(((-1.0)*x1065*x1074))+((cj3*new_r20)));
evalcond[15]=((((-1.0)*x1065*x1072))+((cj3*new_r21))+(((-1.0)*x1065*x1067)));
evalcond[16]=((1.0)+(((-1.0)*x1065*x1076))+((cj3*new_r22))+(((-1.0)*x1065*x1068)));
evalcond[17]=(((new_r20*sj3))+((cj3*x1074))+((new_r10*x1069))+(((-1.0)*x1066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1077=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1077.valid){
continue;
}
CheckValue<IkReal> x1078 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1078.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1077.value)))+(x1078.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[18];
IkReal x1079=IKcos(j2);
IkReal x1080=IKsin(j2);
IkReal x1081=((1.0)*sj3);
IkReal x1082=((1.0)*cj4);
IkReal x1083=(new_r01*x1079);
IkReal x1084=(new_r02*x1079);
IkReal x1085=(cj3*x1080);
IkReal x1086=(cj3*x1082);
IkReal x1087=(sj4*x1079);
IkReal x1088=(new_r11*x1080);
IkReal x1089=((1.0)*x1080);
IkReal x1090=(new_r00*x1079);
IkReal x1091=(new_r10*x1080);
IkReal x1092=(new_r12*x1080);
evalcond[0]=((((-1.0)*x1079*x1081))+new_r02);
evalcond[1]=((((-1.0)*x1080*x1081))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1089))+((new_r12*x1079)));
evalcond[3]=(sj4+(((-1.0)*new_r00*x1089))+((new_r10*x1079)));
evalcond[4]=(cj4+(((-1.0)*new_r01*x1089))+((new_r11*x1079)));
evalcond[5]=(((sj4*x1085))+((cj4*x1079))+new_r11);
evalcond[6]=(x1092+x1084+(((-1.0)*x1081)));
evalcond[7]=(x1083+x1088+((cj3*sj4)));
evalcond[8]=((((-1.0)*x1080*x1082))+((cj3*x1087))+new_r01);
evalcond[9]=(x1087+(((-1.0)*x1082*x1085))+new_r10);
evalcond[10]=(x1090+x1091+(((-1.0)*x1086)));
evalcond[11]=((((-1.0)*sj4*x1089))+(((-1.0)*x1079*x1086))+new_r00);
evalcond[12]=(((new_r22*sj3))+((cj3*x1084))+((new_r12*x1085)));
evalcond[13]=(sj4+((cj3*x1083))+((new_r11*x1085))+((new_r21*sj3)));
evalcond[14]=((((-1.0)*x1081*x1090))+(((-1.0)*x1081*x1091))+((cj3*new_r20)));
evalcond[15]=((((-1.0)*x1081*x1083))+(((-1.0)*x1081*x1088))+((cj3*new_r21)));
evalcond[16]=((1.0)+(((-1.0)*x1081*x1092))+(((-1.0)*x1081*x1084))+((cj3*new_r22)));
evalcond[17]=(((new_r20*sj3))+((new_r10*x1085))+(((-1.0)*x1082))+((cj3*x1090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1093=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1093.valid){
continue;
}
CheckValue<IkReal> x1094 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1094.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1093.value)))+(x1094.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1095=IKcos(j2);
IkReal x1096=IKsin(j2);
IkReal x1097=((1.0)*sj3);
IkReal x1098=(new_r02*x1095);
IkReal x1099=(new_r12*x1096);
IkReal x1100=(x1096*x1097);
evalcond[0]=((((-1.0)*x1095*x1097))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x1100)));
evalcond[2]=((((-1.0)*new_r02*x1096))+((new_r12*x1095)));
evalcond[3]=(x1098+x1099+(((-1.0)*x1097)));
evalcond[4]=(((new_r22*sj3))+((cj3*x1098))+((cj3*x1099)));
evalcond[5]=((((-1.0)*new_r00*x1095*x1097))+(((-1.0)*new_r10*x1100))+((cj3*new_r20)));
evalcond[6]=((((-1.0)*new_r01*x1095*x1097))+(((-1.0)*new_r11*x1100))+((cj3*new_r21)));
evalcond[7]=((1.0)+(((-1.0)*x1097*x1098))+(((-1.0)*x1097*x1099))+((cj3*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
j4eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1101=((1.0)*cj2);
if( IKabs(((((-1.0)*new_r01*x1101))+(((-1.0)*new_r11*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj2))+(((-1.0)*new_r11*x1101)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x1101))+(((-1.0)*new_r11*sj2))))+IKsqr((((new_r01*sj2))+(((-1.0)*new_r11*x1101))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*new_r01*x1101))+(((-1.0)*new_r11*sj2))), (((new_r01*sj2))+(((-1.0)*new_r11*x1101))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1102=IKsin(j4);
IkReal x1103=IKcos(j4);
IkReal x1104=((1.0)*sj2);
IkReal x1105=(cj2*x1102);
IkReal x1106=(cj2*x1103);
IkReal x1107=(x1103*x1104);
evalcond[0]=(x1102+((new_r11*sj2))+((cj2*new_r01)));
evalcond[1]=(x1102+((cj2*new_r10))+(((-1.0)*new_r00*x1104)));
evalcond[2]=(x1103+((cj2*new_r11))+(((-1.0)*new_r01*x1104)));
evalcond[3]=(((sj2*x1102))+x1106+new_r11);
evalcond[4]=(((new_r10*sj2))+(((-1.0)*x1103))+((cj2*new_r00)));
evalcond[5]=(x1105+new_r01+(((-1.0)*x1107)));
evalcond[6]=(x1105+new_r10+(((-1.0)*x1107)));
evalcond[7]=((((-1.0)*x1106))+new_r00+(((-1.0)*x1102*x1104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1108=((1.0)*new_r10);
if( IKabs((((new_r11*sj2))+(((-1.0)*cj2*x1108)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj2*x1108))+(((-1.0)*cj2*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*sj2))+(((-1.0)*cj2*x1108))))+IKsqr(((((-1.0)*sj2*x1108))+(((-1.0)*cj2*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((new_r11*sj2))+(((-1.0)*cj2*x1108))), ((((-1.0)*sj2*x1108))+(((-1.0)*cj2*new_r11))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1109=IKcos(j4);
IkReal x1110=IKsin(j4);
IkReal x1111=((1.0)*sj2);
IkReal x1112=(cj2*x1109);
IkReal x1113=((1.0)*x1110);
IkReal x1114=(x1110*x1111);
evalcond[0]=(x1109+((new_r10*sj2))+((cj2*new_r00)));
evalcond[1]=(x1110+((cj2*new_r10))+(((-1.0)*new_r00*x1111)));
evalcond[2]=(x1109+(((-1.0)*new_r01*x1111))+((cj2*new_r11)));
evalcond[3]=(((new_r11*sj2))+((cj2*new_r01))+(((-1.0)*x1113)));
evalcond[4]=(((sj2*x1109))+((cj2*x1110))+new_r10);
evalcond[5]=(x1112+new_r11+(((-1.0)*x1114)));
evalcond[6]=(x1112+new_r00+(((-1.0)*x1114)));
evalcond[7]=((((-1.0)*x1109*x1111))+new_r01+(((-1.0)*cj2*x1113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1115=IKsin(j4);
IkReal x1116=IKcos(j4);
IkReal x1117=((1.0)*x1116);
evalcond[0]=(x1115+new_r10);
evalcond[1]=(x1116+new_r11);
evalcond[2]=(((sj3*x1115))+new_r21);
evalcond[3]=(new_r01+((cj3*x1115)));
evalcond[4]=((((-1.0)*sj3*x1117))+new_r20);
evalcond[5]=(new_r00+(((-1.0)*cj3*x1117)));
evalcond[6]=(x1115+((cj3*new_r01))+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+((cj3*new_r00))+(((-1.0)*x1117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r10, new_r11);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1118=IKsin(j4);
IkReal x1119=IKcos(j4);
IkReal x1120=((1.0)*new_r00);
IkReal x1121=((1.0)*new_r01);
IkReal x1122=((1.0)*x1119);
evalcond[0]=(((sj3*x1118))+new_r21);
evalcond[1]=(x1118+(((-1.0)*new_r10)));
evalcond[2]=(x1119+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj3*x1122))+new_r20);
evalcond[4]=((((-1.0)*x1121))+((cj3*x1118)));
evalcond[5]=((((-1.0)*cj3*x1122))+(((-1.0)*x1120)));
evalcond[6]=(x1118+(((-1.0)*cj3*x1121))+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+(((-1.0)*cj3*x1120))+(((-1.0)*x1122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r00, new_r01);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1123=IKsin(j4);
IkReal x1124=IKcos(j4);
IkReal x1125=((1.0)*x1124);
evalcond[0]=(((sj3*x1123))+new_r21);
evalcond[1]=(x1123+(((-1.0)*new_r00)));
evalcond[2]=(x1124+(((-1.0)*new_r01)));
evalcond[3]=(new_r11+((cj3*x1123)));
evalcond[4]=((((-1.0)*sj3*x1125))+new_r20);
evalcond[5]=((((-1.0)*cj3*x1125))+new_r10);
evalcond[6]=(x1123+((cj3*new_r11))+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+(((-1.0)*x1125))+((cj3*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1126=IKsin(j4);
IkReal x1127=IKcos(j4);
IkReal x1128=((1.0)*cj3);
IkReal x1129=((1.0)*x1127);
evalcond[0]=(x1126+new_r00);
evalcond[1]=(x1127+new_r01);
evalcond[2]=(((sj3*x1126))+new_r21);
evalcond[3]=((((-1.0)*sj3*x1129))+new_r20);
evalcond[4]=((((-1.0)*new_r11))+((cj3*x1126)));
evalcond[5]=((((-1.0)*x1127*x1128))+(((-1.0)*new_r10)));
evalcond[6]=(x1126+(((-1.0)*new_r11*x1128))+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+(((-1.0)*new_r10*x1128))+(((-1.0)*x1129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j4eval[0]=IKabs(new_r22);
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j4]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*new_r22);
op[1]=0;
op[2]=new_r22;
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1131=IKPowWithIntegerCheck(sj3,-1);
if(!x1131.valid){
continue;
}
IkReal x1130=x1131.value;
CheckValue<IkReal> x1132=IKPowWithIntegerCheck(sj2,-1);
if(!x1132.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x1130)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1130*(x1132.value)*((((new_r01*sj3))+(((-1.0)*cj2*cj3*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x1130))+IKsqr((x1130*(x1132.value)*((((new_r01*sj3))+(((-1.0)*cj2*cj3*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r21*x1130), (x1130*(x1132.value)*((((new_r01*sj3))+(((-1.0)*cj2*cj3*new_r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x1133=IKsin(j4);
IkReal x1134=IKcos(j4);
IkReal x1135=(cj2*new_r01);
IkReal x1136=(new_r10*sj2);
IkReal x1137=((1.0)*sj2);
IkReal x1138=(cj3*sj2);
IkReal x1139=(cj2*new_r00);
IkReal x1140=((1.0)*x1134);
IkReal x1141=(cj2*x1133);
evalcond[0]=(new_r21+((sj3*x1133)));
evalcond[1]=(new_r20+(((-1.0)*sj3*x1140)));
evalcond[2]=(x1133+(((-1.0)*new_r00*x1137))+((cj2*new_r10)));
evalcond[3]=(x1134+(((-1.0)*new_r01*x1137))+((cj2*new_r11)));
evalcond[4]=(x1135+((cj3*x1133))+((new_r11*sj2)));
evalcond[5]=(((cj2*x1134))+new_r11+((x1133*x1138)));
evalcond[6]=((((-1.0)*cj3*x1140))+x1139+x1136);
evalcond[7]=(((cj3*x1141))+(((-1.0)*x1134*x1137))+new_r01);
evalcond[8]=(x1141+new_r10+(((-1.0)*cj3*x1134*x1137)));
evalcond[9]=((((-1.0)*cj2*cj3*x1140))+new_r00+(((-1.0)*x1133*x1137)));
evalcond[10]=(x1133+((cj3*x1135))+((new_r11*x1138))+((new_r21*sj3)));
evalcond[11]=(((cj3*x1139))+((cj3*x1136))+((new_r20*sj3))+(((-1.0)*x1140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1143=IKPowWithIntegerCheck(sj3,-1);
if(!x1143.valid){
continue;
}
IkReal x1142=x1143.value;
CheckValue<IkReal> x1144=IKPowWithIntegerCheck(cj2,-1);
if(!x1144.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x1142)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1142*(x1144.value)*((((cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x1142))+IKsqr((x1142*(x1144.value)*((((cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r21*x1142), (x1142*(x1144.value)*((((cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x1145=IKsin(j4);
IkReal x1146=IKcos(j4);
IkReal x1147=(cj2*new_r01);
IkReal x1148=(new_r10*sj2);
IkReal x1149=((1.0)*sj2);
IkReal x1150=(cj3*sj2);
IkReal x1151=(cj2*new_r00);
IkReal x1152=((1.0)*x1146);
IkReal x1153=(cj2*x1145);
evalcond[0]=(((sj3*x1145))+new_r21);
evalcond[1]=((((-1.0)*sj3*x1152))+new_r20);
evalcond[2]=(x1145+(((-1.0)*new_r00*x1149))+((cj2*new_r10)));
evalcond[3]=(x1146+(((-1.0)*new_r01*x1149))+((cj2*new_r11)));
evalcond[4]=(x1147+((new_r11*sj2))+((cj3*x1145)));
evalcond[5]=(((cj2*x1146))+new_r11+((x1145*x1150)));
evalcond[6]=(x1148+x1151+(((-1.0)*cj3*x1152)));
evalcond[7]=(((cj3*x1153))+(((-1.0)*x1146*x1149))+new_r01);
evalcond[8]=(x1153+(((-1.0)*cj3*x1146*x1149))+new_r10);
evalcond[9]=((((-1.0)*x1145*x1149))+(((-1.0)*cj2*cj3*x1152))+new_r00);
evalcond[10]=(((new_r11*x1150))+x1145+((cj3*x1147))+((new_r21*sj3)));
evalcond[11]=(((new_r20*sj3))+(((-1.0)*x1152))+((cj3*x1151))+((cj3*x1148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1154=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1154.valid){
continue;
}
CheckValue<IkReal> x1155 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1154.value)))+(x1155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x1156=IKsin(j4);
IkReal x1157=IKcos(j4);
IkReal x1158=(cj2*new_r01);
IkReal x1159=(new_r10*sj2);
IkReal x1160=((1.0)*sj2);
IkReal x1161=(cj3*sj2);
IkReal x1162=(cj2*new_r00);
IkReal x1163=((1.0)*x1157);
IkReal x1164=(cj2*x1156);
evalcond[0]=(((sj3*x1156))+new_r21);
evalcond[1]=((((-1.0)*sj3*x1163))+new_r20);
evalcond[2]=(x1156+((cj2*new_r10))+(((-1.0)*new_r00*x1160)));
evalcond[3]=(x1157+(((-1.0)*new_r01*x1160))+((cj2*new_r11)));
evalcond[4]=(x1158+((cj3*x1156))+((new_r11*sj2)));
evalcond[5]=(((cj2*x1157))+((x1156*x1161))+new_r11);
evalcond[6]=(x1159+x1162+(((-1.0)*cj3*x1163)));
evalcond[7]=(((cj3*x1164))+new_r01+(((-1.0)*x1157*x1160)));
evalcond[8]=(x1164+(((-1.0)*cj3*x1157*x1160))+new_r10);
evalcond[9]=((((-1.0)*x1156*x1160))+(((-1.0)*cj2*cj3*x1163))+new_r00);
evalcond[10]=(x1156+((cj3*x1158))+((new_r11*x1161))+((new_r21*sj3)));
evalcond[11]=(((new_r20*sj3))+((cj3*x1159))+((cj3*x1162))+(((-1.0)*x1163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - mantra (7a9565d313267268ef14f16d6f105818)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
